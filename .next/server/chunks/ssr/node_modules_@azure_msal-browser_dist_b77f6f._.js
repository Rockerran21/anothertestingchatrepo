module.exports = {

"[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "inMemRedirectUnavailable": ()=>inMemRedirectUnavailable,
    "storageNotSupported": ()=>storageNotSupported,
    "stubbedPublicClientApplicationCalled": ()=>stubbedPublicClientApplicationCalled
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const storageNotSupported = "storage_not_supported";
const stubbedPublicClientApplicationCalled = "stubbed_public_client_application_called";
const inMemRedirectUnavailable = "in_mem_redirect_unavailable";
;
 //# sourceMappingURL=BrowserConfigurationAuthErrorCodes.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs [app-ssr] (ecmascript) <locals>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BrowserConfigurationAuthError": ()=>BrowserConfigurationAuthError,
    "BrowserConfigurationAuthErrorMessage": ()=>BrowserConfigurationAuthErrorMessage,
    "BrowserConfigurationAuthErrorMessages": ()=>BrowserConfigurationAuthErrorMessages,
    "createBrowserConfigurationAuthError": ()=>createBrowserConfigurationAuthError
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BrowserConfigurationAuthErrorMessages = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["storageNotSupported"]]: "Given storage configuration option was not supported.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]]: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inMemRedirectUnavailable"]]: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
};
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use BrowserAuthErrorCodes instead
 */ const BrowserConfigurationAuthErrorMessage = {
    storageNotSupportedError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["storageNotSupported"],
        desc: BrowserConfigurationAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["storageNotSupported"]]
    },
    stubPcaInstanceCalled: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"],
        desc: BrowserConfigurationAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]]
    },
    inMemRedirectUnavailable: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inMemRedirectUnavailable"],
        desc: BrowserConfigurationAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inMemRedirectUnavailable"]]
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ class BrowserConfigurationAuthError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"] {
    constructor(errorCode, errorMessage){
        super(errorCode, errorMessage);
        this.name = "BrowserConfigurationAuthError";
        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);
    }
}
function createBrowserConfigurationAuthError(errorCode) {
    return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);
}
;
 //# sourceMappingURL=BrowserConfigurationAuthError.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "stubbedPublicClientApplication": ()=>stubbedPublicClientApplication
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const stubbedPublicClientApplication = {
    initialize: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    acquireTokenPopup: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    acquireTokenRedirect: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    acquireTokenSilent: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    acquireTokenByCode: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    getAllAccounts: ()=>{
        return [];
    },
    getAccount: ()=>{
        return null;
    },
    getAccountByHomeId: ()=>{
        return null;
    },
    getAccountByUsername: ()=>{
        return null;
    },
    getAccountByLocalId: ()=>{
        return null;
    },
    handleRedirectPromise: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    loginPopup: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    loginRedirect: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    logout: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    logoutRedirect: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    logoutPopup: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    ssoSilent: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    addEventCallback: ()=>{
        return null;
    },
    removeEventCallback: ()=>{
        return;
    },
    addPerformanceCallback: ()=>{
        return "";
    },
    removePerformanceCallback: ()=>{
        return false;
    },
    enableAccountStorageEvents: ()=>{
        return;
    },
    disableAccountStorageEvents: ()=>{
        return;
    },
    getTokenCache: ()=>{
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]);
    },
    getLogger: ()=>{
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]);
    },
    setLogger: ()=>{
        return;
    },
    setActiveAccount: ()=>{
        return;
    },
    getActiveAccount: ()=>{
        return null;
    },
    initializeWrapperLibrary: ()=>{
        return;
    },
    setNavigationClient: ()=>{
        return;
    },
    getConfiguration: ()=>{
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]);
    },
    hydrateCache: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    },
    clearCache: ()=>{
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stubbedPublicClientApplicationCalled"]));
    }
};
;
 //# sourceMappingURL=IPublicClientApplication.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "ApiId": ()=>ApiId,
    "BROWSER_PERF_ENABLED_KEY": ()=>BROWSER_PERF_ENABLED_KEY,
    "BrowserCacheLocation": ()=>BrowserCacheLocation,
    "BrowserConstants": ()=>BrowserConstants,
    "CacheLookupPolicy": ()=>CacheLookupPolicy,
    "DB_NAME": ()=>DB_NAME,
    "DB_TABLE_NAME": ()=>DB_TABLE_NAME,
    "DB_VERSION": ()=>DB_VERSION,
    "DEFAULT_REQUEST": ()=>DEFAULT_REQUEST,
    "HTTP_REQUEST_TYPE": ()=>HTTP_REQUEST_TYPE,
    "InMemoryCacheKeys": ()=>InMemoryCacheKeys,
    "InteractionStatus": ()=>InteractionStatus,
    "InteractionType": ()=>InteractionType,
    "KEY_FORMAT_JWK": ()=>KEY_FORMAT_JWK,
    "LOG_LEVEL_CACHE_KEY": ()=>LOG_LEVEL_CACHE_KEY,
    "LOG_PII_CACHE_KEY": ()=>LOG_PII_CACHE_KEY,
    "NativeConstants": ()=>NativeConstants,
    "NativeExtensionMethod": ()=>NativeExtensionMethod,
    "StaticCacheKeys": ()=>StaticCacheKeys,
    "TemporaryCacheKeys": ()=>TemporaryCacheKeys,
    "WrapperSKU": ()=>WrapperSKU,
    "iFrameRenewalPolicies": ()=>iFrameRenewalPolicies
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Constants
 */ const BrowserConstants = {
    /**
     * Interaction in progress cache value
     */ INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
    /**
     * Invalid grant error code
     */ INVALID_GRANT_ERROR: "invalid_grant",
    /**
     * Default popup window width
     */ POPUP_WIDTH: 483,
    /**
     * Default popup window height
     */ POPUP_HEIGHT: 600,
    /**
     * Name of the popup window starts with
     */ POPUP_NAME_PREFIX: "msal",
    /**
     * Default popup monitor poll interval in milliseconds
     */ DEFAULT_POLL_INTERVAL_MS: 30,
    /**
     * Msal-browser SKU
     */ MSAL_SKU: "msal.js.browser"
};
const NativeConstants = {
    CHANNEL_ID: "53ee284d-920a-4b59-9d30-a60315b26836",
    PREFERRED_EXTENSION_ID: "ppnbnpeolgkicgegkbkbjmhlideopiji",
    MATS_TELEMETRY: "MATS"
};
const NativeExtensionMethod = {
    HandshakeRequest: "Handshake",
    HandshakeResponse: "HandshakeResponse",
    GetToken: "GetToken",
    Response: "Response"
};
const BrowserCacheLocation = {
    LocalStorage: "localStorage",
    SessionStorage: "sessionStorage",
    MemoryStorage: "memoryStorage"
};
/**
 * HTTP Request types supported by MSAL.
 */ const HTTP_REQUEST_TYPE = {
    GET: "GET",
    POST: "POST"
};
/**
 * Temporary cache keys for MSAL, deleted after any request.
 */ const TemporaryCacheKeys = {
    AUTHORITY: "authority",
    ACQUIRE_TOKEN_ACCOUNT: "acquireToken.account",
    SESSION_STATE: "session.state",
    REQUEST_STATE: "request.state",
    NONCE_IDTOKEN: "nonce.id_token",
    ORIGIN_URI: "request.origin",
    RENEW_STATUS: "token.renew.status",
    URL_HASH: "urlHash",
    REQUEST_PARAMS: "request.params",
    SCOPES: "scopes",
    INTERACTION_STATUS_KEY: "interaction.status",
    CCS_CREDENTIAL: "ccs.credential",
    CORRELATION_ID: "request.correlationId",
    NATIVE_REQUEST: "request.native",
    REDIRECT_CONTEXT: "request.redirect.context"
};
const StaticCacheKeys = {
    ACCOUNT_KEYS: "msal.account.keys",
    TOKEN_KEYS: "msal.token.keys"
};
/**
 * Cache keys stored in-memory
 */ const InMemoryCacheKeys = {
    WRAPPER_SKU: "wrapper.sku",
    WRAPPER_VER: "wrapper.version"
};
/**
 * API Codes for Telemetry purposes.
 * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
 * 0-99 Silent Flow
 * 800-899 Auth Code Flow
 */ const ApiId = {
    acquireTokenRedirect: 861,
    acquireTokenPopup: 862,
    ssoSilent: 863,
    acquireTokenSilent_authCode: 864,
    handleRedirectPromise: 865,
    acquireTokenByCode: 866,
    acquireTokenSilent_silentFlow: 61,
    logout: 961,
    logoutPopup: 962
};
/*
 * Interaction type of the API - used for state and telemetry
 */ var InteractionType;
(function(InteractionType) {
    InteractionType["Redirect"] = "redirect";
    InteractionType["Popup"] = "popup";
    InteractionType["Silent"] = "silent";
    InteractionType["None"] = "none";
})(InteractionType || (InteractionType = {}));
/**
 * Types of interaction currently in progress.
 * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
 */ const InteractionStatus = {
    /**
     * Initial status before interaction occurs
     */ Startup: "startup",
    /**
     * Status set when all login calls occuring
     */ Login: "login",
    /**
     * Status set when logout call occuring
     */ Logout: "logout",
    /**
     * Status set for acquireToken calls
     */ AcquireToken: "acquireToken",
    /**
     * Status set for ssoSilent calls
     */ SsoSilent: "ssoSilent",
    /**
     * Status set when handleRedirect in progress
     */ HandleRedirect: "handleRedirect",
    /**
     * Status set when interaction is complete
     */ None: "none"
};
const DEFAULT_REQUEST = {
    scopes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OIDC_DEFAULT_SCOPES"]
};
/**
 * JWK Key Format string (Type MUST be defined for window crypto APIs)
 */ const KEY_FORMAT_JWK = "jwk";
// Supported wrapper SKUs
const WrapperSKU = {
    React: "@azure/msal-react",
    Angular: "@azure/msal-angular"
};
// DatabaseStorage Constants
const DB_NAME = "msal.db";
const DB_VERSION = 1;
const DB_TABLE_NAME = `${DB_NAME}.keys`;
const CacheLookupPolicy = {
    /*
     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired
     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token
     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.
     */ Default: 0,
    /*
     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or
     * refresh tokens.
     */ AccessToken: 1,
    /*
     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or
     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it
     * will not be renewed and acquireTokenSilent will fail.
     */ AccessTokenAndRefreshToken: 2,
    /*
     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to
     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be
     * renewed and acquireTokenSilent will fail.
     */ RefreshToken: 3,
    /*
     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the
     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to
     * setting "forceRefresh: true".
     */ RefreshTokenAndNetwork: 4,
    /*
     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will
     * always fail if 3rd party cookies are blocked by the browser.
     */ Skip: 5
};
const iFrameRenewalPolicies = [
    CacheLookupPolicy.Default,
    CacheLookupPolicy.Skip,
    CacheLookupPolicy.RefreshTokenAndNetwork
];
const LOG_LEVEL_CACHE_KEY = "msal.browser.log.level";
const LOG_PII_CACHE_KEY = "msal.browser.log.pii";
const BROWSER_PERF_ENABLED_KEY = "msal.browser.performance.enabled";
;
 //# sourceMappingURL=BrowserConstants.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "EventType": ()=>EventType
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const EventType = {
    INITIALIZE_START: "msal:initializeStart",
    INITIALIZE_END: "msal:initializeEnd",
    ACCOUNT_ADDED: "msal:accountAdded",
    ACCOUNT_REMOVED: "msal:accountRemoved",
    ACTIVE_ACCOUNT_CHANGED: "msal:activeAccountChanged",
    LOGIN_START: "msal:loginStart",
    LOGIN_SUCCESS: "msal:loginSuccess",
    LOGIN_FAILURE: "msal:loginFailure",
    ACQUIRE_TOKEN_START: "msal:acquireTokenStart",
    ACQUIRE_TOKEN_SUCCESS: "msal:acquireTokenSuccess",
    ACQUIRE_TOKEN_FAILURE: "msal:acquireTokenFailure",
    ACQUIRE_TOKEN_NETWORK_START: "msal:acquireTokenFromNetworkStart",
    SSO_SILENT_START: "msal:ssoSilentStart",
    SSO_SILENT_SUCCESS: "msal:ssoSilentSuccess",
    SSO_SILENT_FAILURE: "msal:ssoSilentFailure",
    ACQUIRE_TOKEN_BY_CODE_START: "msal:acquireTokenByCodeStart",
    ACQUIRE_TOKEN_BY_CODE_SUCCESS: "msal:acquireTokenByCodeSuccess",
    ACQUIRE_TOKEN_BY_CODE_FAILURE: "msal:acquireTokenByCodeFailure",
    HANDLE_REDIRECT_START: "msal:handleRedirectStart",
    HANDLE_REDIRECT_END: "msal:handleRedirectEnd",
    POPUP_OPENED: "msal:popupOpened",
    LOGOUT_START: "msal:logoutStart",
    LOGOUT_SUCCESS: "msal:logoutSuccess",
    LOGOUT_FAILURE: "msal:logoutFailure",
    LOGOUT_END: "msal:logoutEnd",
    RESTORE_FROM_BFCACHE: "msal:restoreFromBFCache"
};
;
 //# sourceMappingURL=EventType.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/event/EventMessage.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "EventMessageUtils": ()=>EventMessageUtils
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class EventMessageUtils {
    /**
     * Gets interaction status from event message
     * @param message
     * @param currentStatus
     */ static getInteractionStatusFromEvent(message, currentStatus) {
        switch(message.eventType){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_START:
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].Login;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_START:
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].SsoSilent;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START:
                if (message.interactionType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect || message.interactionType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup) {
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].AcquireToken;
                }
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].HANDLE_REDIRECT_START:
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].HandleRedirect;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_START:
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].Logout;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_SUCCESS:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_FAILURE:
                if (currentStatus && currentStatus !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].SsoSilent) {
                    break;
                }
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].None;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_END:
                if (currentStatus && currentStatus !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].Logout) {
                    break;
                }
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].None;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].HANDLE_REDIRECT_END:
                if (currentStatus && currentStatus !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].HandleRedirect) {
                    break;
                }
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].None;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_SUCCESS:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_FAILURE:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].RESTORE_FROM_BFCACHE:
                if (message.interactionType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect || message.interactionType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup) {
                    if (currentStatus && currentStatus !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].Login && currentStatus !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].AcquireToken) {
                        break;
                    }
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionStatus"].None;
                }
                break;
        }
        return null;
    }
}
;
 //# sourceMappingURL=EventMessage.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NavigationClient": ()=>NavigationClient
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NavigationClient {
    /**
     * Navigates to other pages within the same web application
     * @param url
     * @param options
     */ navigateInternal(url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    }
    /**
     * Navigates to other pages outside the web application i.e. the Identity Provider
     * @param url
     * @param options
     */ navigateExternal(url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    }
    /**
     * Default navigation implementation invoked by the internal and external functions
     * @param url
     * @param options
     */ static defaultNavigateWindow(url, options) {
        if (options.noHistory) {
            window.location.replace(url);
        } else {
            window.location.assign(url);
        }
        return new Promise((resolve)=>{
            setTimeout(()=>{
                resolve(true);
            }, options.timeout);
        });
    }
}
;
 //# sourceMappingURL=NavigationClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "authCodeOrNativeAccountIdRequired": ()=>authCodeOrNativeAccountIdRequired,
    "authCodeRequired": ()=>authCodeRequired,
    "authRequestNotSetError": ()=>authRequestNotSetError,
    "blockIframeReload": ()=>blockIframeReload,
    "blockNestedPopups": ()=>blockNestedPopups,
    "cryptoKeyNotFound": ()=>cryptoKeyNotFound,
    "cryptoNonExistent": ()=>cryptoNonExistent,
    "databaseNotOpen": ()=>databaseNotOpen,
    "databaseUnavailable": ()=>databaseUnavailable,
    "emptyNavigateUri": ()=>emptyNavigateUri,
    "emptyWindowError": ()=>emptyWindowError,
    "failedToParseResponse": ()=>failedToParseResponse,
    "getRequestFailed": ()=>getRequestFailed,
    "hashDoesNotContainKnownProperties": ()=>hashDoesNotContainKnownProperties,
    "hashEmptyError": ()=>hashEmptyError,
    "iframeClosedPrematurely": ()=>iframeClosedPrematurely,
    "interactionInProgress": ()=>interactionInProgress,
    "invalidBase64String": ()=>invalidBase64String,
    "invalidCacheType": ()=>invalidCacheType,
    "invalidPopTokenRequest": ()=>invalidPopTokenRequest,
    "monitorPopupTimeout": ()=>monitorPopupTimeout,
    "monitorWindowTimeout": ()=>monitorWindowTimeout,
    "nativeConnectionNotEstablished": ()=>nativeConnectionNotEstablished,
    "nativeExtensionNotInstalled": ()=>nativeExtensionNotInstalled,
    "nativeHandshakeTimeout": ()=>nativeHandshakeTimeout,
    "nativePromptNotSupported": ()=>nativePromptNotSupported,
    "noAccountError": ()=>noAccountError,
    "noCachedAuthorityError": ()=>noCachedAuthorityError,
    "noNetworkConnectivity": ()=>noNetworkConnectivity,
    "noStateInHash": ()=>noStateInHash,
    "noTokenRequestCacheError": ()=>noTokenRequestCacheError,
    "nonBrowserEnvironment": ()=>nonBrowserEnvironment,
    "pkceNotCreated": ()=>pkceNotCreated,
    "popupWindowError": ()=>popupWindowError,
    "postRequestFailed": ()=>postRequestFailed,
    "redirectInIframe": ()=>redirectInIframe,
    "silentLogoutUnsupported": ()=>silentLogoutUnsupported,
    "silentPromptValueError": ()=>silentPromptValueError,
    "spaCodeAndNativeAccountIdPresent": ()=>spaCodeAndNativeAccountIdPresent,
    "stateInteractionTypeMismatch": ()=>stateInteractionTypeMismatch,
    "unableToAcquireTokenFromNativePlatform": ()=>unableToAcquireTokenFromNativePlatform,
    "unableToLoadToken": ()=>unableToLoadToken,
    "unableToParseState": ()=>unableToParseState,
    "unableToParseTokenRequestCacheError": ()=>unableToParseTokenRequestCacheError,
    "uninitializedPublicClientApplication": ()=>uninitializedPublicClientApplication,
    "userCancelled": ()=>userCancelled
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const pkceNotCreated = "pkce_not_created";
const cryptoNonExistent = "crypto_nonexistent";
const emptyNavigateUri = "empty_navigate_uri";
const hashEmptyError = "hash_empty_error";
const noStateInHash = "no_state_in_hash";
const hashDoesNotContainKnownProperties = "hash_does_not_contain_known_properties";
const unableToParseState = "unable_to_parse_state";
const stateInteractionTypeMismatch = "state_interaction_type_mismatch";
const interactionInProgress = "interaction_in_progress";
const popupWindowError = "popup_window_error";
const emptyWindowError = "empty_window_error";
const userCancelled = "user_cancelled";
const monitorPopupTimeout = "monitor_popup_timeout";
const monitorWindowTimeout = "monitor_window_timeout";
const redirectInIframe = "redirect_in_iframe";
const blockIframeReload = "block_iframe_reload";
const blockNestedPopups = "block_nested_popups";
const iframeClosedPrematurely = "iframe_closed_prematurely";
const silentLogoutUnsupported = "silent_logout_unsupported";
const noAccountError = "no_account_error";
const silentPromptValueError = "silent_prompt_value_error";
const noTokenRequestCacheError = "no_token_request_cache_error";
const unableToParseTokenRequestCacheError = "unable_to_parse_token_request_cache_error";
const noCachedAuthorityError = "no_cached_authority_error";
const authRequestNotSetError = "auth_request_not_set_error";
const invalidCacheType = "invalid_cache_type";
const nonBrowserEnvironment = "non_browser_environment";
const databaseNotOpen = "database_not_open";
const noNetworkConnectivity = "no_network_connectivity";
const postRequestFailed = "post_request_failed";
const getRequestFailed = "get_request_failed";
const failedToParseResponse = "failed_to_parse_response";
const unableToLoadToken = "unable_to_load_token";
const cryptoKeyNotFound = "crypto_key_not_found";
const authCodeRequired = "auth_code_required";
const authCodeOrNativeAccountIdRequired = "auth_code_or_nativeAccountId_required";
const spaCodeAndNativeAccountIdPresent = "spa_code_and_nativeAccountId_present";
const databaseUnavailable = "database_unavailable";
const unableToAcquireTokenFromNativePlatform = "unable_to_acquire_token_from_native_platform";
const nativeHandshakeTimeout = "native_handshake_timeout";
const nativeExtensionNotInstalled = "native_extension_not_installed";
const nativeConnectionNotEstablished = "native_connection_not_established";
const uninitializedPublicClientApplication = "uninitialized_public_client_application";
const nativePromptNotSupported = "native_prompt_not_supported";
const invalidBase64String = "invalid_base64_string";
const invalidPopTokenRequest = "invalid_pop_token_request";
;
 //# sourceMappingURL=BrowserAuthErrorCodes.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BrowserAuthError": ()=>BrowserAuthError,
    "BrowserAuthErrorMessage": ()=>BrowserAuthErrorMessage,
    "BrowserAuthErrorMessages": ()=>BrowserAuthErrorMessages,
    "createBrowserAuthError": ()=>createBrowserAuthError
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const ErrorLink = "For more visit: aka.ms/msaljs/browser-errors";
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */ const BrowserAuthErrorMessages = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pkceNotCreated"]]: "The PKCE code challenge and verifier could not be generated.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoNonExistent"]]: "The crypto object or function is not available.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"]]: "Navigation URI is empty. Please check stack trace for more info.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashEmptyError"]]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noStateInHash"]]: "Hash does not contain state. Please verify that the request originated from msal.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashDoesNotContainKnownProperties"]]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseState"]]: "Unable to parse state. Please verify that the request originated from msal.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateInteractionTypeMismatch"]]: "Hash contains state but the interaction type does not match the caller.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interactionInProgress"]]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["popupWindowError"]]: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyWindowError"]]: "window.open returned null or undefined window object.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]]: "User cancelled the flow.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorPopupTimeout"]]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorWindowTimeout"]]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["redirectInIframe"]]: "Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockIframeReload"]]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockNestedPopups"]]: "Request was blocked inside a popup because MSAL detected it was running in a popup.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["iframeClosedPrematurely"]]: "The iframe being monitored was closed prematurely.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"]]: "Silent logout not supported. Please call logoutRedirect or logoutPopup instead.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noAccountError"]]: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentPromptValueError"]]: "The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noTokenRequestCacheError"]]: "No token request found in cache.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseTokenRequestCacheError"]]: "The cached token request could not be parsed.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noCachedAuthorityError"]]: "No cached authority found.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authRequestNotSetError"]]: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidCacheType"]]: "Invalid cache type",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nonBrowserEnvironment"]]: "Login and token requests are not supported in non-browser environments.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]]: "Database is not open!",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"]]: "No network connectivity. Check your internet connection.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["postRequestFailed"]]: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRequestFailed"]]: "Network request failed. Please check the network trace to determine root cause.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["failedToParseResponse"]]: "Failed to parse network response. Check network trace.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]]: "Error loading token to cache.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoKeyNotFound"]]: "Cryptographic Key or Keypair not found in browser storage.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeRequired"]]: "An authorization code must be provided (as the `code` property on the request) to this flow.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeOrNativeAccountIdRequired"]]: "An authorization code or nativeAccountId must be provided to this flow.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spaCodeAndNativeAccountIdPresent"]]: "Request cannot contain both spa code and native account id.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseUnavailable"]]: "IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToAcquireTokenFromNativePlatform"]]: `Unable to acquire token from native platform.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeHandshakeTimeout"]]: "Timed out while attempting to establish connection to browser extension",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeExtensionNotInstalled"]]: "Native extension is not installed. If you think this is a mistake call the initialize function.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uninitializedPublicClientApplication"]]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativePromptNotSupported"]]: "The provided prompt is not supported by the native platform. This request should be routed to the web based flow.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidBase64String"]]: "Invalid base64 encoded string.",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidPopTokenRequest"]]: "Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true."
};
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use exported BrowserAuthErrorCodes instead.
 * In your app you can do :
 * ```
 * import { BrowserAuthErrorCodes } from "@azure/msal-browser";
 * ```
 */ const BrowserAuthErrorMessage = {
    pkceNotGenerated: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pkceNotCreated"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pkceNotCreated"]]
    },
    cryptoDoesNotExist: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoNonExistent"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoNonExistent"]]
    },
    emptyNavigateUriError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"]]
    },
    hashEmptyError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashEmptyError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashEmptyError"]]
    },
    hashDoesNotContainStateError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noStateInHash"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noStateInHash"]]
    },
    hashDoesNotContainKnownPropertiesError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashDoesNotContainKnownProperties"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashDoesNotContainKnownProperties"]]
    },
    unableToParseStateError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseState"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseState"]]
    },
    stateInteractionTypeMismatchError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateInteractionTypeMismatch"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateInteractionTypeMismatch"]]
    },
    interactionInProgress: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interactionInProgress"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interactionInProgress"]]
    },
    popupWindowError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["popupWindowError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["popupWindowError"]]
    },
    emptyWindowError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyWindowError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyWindowError"]]
    },
    userCancelledError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]]
    },
    monitorPopupTimeoutError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorPopupTimeout"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorPopupTimeout"]]
    },
    monitorIframeTimeoutError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorWindowTimeout"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorWindowTimeout"]]
    },
    redirectInIframeError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["redirectInIframe"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["redirectInIframe"]]
    },
    blockTokenRequestsInHiddenIframeError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockIframeReload"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockIframeReload"]]
    },
    blockAcquireTokenInPopupsError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockNestedPopups"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockNestedPopups"]]
    },
    iframeClosedPrematurelyError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["iframeClosedPrematurely"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["iframeClosedPrematurely"]]
    },
    silentLogoutUnsupportedError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"]]
    },
    noAccountError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noAccountError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noAccountError"]]
    },
    silentPromptValueError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentPromptValueError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentPromptValueError"]]
    },
    noTokenRequestCacheError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noTokenRequestCacheError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noTokenRequestCacheError"]]
    },
    unableToParseTokenRequestCacheError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseTokenRequestCacheError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseTokenRequestCacheError"]]
    },
    noCachedAuthorityError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noCachedAuthorityError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noCachedAuthorityError"]]
    },
    authRequestNotSet: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authRequestNotSetError"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authRequestNotSetError"]]
    },
    invalidCacheType: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidCacheType"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidCacheType"]]
    },
    notInBrowserEnvironment: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nonBrowserEnvironment"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nonBrowserEnvironment"]]
    },
    databaseNotOpen: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]]
    },
    noNetworkConnectivity: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"]]
    },
    postRequestFailed: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["postRequestFailed"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["postRequestFailed"]]
    },
    getRequestFailed: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRequestFailed"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRequestFailed"]]
    },
    failedToParseNetworkResponse: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["failedToParseResponse"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["failedToParseResponse"]]
    },
    unableToLoadTokenError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]]
    },
    signingKeyNotFoundInStorage: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoKeyNotFound"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoKeyNotFound"]]
    },
    authCodeRequired: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeRequired"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeRequired"]]
    },
    authCodeOrNativeAccountRequired: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeOrNativeAccountIdRequired"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeOrNativeAccountIdRequired"]]
    },
    spaCodeAndNativeAccountPresent: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spaCodeAndNativeAccountIdPresent"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spaCodeAndNativeAccountIdPresent"]]
    },
    databaseUnavailable: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseUnavailable"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseUnavailable"]]
    },
    unableToAcquireTokenFromNativePlatform: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToAcquireTokenFromNativePlatform"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToAcquireTokenFromNativePlatform"]]
    },
    nativeHandshakeTimeout: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeHandshakeTimeout"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeHandshakeTimeout"]]
    },
    nativeExtensionNotInstalled: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeExtensionNotInstalled"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeExtensionNotInstalled"]]
    },
    nativeConnectionNotEstablished: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]]
    },
    uninitializedPublicClientApplication: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uninitializedPublicClientApplication"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uninitializedPublicClientApplication"]]
    },
    nativePromptNotSupported: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativePromptNotSupported"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativePromptNotSupported"]]
    },
    invalidBase64StringError: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidBase64String"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidBase64String"]]
    },
    invalidPopTokenRequest: {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidPopTokenRequest"],
        desc: BrowserAuthErrorMessages[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidPopTokenRequest"]]
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ class BrowserAuthError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"] {
    constructor(errorCode){
        super(errorCode, BrowserAuthErrorMessages[errorCode]);
        Object.setPrototypeOf(this, BrowserAuthError.prototype);
        this.name = "BrowserAuthError";
    }
}
function createBrowserAuthError(errorCode) {
    return new BrowserAuthError(errorCode);
}
;
 //# sourceMappingURL=BrowserAuthError.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "FetchClient": ()=>FetchClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */ class FetchClient {
    /**
     * Fetch Client for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */ async sendGetRequestAsync(url, options) {
        let response;
        try {
            response = await fetch(url, {
                method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTTP_REQUEST_TYPE"].GET,
                headers: this.getFetchHeaders(options)
            });
        } catch (e) {
            if (window.navigator.onLine) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRequestFailed"]);
            } else {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"]);
            }
        }
        try {
            return {
                headers: this.getHeaderDict(response.headers),
                body: await response.json(),
                status: response.status
            };
        } catch (e) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["failedToParseResponse"]);
        }
    }
    /**
     * Fetch Client for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */ async sendPostRequestAsync(url, options) {
        const reqBody = options && options.body || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        let response;
        try {
            response = await fetch(url, {
                method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTTP_REQUEST_TYPE"].POST,
                headers: this.getFetchHeaders(options),
                body: reqBody
            });
        } catch (e) {
            if (window.navigator.onLine) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["postRequestFailed"]);
            } else {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"]);
            }
        }
        try {
            return {
                headers: this.getHeaderDict(response.headers),
                body: await response.json(),
                status: response.status
            };
        } catch (e) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["failedToParseResponse"]);
        }
    }
    /**
     * Get Fetch API Headers object from string map
     * @param inputHeaders
     */ getFetchHeaders(options) {
        const headers = new Headers();
        if (!(options && options.headers)) {
            return headers;
        }
        const optionsHeaders = options.headers;
        Object.keys(optionsHeaders).forEach((key)=>{
            headers.append(key, optionsHeaders[key]);
        });
        return headers;
    }
    getHeaderDict(headers) {
        const headerDict = {};
        headers.forEach((value, key)=>{
            headerDict[key] = value;
        });
        return headerDict;
    }
}
;
 //# sourceMappingURL=FetchClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/config/Configuration.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "DEFAULT_IFRAME_TIMEOUT_MS": ()=>DEFAULT_IFRAME_TIMEOUT_MS,
    "DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS": ()=>DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,
    "DEFAULT_POPUP_TIMEOUT_MS": ()=>DEFAULT_POPUP_TIMEOUT_MS,
    "DEFAULT_REDIRECT_TIMEOUT_MS": ()=>DEFAULT_REDIRECT_TIMEOUT_MS,
    "buildConfiguration": ()=>buildConfiguration
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$StubPerformanceClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/logger/Logger.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientConfigurationErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityOptions$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$config$2f$ClientConfiguration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$INetworkModule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/network/INetworkModule.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$navigation$2f$NavigationClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$network$2f$FetchClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Default timeout for popup windows and iframes in milliseconds
const DEFAULT_POPUP_TIMEOUT_MS = 60000;
const DEFAULT_IFRAME_TIMEOUT_MS = 10000;
const DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
const DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;
/**
 * MSAL function that sets the default options when not explicitly configured from app developer
 *
 * @param auth
 * @param cache
 * @param system
 *
 * @returns Configuration object
 */ function buildConfiguration({ auth: userInputAuth, cache: userInputCache, system: userInputSystem, telemetry: userInputTelemetry }, isBrowserEnvironment) {
    // Default auth options for browser
    const DEFAULT_AUTH_OPTIONS = {
        clientId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
        authority: `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].DEFAULT_AUTHORITY}`,
        knownAuthorities: [],
        cloudDiscoveryMetadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
        authorityMetadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
        redirectUri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
        postLogoutRedirectUri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
        navigateToLoginRequestUrl: true,
        clientCapabilities: [],
        protocolMode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolMode"].AAD,
        OIDCOptions: {
            serverResponseType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerResponseType"].FRAGMENT,
            defaultScopes: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].OPENID_SCOPE,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].PROFILE_SCOPE,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].OFFLINE_ACCESS_SCOPE
            ]
        },
        azureCloudOptions: {
            azureCloudInstance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityOptions$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AzureCloudInstance"].None,
            tenant: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING
        },
        skipAuthorityMetadataCache: false,
        supportsNestedAppAuth: false
    };
    // Default cache options for browser
    const DEFAULT_CACHE_OPTIONS = {
        cacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage,
        temporaryCacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage,
        storeAuthStateInCookie: false,
        secureCookies: false,
        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage
        cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].LocalStorage ? true : false,
        claimsBasedCachingEnabled: false
    };
    // Default logger options for browser
    const DEFAULT_LOGGER_OPTIONS = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loggerCallback: ()=>{
        // allow users to not set logger call back
        },
        logLevel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"].Info,
        piiLoggingEnabled: false
    };
    // Default system options for browser
    const DEFAULT_BROWSER_SYSTEM_OPTIONS = {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$config$2f$ClientConfiguration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SYSTEM_OPTIONS"],
        loggerOptions: DEFAULT_LOGGER_OPTIONS,
        networkClient: isBrowserEnvironment ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$network$2f$FetchClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["FetchClient"]() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$INetworkModule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StubbedNetworkModule"],
        navigationClient: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$navigation$2f$NavigationClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NavigationClient"](),
        loadFrameTimeout: 0,
        // If loadFrameTimeout is provided, use that as default.
        windowHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,
        iframeHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,
        navigateFrameWait: 0,
        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,
        asyncPopups: false,
        allowRedirectInIframe: false,
        allowNativeBroker: false,
        nativeBrokerHandshakeTimeout: userInputSystem?.nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,
        pollIntervalMilliseconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].DEFAULT_POLL_INTERVAL_MS
    };
    const providedSystemOptions = {
        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,
        ...userInputSystem,
        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS
    };
    const DEFAULT_TELEMETRY_OPTIONS = {
        application: {
            appName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            appVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING
        },
        client: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$StubPerformanceClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StubPerformanceClient"]()
    };
    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode
    if (userInputAuth?.protocolMode !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolMode"].OIDC && userInputAuth?.OIDCOptions) {
        const logger = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Logger"](providedSystemOptions.loggerOptions);
        logger.warning(JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientConfigurationError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__["ClientConfigurationErrorCodes"].cannotSetOIDCOptions)));
    }
    // Throw an error if user has set allowNativeBroker to true without being in AAD protocol mode
    if (userInputAuth?.protocolMode && userInputAuth.protocolMode !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolMode"].AAD && providedSystemOptions?.allowNativeBroker) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientConfigurationError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__["ClientConfigurationErrorCodes"].cannotAllowNativeBroker);
    }
    const overlayedConfig = {
        auth: {
            ...DEFAULT_AUTH_OPTIONS,
            ...userInputAuth,
            OIDCOptions: {
                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,
                ...userInputAuth?.OIDCOptions
            }
        },
        cache: {
            ...DEFAULT_CACHE_OPTIONS,
            ...userInputCache
        },
        system: providedSystemOptions,
        telemetry: {
            ...DEFAULT_TELEMETRY_OPTIONS,
            ...userInputTelemetry
        }
    };
    return overlayedConfig;
}
;
 //# sourceMappingURL=Configuration.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/packageMetadata.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "name": ()=>name,
    "version": ()=>version
});
'use strict';
/* eslint-disable header/header */ const name = "@azure/msal-browser";
const version = "3.17.0";
;
 //# sourceMappingURL=packageMetadata.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BaseOperatingContext": ()=>BaseOperatingContext
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/logger/Logger.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$config$2f$Configuration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/config/Configuration.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/packageMetadata.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Base class for operating context
 * Operating contexts are contexts in which MSAL.js is being run
 * More than one operating context may be available at a time
 * It's important from a logging and telemetry point of view for us to be able to identify the operating context.
 * For example: Some operating contexts will pre-cache tokens impacting performance telemetry
 */ class BaseOperatingContext {
    static loggerCallback(level, message) {
        switch(level){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"].Error:
                // eslint-disable-next-line no-console
                console.error(message);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"].Info:
                // eslint-disable-next-line no-console
                console.info(message);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"].Verbose:
                // eslint-disable-next-line no-console
                console.debug(message);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"].Warning:
                // eslint-disable-next-line no-console
                console.warn(message);
                return;
            default:
                // eslint-disable-next-line no-console
                console.log(message);
                return;
        }
    }
    constructor(config){
        /*
         * If loaded in an environment where window is not available,
         * set internal flag to false so that further requests fail.
         * This is to support server-side rendering environments.
         */ this.browserEnvironment = typeof window !== "undefined";
        this.config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$config$2f$Configuration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildConfiguration"])(config, this.browserEnvironment);
        let sessionStorage;
        try {
            sessionStorage = window[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage];
        // Mute errors if it's a non-browser environment or cookies are blocked.
        } catch (e) {}
        const logLevelKey = sessionStorage?.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LOG_LEVEL_CACHE_KEY"]);
        const piiLoggingKey = sessionStorage?.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LOG_PII_CACHE_KEY"])?.toLowerCase();
        const piiLoggingEnabled = piiLoggingKey === "true" ? true : piiLoggingKey === "false" ? false : undefined;
        const loggerOptions = {
            ...this.config.system.loggerOptions
        };
        const logLevel = logLevelKey && Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"]).includes(logLevelKey) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LogLevel"][logLevelKey] : undefined;
        if (logLevel) {
            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;
            loggerOptions.logLevel = logLevel;
        }
        if (piiLoggingEnabled !== undefined) {
            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;
        }
        this.logger = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$logger$2f$Logger$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Logger"](loggerOptions, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["name"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"]);
        this.available = false;
    }
    /**
     * Return the MSAL config
     * @returns BrowserConfiguration
     */ getConfig() {
        return this.config;
    }
    /**
     * Returns the MSAL Logger
     * @returns Logger
     */ getLogger() {
        return this.logger;
    }
    isAvailable() {
        return this.available;
    }
    isBrowserEnvironment() {
        return this.browserEnvironment;
    }
}
;
 //# sourceMappingURL=BaseOperatingContext.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BridgeStatusCode": ()=>BridgeStatusCode
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BridgeStatusCode = {
    UserInteractionRequired: "USER_INTERACTION_REQUIRED",
    UserCancel: "USER_CANCEL",
    NoNetwork: "NO_NETWORK",
    TransientError: "TRANSIENT_ERROR",
    PersistentError: "PERSISTENT_ERROR",
    Disabled: "DISABLED",
    AccountUnavailable: "ACCOUNT_UNAVAILABLE",
    NestedAppAuthUnavailable: "NESTED_APP_AUTH_UNAVAILABLE"
};
;
 //# sourceMappingURL=BridgeStatusCode.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "base64Encode": ()=>base64Encode,
    "urlEncode": ()=>urlEncode,
    "urlEncodeArr": ()=>urlEncodeArr
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */ /**
 * Returns URL Safe b64 encoded string from a plaintext string.
 * @param input
 */ function urlEncode(input) {
    return encodeURIComponent(base64Encode(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"));
}
/**
 * Returns URL Safe b64 encoded string from an int8Array.
 * @param inputArr
 */ function urlEncodeArr(inputArr) {
    return base64EncArr(inputArr).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
/**
 * Returns b64 encoded string from plaintext string.
 * @param input
 */ function base64Encode(input) {
    return base64EncArr(new TextEncoder().encode(input));
}
/**
 * Base64 encode byte array
 * @param aBytes
 */ function base64EncArr(aBytes) {
    const binString = Array.from(aBytes, (x)=>String.fromCodePoint(x)).join("");
    return btoa(binString);
}
;
 //# sourceMappingURL=Base64Encode.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "createNewGuid": ()=>createNewGuid,
    "exportJwk": ()=>exportJwk,
    "generateKeyPair": ()=>generateKeyPair,
    "getRandomValues": ()=>getRandomValues,
    "hashString": ()=>hashString,
    "importJwk": ()=>importJwk,
    "sha256Digest": ()=>sha256Digest,
    "sign": ()=>sign,
    "validateCryptoAvailable": ()=>validateCryptoAvailable
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This file defines functions used by the browser library to perform cryptography operations such as
 * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
 */ /**
 * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
 */ // RSA KeyGen Algorithm
const PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
// SHA-256 hashing algorithm
const S256_HASH_ALG = "SHA-256";
// MOD length for PoP tokens
const MODULUS_LENGTH = 2048;
// Public Exponent
const PUBLIC_EXPONENT = new Uint8Array([
    0x01,
    0x00,
    0x01
]);
// UUID hex digits
const UUID_CHARS = "0123456789abcdef";
// Array to store UINT32 random value
const UINT32_ARR = new Uint32Array(1);
const keygenAlgorithmOptions = {
    name: PKCS1_V15_KEYGEN_ALG,
    hash: S256_HASH_ALG,
    modulusLength: MODULUS_LENGTH,
    publicExponent: PUBLIC_EXPONENT
};
/**
 * Check whether browser crypto is available.
 */ function validateCryptoAvailable(logger) {
    if ("crypto" in window) {
        logger.verbose("BrowserCrypto: modern crypto interface available");
    } else {
        logger.error("BrowserCrypto: crypto interface is unavailable");
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoNonExistent"]);
    }
}
/**
 * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
 * @param dataString {string} data string
 * @param performanceClient {?IPerformanceClient}
 * @param correlationId {?string} correlation id
 */ async function sha256Digest(dataString, performanceClient, correlationId) {
    performanceClient?.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].Sha256Digest, correlationId);
    const encoder = new TextEncoder();
    const data = encoder.encode(dataString);
    return window.crypto.subtle.digest(S256_HASH_ALG, data);
}
/**
 * Populates buffer with cryptographically random values.
 * @param dataBuffer
 */ function getRandomValues(dataBuffer) {
    return window.crypto.getRandomValues(dataBuffer);
}
/**
 * Returns random Uint32 value.
 * @returns {number}
 */ function getRandomUint32() {
    window.crypto.getRandomValues(UINT32_ARR);
    return UINT32_ARR[0];
}
/**
 * Creates a UUID v7 from the current timestamp.
 * Implementation relies on the system clock to guarantee increasing order of generated identifiers.
 * @returns {number}
 */ function createNewGuid() {
    const currentTimestamp = Date.now();
    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);
    // Result byte array
    const bytes = new Uint8Array(16);
    // A 12-bit `rand_a` field value
    const randA = Math.trunc(baseRand / 2 ** 30);
    // The higher 30 bits of 62-bit `rand_b` field value
    const randBHi = baseRand & 2 ** 30 - 1;
    // The lower 32 bits of 62-bit `rand_b` field value
    const randBLo = getRandomUint32();
    bytes[0] = currentTimestamp / 2 ** 40;
    bytes[1] = currentTimestamp / 2 ** 32;
    bytes[2] = currentTimestamp / 2 ** 24;
    bytes[3] = currentTimestamp / 2 ** 16;
    bytes[4] = currentTimestamp / 2 ** 8;
    bytes[5] = currentTimestamp;
    bytes[6] = 0x70 | randA >>> 8;
    bytes[7] = randA;
    bytes[8] = 0x80 | randBHi >>> 24;
    bytes[9] = randBHi >>> 16;
    bytes[10] = randBHi >>> 8;
    bytes[11] = randBHi;
    bytes[12] = randBLo >>> 24;
    bytes[13] = randBLo >>> 16;
    bytes[14] = randBLo >>> 8;
    bytes[15] = randBLo;
    let text = "";
    for(let i = 0; i < bytes.length; i++){
        text += UUID_CHARS.charAt(bytes[i] >>> 4);
        text += UUID_CHARS.charAt(bytes[i] & 0xf);
        if (i === 3 || i === 5 || i === 7 || i === 9) {
            text += "-";
        }
    }
    return text;
}
/**
 * Generates a keypair based on current keygen algorithm config.
 * @param extractable
 * @param usages
 */ async function generateKeyPair(extractable, usages) {
    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);
}
/**
 * Export key as Json Web Key (JWK)
 * @param key
 */ async function exportJwk(key) {
    return window.crypto.subtle.exportKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KEY_FORMAT_JWK"], key);
}
/**
 * Imports key as Json Web Key (JWK), can set extractable and usages.
 * @param key
 * @param extractable
 * @param usages
 */ async function importJwk(key, extractable, usages) {
    return window.crypto.subtle.importKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KEY_FORMAT_JWK"], key, keygenAlgorithmOptions, extractable, usages);
}
/**
 * Signs given data with given key
 * @param key
 * @param data
 */ async function sign(key, data) {
    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);
}
/**
 * Returns the SHA-256 hash of an input string
 * @param plainText
 */ async function hashString(plainText) {
    const hashBuffer = await sha256Digest(plainText);
    const hashBytes = new Uint8Array(hashBuffer);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncodeArr"])(hashBytes);
}
;
 //# sourceMappingURL=BrowserCrypto.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/naa/BridgeProxy.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BridgeProxy": ()=>BridgeProxy,
    "default": ()=>BridgeProxy
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * BridgeProxy
 * Provides a proxy for accessing a bridge to a host app and/or
 * platform broker
 */ class BridgeProxy {
    /**
     * initializeNestedAppAuthBridge - Initializes the bridge to the host app
     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error
     * @remarks This method will be called by the create factory method
     * @remarks If the bridge is not available, this method will throw an error
     */ static async initializeNestedAppAuthBridge() {
        if (window === undefined) {
            throw new Error("window is undefined");
        }
        if (window.nestedAppAuthBridge === undefined) {
            throw new Error("window.nestedAppAuthBridge is undefined");
        }
        try {
            window.nestedAppAuthBridge.addEventListener("message", (response)=>{
                const responsePayload = typeof response === "string" ? response : response.data;
                const responseEnvelope = JSON.parse(responsePayload);
                const request = BridgeProxy.bridgeRequests.find((element)=>element.requestId === responseEnvelope.requestId);
                if (request !== undefined) {
                    BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);
                    if (responseEnvelope.success) {
                        request.resolve(responseEnvelope);
                    } else {
                        request.reject(responseEnvelope.error);
                    }
                }
            });
            const bridgeResponse = await new Promise((resolve, reject)=>{
                const message = {
                    messageType: "NestedAppAuthRequest",
                    method: "GetInitContext",
                    requestId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
                    sendTime: Date.now()
                };
                const request = {
                    requestId: message.requestId,
                    method: message.method,
                    resolve: resolve,
                    reject: reject
                };
                BridgeProxy.bridgeRequests.push(request);
                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));
            });
            return BridgeProxy.validateBridgeResultOrThrow(bridgeResponse.initContext);
        } catch (error) {
            window.console.log(error);
            throw error;
        }
    }
    /**
     * getTokenInteractive - Attempts to get a token interactively from the bridge
     * @param request A token request
     * @returns a promise that resolves to an auth result or rejects with a BridgeError
     */ getTokenInteractive(request) {
        return this.getToken("GetTokenPopup", request);
    }
    /**
     * getTokenSilent Attempts to get a token silently from the bridge
     * @param request A token request
     * @returns a promise that resolves to an auth result or rejects with a BridgeError
     */ getTokenSilent(request) {
        return this.getToken("GetToken", request);
    }
    async getToken(requestType, request) {
        const result = await this.sendRequest(requestType, {
            tokenParams: request
        });
        return {
            token: BridgeProxy.validateBridgeResultOrThrow(result.token),
            account: BridgeProxy.validateBridgeResultOrThrow(result.account)
        };
    }
    getHostCapabilities() {
        return this.capabilities ?? null;
    }
    getAccountContext() {
        return this.accountContext ? this.accountContext : null;
    }
    /**
     * A method used to send a request to the bridge
     * @param request A token request
     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError
     */ sendRequest(method, requestParams) {
        const message = {
            messageType: "NestedAppAuthRequest",
            method: method,
            requestId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
            sendTime: Date.now(),
            ...requestParams
        };
        const promise = new Promise((resolve, reject)=>{
            const request = {
                requestId: message.requestId,
                method: message.method,
                resolve: resolve,
                reject: reject
            };
            BridgeProxy.bridgeRequests.push(request);
            window.nestedAppAuthBridge.postMessage(JSON.stringify(message));
        });
        return promise;
    }
    static validateBridgeResultOrThrow(input) {
        if (input === undefined) {
            const bridgeError = {
                status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].NestedAppAuthUnavailable
            };
            throw bridgeError;
        }
        return input;
    }
    /**
     * Private constructor for BridgeProxy
     * @param sdkName The name of the SDK being used to make requests on behalf of the app
     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app
     * @param capabilities The capabilities of the bridge / SDK / platform broker
     */ constructor(sdkName, sdkVersion, accountContext, capabilities){
        this.sdkName = sdkName;
        this.sdkVersion = sdkVersion;
        this.accountContext = accountContext;
        this.capabilities = capabilities;
    }
    /**
     * Factory method for creating an implementation of IBridgeProxy
     * @returns A promise that resolves to a BridgeProxy implementation
     */ static async create() {
        const response = await BridgeProxy.initializeNestedAppAuthBridge();
        return new BridgeProxy(response.sdkName, response.sdkVersion, response.accountContext, response.capabilities);
    }
}
BridgeProxy.bridgeRequests = [];
;
 //# sourceMappingURL=BridgeProxy.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NestedAppOperatingContext": ()=>NestedAppOperatingContext
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$BaseOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeProxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/naa/BridgeProxy.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppOperatingContext extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$BaseOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseOperatingContext"] {
    constructor(){
        super(...arguments);
        this.bridgeProxy = undefined;
        this.accountContext = null;
    }
    /**
     * Return the module name.  Intended for use with import() to enable dynamic import
     * of the implementation associated with this operating context
     * @returns
     */ getModuleName() {
        return NestedAppOperatingContext.MODULE_NAME;
    }
    /**
     * Returns the unique identifier for this operating context
     * @returns string
     */ getId() {
        return NestedAppOperatingContext.ID;
    }
    /**
     * Returns the current BridgeProxy
     * @returns IBridgeProxy | undefined
     */ getBridgeProxy() {
        return this.bridgeProxy;
    }
    /**
     * Checks whether the operating context is available.
     * Confirms that the code is running a browser rather.  This is required.
     * @returns Promise<boolean> indicating whether this operating context is currently available.
     */ async initialize() {
        /*
         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface
         *
         */ try {
            if (typeof window !== "undefined") {
                const bridgeProxy = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeProxy$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeProxy"].create();
                /*
                 * Because we want single sign on we expect the host app to provide the account context
                 * with a min set of params that can be used to identify the account
                 * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());
                 */ this.accountContext = bridgeProxy.getAccountContext();
                this.bridgeProxy = bridgeProxy;
                this.available = bridgeProxy !== undefined;
            }
        } catch (ex) {
            this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);
        }
        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);
        return this.available;
    }
}
/*
 * TODO: Once we have determine the bundling code return here to specify the name of the bundle
 * containing the implementation for this operating context
 */ NestedAppOperatingContext.MODULE_NAME = "";
/**
 * Unique identifier for the operating context
 */ NestedAppOperatingContext.ID = "NestedAppOperatingContext";
;
 //# sourceMappingURL=NestedAppOperatingContext.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "StandardOperatingContext": ()=>StandardOperatingContext
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$BaseOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class StandardOperatingContext extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$BaseOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseOperatingContext"] {
    /**
     * Return the module name.  Intended for use with import() to enable dynamic import
     * of the implementation associated with this operating context
     * @returns
     */ getModuleName() {
        return StandardOperatingContext.MODULE_NAME;
    }
    /**
     * Returns the unique identifier for this operating context
     * @returns string
     */ getId() {
        return StandardOperatingContext.ID;
    }
    /**
     * Checks whether the operating context is available.
     * Confirms that the code is running a browser rather.  This is required.
     * @returns Promise<boolean> indicating whether this operating context is currently available.
     */ async initialize() {
        this.available = typeof window !== "undefined";
        return this.available;
    /*
         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser
         * We can move the current contents of the initialize method to here and verify that the WAM extension is available
         */ }
}
/*
 * TODO: Once we have determine the bundling code return here to specify the name of the bundle
 * containing the implementation for this operating context
 */ StandardOperatingContext.MODULE_NAME = "";
/**
 * Unique identifier for the operating context
 */ StandardOperatingContext.ID = "StandardOperatingContext";
;
 //# sourceMappingURL=StandardOperatingContext.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "base64Decode": ()=>base64Decode
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem
 */ /**
 * Returns a URL-safe plaintext decoded string from b64 encoded input.
 * @param input
 */ function base64Decode(input) {
    return new TextDecoder().decode(base64DecToArr(input));
}
/**
 * Decodes base64 into Uint8Array
 * @param base64String
 */ function base64DecToArr(base64String) {
    let encodedString = base64String.replace(/-/g, "+").replace(/_/g, "/");
    switch(encodedString.length % 4){
        case 0:
            break;
        case 2:
            encodedString += "==";
            break;
        case 3:
            encodedString += "=";
            break;
        default:
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidBase64String"]);
    }
    const binString = atob(encodedString);
    return Uint8Array.from(binString, (m)=>m.codePointAt(0) || 0);
}
;
 //# sourceMappingURL=Base64Decode.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "DatabaseStorage": ()=>DatabaseStorage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
 */ class DatabaseStorage {
    constructor(){
        this.dbName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DB_NAME"];
        this.version = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DB_VERSION"];
        this.tableName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DB_TABLE_NAME"];
        this.dbOpen = false;
    }
    /**
     * Opens IndexedDB instance.
     */ async open() {
        return new Promise((resolve, reject)=>{
            const openDB = window.indexedDB.open(this.dbName, this.version);
            openDB.addEventListener("upgradeneeded", (e)=>{
                const event = e;
                event.target.result.createObjectStore(this.tableName);
            });
            openDB.addEventListener("success", (e)=>{
                const event = e;
                this.db = event.target.result;
                this.dbOpen = true;
                resolve();
            });
            openDB.addEventListener("error", ()=>reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseUnavailable"])));
        });
    }
    /**
     * Closes the connection to IndexedDB database when all pending transactions
     * complete.
     */ closeConnection() {
        const db = this.db;
        if (db && this.dbOpen) {
            db.close();
            this.dbOpen = false;
        }
    }
    /**
     * Opens database if it's not already open
     */ async validateDbIsOpen() {
        if (!this.dbOpen) {
            return this.open();
        }
    }
    /**
     * Retrieves item from IndexedDB instance.
     * @param key
     */ async getItem(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            // TODO: Add timeouts?
            if (!this.db) {
                return reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]));
            }
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbGet = objectStore.get(key);
            dbGet.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result);
            });
            dbGet.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Adds item to IndexedDB under given key
     * @param key
     * @param payload
     */ async setItem(key, payload) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            // TODO: Add timeouts?
            if (!this.db) {
                return reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]));
            }
            const transaction = this.db.transaction([
                this.tableName
            ], "readwrite");
            const objectStore = transaction.objectStore(this.tableName);
            const dbPut = objectStore.put(payload, key);
            dbPut.addEventListener("success", ()=>{
                this.closeConnection();
                resolve();
            });
            dbPut.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Removes item from IndexedDB under given key
     * @param key
     */ async removeItem(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                return reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]));
            }
            const transaction = this.db.transaction([
                this.tableName
            ], "readwrite");
            const objectStore = transaction.objectStore(this.tableName);
            const dbDelete = objectStore.delete(key);
            dbDelete.addEventListener("success", ()=>{
                this.closeConnection();
                resolve();
            });
            dbDelete.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Get all the keys from the storage object as an iterable array of strings.
     */ async getKeys() {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                return reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]));
            }
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbGetKeys = objectStore.getAllKeys();
            dbGetKeys.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result);
            });
            dbGetKeys.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     *
     * Checks whether there is an object under the search key in the object store
     */ async containsKey(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                return reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseNotOpen"]));
            }
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbContainsKey = objectStore.count(key);
            dbContainsKey.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result === 1);
            });
            dbContainsKey.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible
     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues
     * with IndexedDB database versions.
     */ async deleteDatabase() {
        // Check if database being deleted exists
        if (this.db && this.dbOpen) {
            this.closeConnection();
        }
        return new Promise((resolve, reject)=>{
            const deleteDbRequest = window.indexedDB.deleteDatabase(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DB_NAME"]);
            const id = setTimeout(()=>reject(false), 200); // Reject if events aren't raised within 200ms
            deleteDbRequest.addEventListener("success", ()=>{
                clearTimeout(id);
                return resolve(true);
            });
            deleteDbRequest.addEventListener("blocked", ()=>{
                clearTimeout(id);
                return resolve(true);
            });
            deleteDbRequest.addEventListener("error", ()=>{
                clearTimeout(id);
                return reject(false);
            });
        });
    }
}
;
 //# sourceMappingURL=DatabaseStorage.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "MemoryStorage": ()=>MemoryStorage
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class MemoryStorage {
    constructor(){
        this.cache = new Map();
    }
    getItem(key) {
        return this.cache.get(key) || null;
    }
    setItem(key, value) {
        this.cache.set(key, value);
    }
    removeItem(key) {
        this.cache.delete(key);
    }
    getKeys() {
        const cacheKeys = [];
        this.cache.forEach((value, key)=>{
            cacheKeys.push(key);
        });
        return cacheKeys;
    }
    containsKey(key) {
        return this.cache.has(key);
    }
    clear() {
        this.cache.clear();
    }
}
;
 //# sourceMappingURL=MemoryStorage.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "AsyncMemoryStorage": ()=>AsyncMemoryStorage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$DatabaseStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$MemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,
 * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.
 */ class AsyncMemoryStorage {
    constructor(logger){
        this.inMemoryCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$MemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MemoryStorage"]();
        this.indexedDBCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$DatabaseStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DatabaseStorage"]();
        this.logger = logger;
    }
    handleDatabaseAccessError(error) {
        if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BrowserAuthError"] && error.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["databaseUnavailable"]) {
            this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.");
        } else {
            throw error;
        }
    }
    /**
     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous
     * storage object if item isn't found in-memory.
     * @param key
     */ async getItem(key) {
        const item = this.inMemoryCache.getItem(key);
        if (!item) {
            try {
                this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage.");
                return await this.indexedDBCache.getItem(key);
            } catch (e) {
                this.handleDatabaseAccessError(e);
            }
        }
        return item;
    }
    /**
     * Sets the item in the in-memory cache and then tries to set it in the asynchronous
     * storage object with the given key.
     * @param key
     * @param value
     */ async setItem(key, value) {
        this.inMemoryCache.setItem(key, value);
        try {
            await this.indexedDBCache.setItem(key, value);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
    }
    /**
     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.
     * @param key
     */ async removeItem(key) {
        this.inMemoryCache.removeItem(key);
        try {
            await this.indexedDBCache.removeItem(key);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
    }
    /**
     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the
     * asynchronous storage object.
     */ async getKeys() {
        const cacheKeys = this.inMemoryCache.getKeys();
        if (cacheKeys.length === 0) {
            try {
                this.logger.verbose("In-memory cache is empty, now querying persistent storage.");
                return await this.indexedDBCache.getKeys();
            } catch (e) {
                this.handleDatabaseAccessError(e);
            }
        }
        return cacheKeys;
    }
    /**
     * Returns true or false if the given key is present in the cache.
     * @param key
     */ async containsKey(key) {
        const containsKey = this.inMemoryCache.containsKey(key);
        if (!containsKey) {
            try {
                this.logger.verbose("Key not found in in-memory cache, now querying persistent storage.");
                return await this.indexedDBCache.containsKey(key);
            } catch (e) {
                this.handleDatabaseAccessError(e);
            }
        }
        return containsKey;
    }
    /**
     * Clears in-memory Map
     */ clearInMemory() {
        // InMemory cache is a Map instance, clear is straightforward
        this.logger.verbose(`Deleting in-memory keystore`);
        this.inMemoryCache.clear();
        this.logger.verbose(`In-memory keystore deleted`);
    }
    /**
     * Tries to delete the IndexedDB database
     * @returns
     */ async clearPersistent() {
        try {
            this.logger.verbose("Deleting persistent keystore");
            const dbDeleted = await this.indexedDBCache.deleteDatabase();
            if (dbDeleted) {
                this.logger.verbose("Persistent keystore deleted");
            }
            return dbDeleted;
        } catch (e) {
            this.handleDatabaseAccessError(e);
            return false;
        }
    }
}
;
 //# sourceMappingURL=AsyncMemoryStorage.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "CryptoOps": ()=>CryptoOps
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$JoseHeader$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AsyncMemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
 * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
 */ class CryptoOps {
    constructor(logger, performanceClient){
        this.logger = logger;
        // Browser crypto needs to be validated first before any other classes can be set.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["validateCryptoAvailable"])(logger);
        this.cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AsyncMemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AsyncMemoryStorage"](this.logger);
        this.performanceClient = performanceClient;
    }
    /**
     * Creates a new random GUID - used to populate state and nonce.
     * @returns string (GUID)
     */ createNewGuid() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])();
    }
    /**
     * Encodes input string to base64.
     * @param input
     */ base64Encode(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Encode"])(input);
    }
    /**
     * Decodes input string from base64.
     * @param input
     */ base64Decode(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"])(input);
    }
    /**
     * Encodes input string to base64 URL safe string.
     * @param input
     */ base64UrlEncode(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncode"])(input);
    }
    /**
     * Stringifies and base64Url encodes input public key
     * @param inputKid
     * @returns Base64Url encoded public key
     */ encodeKid(inputKid) {
        return this.base64UrlEncode(JSON.stringify({
            kid: inputKid
        }));
    }
    /**
     * Generates a keypair, stores it and returns a thumbprint
     * @param request
     */ async getPublicKeyThumbprint(request) {
        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].CryptoOptsGetPublicKeyThumbprint, request.correlationId);
        // Generate Keypair
        const keyPair = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generateKeyPair"])(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);
        // Generate Thumbprint for Public Key
        const publicKeyJwk = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["exportJwk"])(keyPair.publicKey);
        const pubKeyThumprintObj = {
            e: publicKeyJwk.e,
            kty: publicKeyJwk.kty,
            n: publicKeyJwk.n
        };
        const publicJwkString = getSortedObjectString(pubKeyThumprintObj);
        const publicJwkHash = await this.hashString(publicJwkString);
        // Generate Thumbprint for Private Key
        const privateKeyJwk = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["exportJwk"])(keyPair.privateKey);
        // Re-import private key to make it unextractable
        const unextractablePrivateKey = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["importJwk"])(privateKeyJwk, false, [
            "sign"
        ]);
        // Store Keypair data in keystore
        await this.cache.setItem(publicJwkHash, {
            privateKey: unextractablePrivateKey,
            publicKey: keyPair.publicKey,
            requestMethod: request.resourceRequestMethod,
            requestUri: request.resourceRequestUri
        });
        if (publicKeyThumbMeasurement) {
            publicKeyThumbMeasurement.end({
                success: true
            });
        }
        return publicJwkHash;
    }
    /**
     * Removes cryptographic keypair from key store matching the keyId passed in
     * @param kid
     */ async removeTokenBindingKey(kid) {
        await this.cache.removeItem(kid);
        const keyFound = await this.cache.containsKey(kid);
        return !keyFound;
    }
    /**
     * Removes all cryptographic keys from IndexedDB storage
     */ async clearKeystore() {
        // Delete in-memory keystores
        this.cache.clearInMemory();
        /**
         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of
         * every persistent keystore
         */ try {
            await this.cache.clearPersistent();
            return true;
        } catch (e) {
            if (e instanceof Error) {
                this.logger.error(`Clearing keystore failed with error: ${e.message}`);
            } else {
                this.logger.error("Clearing keystore failed with unknown error");
            }
            return false;
        }
    }
    /**
     * Signs the given object as a jwt payload with private key retrieved by given kid.
     * @param payload
     * @param kid
     */ async signJwt(payload, kid, shrOptions, correlationId) {
        const signJwtMeasurement = this.performanceClient?.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].CryptoOptsSignJwt, correlationId);
        const cachedKeyPair = await this.cache.getItem(kid);
        if (!cachedKeyPair) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoKeyNotFound"]);
        }
        // Get public key as JWK
        const publicKeyJwk = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["exportJwk"])(cachedKeyPair.publicKey);
        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);
        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: "FULL_PUBLIC_KEY_HASH" })
        const encodedKeyIdThumbprint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncode"])(JSON.stringify({
            kid: kid
        }));
        // Generate header
        const shrHeader = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$JoseHeader$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["JoseHeader"].getShrHeaderString({
            ...shrOptions?.header,
            alg: publicKeyJwk.alg,
            kid: encodedKeyIdThumbprint
        });
        const encodedShrHeader = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncode"])(shrHeader);
        // Generate payload
        payload.cnf = {
            jwk: JSON.parse(publicKeyJwkString)
        };
        const encodedPayload = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncode"])(JSON.stringify(payload));
        // Form token string
        const tokenString = `${encodedShrHeader}.${encodedPayload}`;
        // Sign token
        const encoder = new TextEncoder();
        const tokenBuffer = encoder.encode(tokenString);
        const signatureBuffer = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sign"])(cachedKeyPair.privateKey, tokenBuffer);
        const encodedSignature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncodeArr"])(new Uint8Array(signatureBuffer));
        const signedJwt = `${tokenString}.${encodedSignature}`;
        if (signJwtMeasurement) {
            signJwtMeasurement.end({
                success: true
            });
        }
        return signedJwt;
    }
    /**
     * Returns the SHA-256 hash of an input string
     * @param plainText
     */ async hashString(plainText) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashString"])(plainText);
    }
}
CryptoOps.POP_KEY_USAGES = [
    "sign",
    "verify"
];
CryptoOps.EXTRACTABLE = true;
function getSortedObjectString(obj) {
    return JSON.stringify(obj, Object.keys(obj).sort());
}
;
 //# sourceMappingURL=CryptoOps.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/BrowserStorage.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BrowserStorage": ()=>BrowserStorage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class BrowserStorage {
    constructor(cacheLocation){
        this.validateWindowStorage(cacheLocation);
        this.windowStorage = window[cacheLocation];
    }
    validateWindowStorage(cacheLocation) {
        if (cacheLocation !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].LocalStorage && cacheLocation !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage || !window[cacheLocation]) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["storageNotSupported"]);
        }
    }
    getItem(key) {
        return this.windowStorage.getItem(key);
    }
    setItem(key, value) {
        this.windowStorage.setItem(key, value);
    }
    removeItem(key) {
        this.windowStorage.removeItem(key);
    }
    getKeys() {
        return Object.keys(this.windowStorage);
    }
    containsKey(key) {
        return this.windowStorage.hasOwnProperty(key);
    }
}
;
 //# sourceMappingURL=BrowserStorage.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "extractBrowserRequestState": ()=>extractBrowserRequestState
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Extracts the BrowserStateObject from the state string.
 * @param browserCrypto
 * @param state
 */ function extractBrowserRequestState(browserCrypto, state) {
    if (!state) {
        return null;
    }
    try {
        const requestStateObj = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(browserCrypto, state);
        return requestStateObj.libraryState.meta;
    } catch (e) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].invalidState);
    }
}
;
 //# sourceMappingURL=BrowserProtocolUtils.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BrowserCacheManager": ()=>BrowserCacheManager,
    "DEFAULT_BROWSER_CACHE_MANAGER": ()=>DEFAULT_BROWSER_CACHE_MANAGER
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$CacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/CacheManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs [app-ssr] (ecmascript) <export * as CacheHelpers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/StringUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AuthToken.mjs [app-ssr] (ecmascript) <export * as AuthToken>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$CacheError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/CacheError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/CcsCredential.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/BrowserStorage.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$MemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the cache storage interface for MSAL through browser local or session storage.
 * Cookies are only used if storeAuthStateInCookie is true, and are only used for
 * parameters such as state and nonce, generally.
 */ class BrowserCacheManager extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$CacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheManager"] {
    constructor(clientId, cacheConfig, cryptoImpl, logger, staticAuthorityOptions, performanceClient){
        super(clientId, cryptoImpl, logger, staticAuthorityOptions);
        // Cookie life calculation (hours * minutes * seconds * ms)
        this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;
        this.cacheConfig = cacheConfig;
        this.logger = logger;
        this.internalStorage = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$MemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MemoryStorage"]();
        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);
        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation, this.cacheConfig.cacheLocation);
        // Migrate cache entries from older versions of MSAL.
        if (cacheConfig.cacheMigrationEnabled) {
            this.migrateCacheEntries();
            this.createKeyMaps();
        }
        this.performanceClient = performanceClient;
    }
    /**
     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
     * @param cacheLocation
     */ setupBrowserStorage(cacheLocation) {
        switch(cacheLocation){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].LocalStorage:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage:
                try {
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserStorage"](cacheLocation);
                } catch (e) {
                    this.logger.verbose(e);
                    break;
                }
        }
        this.cacheConfig.cacheLocation = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage;
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$MemoryStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MemoryStorage"]();
    }
    /**
     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.
     * @param temporaryCacheLocation
     * @param cacheLocation
     */ setupTemporaryCacheStorage(temporaryCacheLocation, cacheLocation) {
        switch(cacheLocation){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].LocalStorage:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserStorage$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserStorage"](temporaryCacheLocation || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].SessionStorage);
                } catch (e) {
                    this.logger.verbose(e);
                    return this.internalStorage;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage:
            default:
                return this.internalStorage;
        }
    }
    /**
     * Migrate all old cache entries to new schema. No rollback supported.
     * @param storeAuthStateInCookie
     */ migrateCacheEntries() {
        const idTokenKey = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ID_TOKEN}`;
        const clientInfoKey = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].CLIENT_INFO}`;
        const errorKey = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ERROR}`;
        const errorDescKey = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ERROR_DESC}`;
        const idTokenValue = this.browserStorage.getItem(idTokenKey);
        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);
        const errorValue = this.browserStorage.getItem(errorKey);
        const errorDescValue = this.browserStorage.getItem(errorDescKey);
        const values = [
            idTokenValue,
            clientInfoValue,
            errorValue,
            errorDescValue
        ];
        const keysToMigrate = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ID_TOKEN,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].CLIENT_INFO,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ERROR,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ERROR_DESC
        ];
        keysToMigrate.forEach((cacheKey, index)=>{
            const value = values[index];
            if (value) {
                this.setTemporaryCache(cacheKey, value, true);
            }
        });
    }
    /**
     * Searches all cache entries for MSAL accounts and creates the account key map
     * This is used to migrate users from older versions of MSAL which did not create the map.
     * @returns
     */ createKeyMaps() {
        this.logger.trace("BrowserCacheManager - createKeyMaps called.");
        const accountKeys = this.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].ACCOUNT_KEYS);
        const tokenKeys = this.getItem(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].TOKEN_KEYS}.${this.clientId}`);
        if (accountKeys && tokenKeys) {
            this.logger.verbose("BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.");
            // Key maps already exist, no need to iterate through cache
            return;
        }
        const allKeys = this.browserStorage.getKeys();
        allKeys.forEach((key)=>{
            if (this.isCredentialKey(key)) {
                // Get item, parse, validate and write key to map
                const value = this.getItem(key);
                if (value) {
                    const credObj = this.validateAndParseJson(value);
                    if (credObj && credObj.hasOwnProperty("credentialType")) {
                        switch(credObj["credentialType"]){
                            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN:
                                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isIdTokenEntity(credObj)) {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);
                                    const idTokenEntity = credObj;
                                    const newKey = this.updateCredentialCacheKey(key, idTokenEntity);
                                    this.addTokenKey(newKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN);
                                    return;
                                } else {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);
                                }
                                break;
                            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN:
                            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN_WITH_AUTH_SCHEME:
                                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isAccessTokenEntity(credObj)) {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);
                                    const accessTokenEntity = credObj;
                                    const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);
                                    this.addTokenKey(newKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN);
                                    return;
                                } else {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);
                                }
                                break;
                            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN:
                                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isRefreshTokenEntity(credObj)) {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);
                                    const refreshTokenEntity = credObj;
                                    const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);
                                    this.addTokenKey(newKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN);
                                    return;
                                } else {
                                    this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.");
                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);
                                }
                                break;
                        }
                    }
                }
            }
            if (this.isAccountKey(key)) {
                const value = this.getItem(key);
                if (value) {
                    const accountObj = this.validateAndParseJson(value);
                    if (accountObj && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].isAccountEntity(accountObj)) {
                        this.logger.trace("BrowserCacheManager:createKeyMaps - account found, saving key to account key map");
                        this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);
                        this.addAccountKeyToMap(key);
                    }
                }
            }
        });
    }
    /**
     * Parses passed value as JSON object, JSON.parse() will throw an error.
     * @param input
     */ validateAndParseJson(jsonValue) {
        try {
            const parsedJson = JSON.parse(jsonValue);
            /**
             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
             *
             */ return parsedJson && typeof parsedJson === "object" ? parsedJson : null;
        } catch (error) {
            return null;
        }
    }
    /**
     * fetches the entry from the browser storage based off the key
     * @param key
     */ getItem(key) {
        return this.browserStorage.getItem(key);
    }
    /**
     * sets the entry in the browser storage
     * @param key
     * @param value
     */ setItem(key, value) {
        this.browserStorage.setItem(key, value);
    }
    /**
     * fetch the account entity from the platform cache
     * @param accountKey
     */ getAccount(accountKey, logger) {
        this.logger.trace("BrowserCacheManager.getAccount called");
        const accountEntity = this.getCachedAccountEntity(accountKey);
        return this.updateOutdatedCachedAccount(accountKey, accountEntity, logger);
    }
    /**
     * Reads account from cache, deserializes it into an account entity and returns it.
     * If account is not found from the key, returns null and removes key from map.
     * @param accountKey
     * @returns
     */ getCachedAccountEntity(accountKey) {
        const serializedAccount = this.getItem(accountKey);
        if (!serializedAccount) {
            this.removeAccountKeyFromMap(accountKey);
            return null;
        }
        const parsedAccount = this.validateAndParseJson(serializedAccount);
        if (!parsedAccount || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].isAccountEntity(parsedAccount)) {
            this.removeAccountKeyFromMap(accountKey);
            return null;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$CacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheManager"].toObject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"](), parsedAccount);
    }
    /**
     * set account entity in the platform cache
     * @param account
     */ setAccount(account) {
        this.logger.trace("BrowserCacheManager.setAccount called");
        const key = account.generateAccountKey();
        this.setItem(key, JSON.stringify(account));
        this.addAccountKeyToMap(key);
    }
    /**
     * Returns the array of account keys currently cached
     * @returns
     */ getAccountKeys() {
        this.logger.trace("BrowserCacheManager.getAccountKeys called");
        const accountKeys = this.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].ACCOUNT_KEYS);
        if (accountKeys) {
            return JSON.parse(accountKeys);
        }
        this.logger.verbose("BrowserCacheManager.getAccountKeys - No account keys found");
        return [];
    }
    /**
     * Add a new account to the key map
     * @param key
     */ addAccountKeyToMap(key) {
        this.logger.trace("BrowserCacheManager.addAccountKeyToMap called");
        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);
        const accountKeys = this.getAccountKeys();
        if (accountKeys.indexOf(key) === -1) {
            // Only add key if it does not already exist in the map
            accountKeys.push(key);
            this.setItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].ACCOUNT_KEYS, JSON.stringify(accountKeys));
            this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key added");
        } else {
            this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key already exists in map");
        }
    }
    /**
     * Remove an account from the key map
     * @param key
     */ removeAccountKeyFromMap(key) {
        this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap called");
        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);
        const accountKeys = this.getAccountKeys();
        const removalIndex = accountKeys.indexOf(key);
        if (removalIndex > -1) {
            accountKeys.splice(removalIndex, 1);
            this.setItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].ACCOUNT_KEYS, JSON.stringify(accountKeys));
            this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap account key removed");
        } else {
            this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap key not found in existing map");
        }
    }
    /**
     * Extends inherited removeAccount function to include removal of the account key from the map
     * @param key
     */ async removeAccount(key) {
        void super.removeAccount(key);
        this.removeAccountKeyFromMap(key);
    }
    /**
     * Remove account entity from the platform cache if it's outdated
     * @param accountKey
     */ removeOutdatedAccount(accountKey) {
        this.removeItem(accountKey);
        this.removeAccountKeyFromMap(accountKey);
    }
    /**
     * Removes given idToken from the cache and from the key map
     * @param key
     */ removeIdToken(key) {
        super.removeIdToken(key);
        this.removeTokenKey(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN);
    }
    /**
     * Removes given accessToken from the cache and from the key map
     * @param key
     */ async removeAccessToken(key) {
        void super.removeAccessToken(key);
        this.removeTokenKey(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN);
    }
    /**
     * Removes given refreshToken from the cache and from the key map
     * @param key
     */ removeRefreshToken(key) {
        super.removeRefreshToken(key);
        this.removeTokenKey(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN);
    }
    /**
     * Gets the keys for the cached tokens associated with this clientId
     * @returns
     */ getTokenKeys() {
        this.logger.trace("BrowserCacheManager.getTokenKeys called");
        const item = this.getItem(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].TOKEN_KEYS}.${this.clientId}`);
        if (item) {
            const tokenKeys = this.validateAndParseJson(item);
            if (tokenKeys && tokenKeys.hasOwnProperty("idToken") && tokenKeys.hasOwnProperty("accessToken") && tokenKeys.hasOwnProperty("refreshToken")) {
                return tokenKeys;
            } else {
                this.logger.error("BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.");
            }
        } else {
            this.logger.verbose("BrowserCacheManager.getTokenKeys - No token keys found");
        }
        return {
            idToken: [],
            accessToken: [],
            refreshToken: []
        };
    }
    /**
     * Adds the given key to the token key map
     * @param key
     * @param type
     */ addTokenKey(key, type) {
        this.logger.trace("BrowserCacheManager addTokenKey called");
        const tokenKeys = this.getTokenKeys();
        switch(type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN:
                if (tokenKeys.idToken.indexOf(key) === -1) {
                    this.logger.info("BrowserCacheManager: addTokenKey - idToken added to map");
                    tokenKeys.idToken.push(key);
                }
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN:
                if (tokenKeys.accessToken.indexOf(key) === -1) {
                    this.logger.info("BrowserCacheManager: addTokenKey - accessToken added to map");
                    tokenKeys.accessToken.push(key);
                }
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN:
                if (tokenKeys.refreshToken.indexOf(key) === -1) {
                    this.logger.info("BrowserCacheManager: addTokenKey - refreshToken added to map");
                    tokenKeys.refreshToken.push(key);
                }
                break;
            default:
                this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].unexpectedCredentialType);
        }
        this.setItem(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));
    }
    /**
     * Removes the given key from the token key map
     * @param key
     * @param type
     */ removeTokenKey(key, type) {
        this.logger.trace("BrowserCacheManager removeTokenKey called");
        const tokenKeys = this.getTokenKeys();
        switch(type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN:
                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);
                const idRemoval = tokenKeys.idToken.indexOf(key);
                if (idRemoval > -1) {
                    this.logger.info("BrowserCacheManager: removeTokenKey - idToken removed from map");
                    tokenKeys.idToken.splice(idRemoval, 1);
                } else {
                    this.logger.info("BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.");
                }
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN:
                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);
                const accessRemoval = tokenKeys.accessToken.indexOf(key);
                if (accessRemoval > -1) {
                    this.logger.info("BrowserCacheManager: removeTokenKey - accessToken removed from map");
                    tokenKeys.accessToken.splice(accessRemoval, 1);
                } else {
                    this.logger.info("BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.");
                }
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN:
                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);
                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);
                if (refreshRemoval > -1) {
                    this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken removed from map");
                    tokenKeys.refreshToken.splice(refreshRemoval, 1);
                } else {
                    this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.");
                }
                break;
            default:
                this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].unexpectedCredentialType);
        }
        this.setItem(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StaticCacheKeys"].TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));
    }
    /**
     * generates idToken entity from a string
     * @param idTokenKey
     */ getIdTokenCredential(idTokenKey) {
        const value = this.getItem(idTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            this.removeTokenKey(idTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN);
            return null;
        }
        const parsedIdToken = this.validateAndParseJson(value);
        if (!parsedIdToken || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isIdTokenEntity(parsedIdToken)) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            this.removeTokenKey(idTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN);
            return null;
        }
        this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
        return parsedIdToken;
    }
    /**
     * set IdToken credential to the platform cache
     * @param idToken
     */ setIdTokenCredential(idToken) {
        this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
        const idTokenKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].generateCredentialKey(idToken);
        this.setItem(idTokenKey, JSON.stringify(idToken));
        this.addTokenKey(idTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ID_TOKEN);
    }
    /**
     * generates accessToken entity from a string
     * @param key
     */ getAccessTokenCredential(accessTokenKey) {
        const value = this.getItem(accessTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            this.removeTokenKey(accessTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN);
            return null;
        }
        const parsedAccessToken = this.validateAndParseJson(value);
        if (!parsedAccessToken || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isAccessTokenEntity(parsedAccessToken)) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            this.removeTokenKey(accessTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN);
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
        return parsedAccessToken;
    }
    /**
     * set accessToken credential to the platform cache
     * @param accessToken
     */ setAccessTokenCredential(accessToken) {
        this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
        const accessTokenKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].generateCredentialKey(accessToken);
        this.setItem(accessTokenKey, JSON.stringify(accessToken));
        this.addTokenKey(accessTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].ACCESS_TOKEN);
    }
    /**
     * generates refreshToken entity from a string
     * @param refreshTokenKey
     */ getRefreshTokenCredential(refreshTokenKey) {
        const value = this.getItem(refreshTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            this.removeTokenKey(refreshTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN);
            return null;
        }
        const parsedRefreshToken = this.validateAndParseJson(value);
        if (!parsedRefreshToken || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isRefreshTokenEntity(parsedRefreshToken)) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            this.removeTokenKey(refreshTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN);
            return null;
        }
        this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
        return parsedRefreshToken;
    }
    /**
     * set refreshToken credential to the platform cache
     * @param refreshToken
     */ setRefreshTokenCredential(refreshToken) {
        this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
        const refreshTokenKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].generateCredentialKey(refreshToken);
        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
        this.addTokenKey(refreshTokenKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CredentialType"].REFRESH_TOKEN);
    }
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */ getAppMetadata(appMetadataKey) {
        const value = this.getItem(appMetadataKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        const parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
        return parsedMetadata;
    }
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */ setAppMetadata(appMetadata) {
        this.logger.trace("BrowserCacheManager.setAppMetadata called");
        const appMetadataKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].generateAppMetadataKey(appMetadata);
        this.setItem(appMetadataKey, JSON.stringify(appMetadata));
    }
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */ getServerTelemetry(serverTelemetryKey) {
        const value = this.getItem(serverTelemetryKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        const parsedEntity = this.validateAndParseJson(value);
        if (!parsedEntity || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
        return parsedEntity;
    }
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */ setServerTelemetry(serverTelemetryKey, serverTelemetry) {
        this.logger.trace("BrowserCacheManager.setServerTelemetry called");
        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
    }
    /**
     *
     */ getAuthorityMetadata(key) {
        const value = this.internalStorage.getItem(key);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
            return null;
        }
        const parsedMetadata = this.validateAndParseJson(value);
        if (parsedMetadata && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isAuthorityMetadataEntity(key, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
            return parsedMetadata;
        }
        return null;
    }
    /**
     *
     */ getAuthorityMetadataKeys() {
        const allKeys = this.internalStorage.getKeys();
        return allKeys.filter((key)=>{
            return this.isAuthorityMetadata(key);
        });
    }
    /**
     * Sets wrapper metadata in memory
     * @param wrapperSKU
     * @param wrapperVersion
     */ setWrapperMetadata(wrapperSKU, wrapperVersion) {
        this.internalStorage.setItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InMemoryCacheKeys"].WRAPPER_SKU, wrapperSKU);
        this.internalStorage.setItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InMemoryCacheKeys"].WRAPPER_VER, wrapperVersion);
    }
    /**
     * Returns wrapper metadata from in-memory storage
     */ getWrapperMetadata() {
        const sku = this.internalStorage.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InMemoryCacheKeys"].WRAPPER_SKU) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        const version = this.internalStorage.getItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InMemoryCacheKeys"].WRAPPER_VER) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        return [
            sku,
            version
        ];
    }
    /**
     *
     * @param entity
     */ setAuthorityMetadata(key, entity) {
        this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
        this.internalStorage.setItem(key, JSON.stringify(entity));
    }
    /**
     * Gets the active account
     */ getActiveAccount() {
        const activeAccountKeyFilters = this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ACTIVE_ACCOUNT_FILTERS);
        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);
        if (!activeAccountValueFilters) {
            // if new active account cache type isn't found, it's an old version, so look for that instead
            this.logger.trace("BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema");
            const activeAccountKeyLocal = this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ACTIVE_ACCOUNT);
            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);
            if (!activeAccountValueLocal) {
                this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found");
                return null;
            }
            const activeAccount = this.getAccountInfoFilteredBy({
                localAccountId: activeAccountValueLocal
            });
            if (activeAccount) {
                this.logger.trace("BrowserCacheManager.getActiveAccount: Legacy active account cache schema found");
                this.logger.trace("BrowserCacheManager.getActiveAccount: Adding active account filters cache schema");
                this.setActiveAccount(activeAccount);
                return activeAccount;
            }
            return null;
        }
        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);
        if (activeAccountValueObj) {
            this.logger.trace("BrowserCacheManager.getActiveAccount: Active account filters schema found");
            return this.getAccountInfoFilteredBy({
                homeAccountId: activeAccountValueObj.homeAccountId,
                localAccountId: activeAccountValueObj.localAccountId,
                tenantId: activeAccountValueObj.tenantId
            });
        }
        this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found");
        return null;
    }
    /**
     * Sets the active account's localAccountId in cache
     * @param account
     */ setActiveAccount(account) {
        const activeAccountKey = this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ACTIVE_ACCOUNT_FILTERS);
        const activeAccountKeyLocal = this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ACTIVE_ACCOUNT);
        if (account) {
            this.logger.verbose("setActiveAccount: Active account set");
            const activeAccountValue = {
                homeAccountId: account.homeAccountId,
                localAccountId: account.localAccountId,
                tenantId: account.tenantId
            };
            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));
            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);
        } else {
            this.logger.verbose("setActiveAccount: No account passed, active account not set");
            this.browserStorage.removeItem(activeAccountKey);
            this.browserStorage.removeItem(activeAccountKeyLocal);
        }
    }
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */ getThrottlingCache(throttlingCacheKey) {
        const value = this.getItem(throttlingCacheKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        const parsedThrottlingCache = this.validateAndParseJson(value);
        if (!parsedThrottlingCache || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
        return parsedThrottlingCache;
    }
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */ setThrottlingCache(throttlingCacheKey, throttlingCache) {
        this.logger.trace("BrowserCacheManager.setThrottlingCache called");
        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
    }
    /**
     * Gets cache item with given key.
     * Will retrieve from cookies if storeAuthStateInCookie is set to true.
     * @param key
     */ getTemporaryCache(cacheKey, generateKey) {
        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        if (this.cacheConfig.storeAuthStateInCookie) {
            const itemCookie = this.getItemCookie(key);
            if (itemCookie) {
                this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                return itemCookie;
            }
        }
        const value = this.temporaryCacheStorage.getItem(key);
        if (!value) {
            // If temp cache item not found in session/memory, check local storage for items set by old versions
            if (this.cacheConfig.cacheLocation === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].LocalStorage) {
                const item = this.browserStorage.getItem(key);
                if (item) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                    return item;
                }
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
        return value;
    }
    /**
     * Sets the cache item with the key and value given.
     * Stores in cookie if storeAuthStateInCookie is set to true.
     * This can cause cookie overflow if used incorrectly.
     * @param key
     * @param value
     */ setTemporaryCache(cacheKey, value, generateKey) {
        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        this.temporaryCacheStorage.setItem(key, value);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
            this.setItemCookie(key, value);
        }
    }
    /**
     * Removes the cache item with the given key.
     * @param key
     */ removeItem(key) {
        this.browserStorage.removeItem(key);
    }
    /**
     * Removes the temporary cache item with the given key.
     * Will also clear the cookie item if storeAuthStateInCookie is set to true.
     * @param key
     */ removeTemporaryItem(key) {
        this.temporaryCacheStorage.removeItem(key);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
            this.clearItemCookie(key);
        }
    }
    /**
     * Gets all keys in window.
     */ getKeys() {
        return this.browserStorage.getKeys();
    }
    /**
     * Clears all cache entries created by MSAL.
     */ async clear() {
        // Removes all accounts and their credentials
        await this.removeAllAccounts();
        this.removeAppMetadata();
        // Remove temp storage first to make sure any cookies are cleared
        this.temporaryCacheStorage.getKeys().forEach((cacheKey)=>{
            if (cacheKey.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {
                this.removeTemporaryItem(cacheKey);
            }
        });
        // Removes all remaining MSAL cache items
        this.browserStorage.getKeys().forEach((cacheKey)=>{
            if (cacheKey.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {
                this.browserStorage.removeItem(cacheKey);
            }
        });
        this.internalStorage.clear();
    }
    /**
     * Clears all access tokes that have claims prior to saving the current one
     * @param performanceClient {IPerformanceClient}
     * @returns
     */ async clearTokensAndKeysWithClaims(performanceClient) {
        performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].ClearTokensAndKeysWithClaims);
        const tokenKeys = this.getTokenKeys();
        const removedAccessTokens = [];
        tokenKeys.accessToken.forEach((key)=>{
            // if the access token has claims in its key, remove the token key and the token
            const credential = this.getAccessTokenCredential(key);
            if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {
                removedAccessTokens.push(this.removeAccessToken(key));
            }
        });
        await Promise.all(removedAccessTokens);
        // warn if any access tokens are removed
        if (removedAccessTokens.length > 0) {
            this.logger.warning(`${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`);
        }
    }
    /**
     * Add value to cookies
     * @param cookieName
     * @param cookieValue
     * @param expires
     * @deprecated
     */ setItemCookie(cookieName, cookieValue, expires) {
        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;
        if (expires) {
            const expireTime = this.getCookieExpirationTime(expires);
            cookieStr += `expires=${expireTime};`;
        }
        if (this.cacheConfig.secureCookies) {
            cookieStr += "Secure;";
        }
        document.cookie = cookieStr;
    }
    /**
     * Get one item by key from cookies
     * @param cookieName
     * @deprecated
     */ getItemCookie(cookieName) {
        const name = `${encodeURIComponent(cookieName)}=`;
        const cookieList = document.cookie.split(";");
        for(let i = 0; i < cookieList.length; i++){
            let cookie = cookieList[i];
            while(cookie.charAt(0) === " "){
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) === 0) {
                return decodeURIComponent(cookie.substring(name.length, cookie.length));
            }
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
    }
    /**
     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.
     * @deprecated
     */ clearMsalCookies() {
        const cookiePrefix = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${this.clientId}`;
        const cookieList = document.cookie.split(";");
        cookieList.forEach((cookie)=>{
            while(cookie.charAt(0) === " "){
                // eslint-disable-next-line no-param-reassign
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(cookiePrefix) === 0) {
                const cookieKey = cookie.split("=")[0];
                this.clearItemCookie(cookieKey);
            }
        });
    }
    /**
     * Clear an item in the cookies by key
     * @param cookieName
     * @deprecated
     */ clearItemCookie(cookieName) {
        this.setItemCookie(cookieName, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING, -1);
    }
    /**
     * Get cookie expiration time
     * @param cookieLifeDays
     * @deprecated
     */ getCookieExpirationTime(cookieLifeDays) {
        const today = new Date();
        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
        return expr.toUTCString();
    }
    /**
     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
     * @param key
     * @param addInstanceId
     */ generateCacheKey(key) {
        const generatedKey = this.validateAndParseJson(key);
        if (!generatedKey) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StringUtils"].startsWith(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StringUtils"].startsWith(key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ADAL_ID_TOKEN)) {
                return key;
            }
            return `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${this.clientId}.${key}`;
        }
        return JSON.stringify(key);
    }
    /**
     * Create authorityKey to cache authority
     * @param state
     */ generateAuthorityKey(stateString) {
        const { libraryState: { id: stateId } } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.cryptoImpl, stateString);
        return this.generateCacheKey(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].AUTHORITY}.${stateId}`);
    }
    /**
     * Create Nonce key to cache nonce
     * @param state
     */ generateNonceKey(stateString) {
        const { libraryState: { id: stateId } } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.cryptoImpl, stateString);
        return this.generateCacheKey(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].NONCE_IDTOKEN}.${stateId}`);
    }
    /**
     * Creates full cache key for the request state
     * @param stateString State string for the request
     */ generateStateKey(stateString) {
        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
        const { libraryState: { id: stateId } } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.cryptoImpl, stateString);
        return this.generateCacheKey(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_STATE}.${stateId}`);
    }
    /**
     * Gets the cached authority based on the cached state. Returns empty if no cached state found.
     */ getCachedAuthority(cachedState) {
        const stateCacheKey = this.generateStateKey(cachedState);
        const state = this.getTemporaryCache(stateCacheKey);
        if (!state) {
            return null;
        }
        const authorityCacheKey = this.generateAuthorityKey(state);
        return this.getTemporaryCache(authorityCacheKey);
    }
    /**
     * Updates account, authority, and state in cache
     * @param serverAuthenticationRequest
     * @param account
     */ updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {
        this.logger.trace("BrowserCacheManager.updateCacheEntries called");
        // Cache the request state
        const stateCacheKey = this.generateStateKey(state);
        this.setTemporaryCache(stateCacheKey, state, false);
        // Cache the nonce
        const nonceCacheKey = this.generateNonceKey(state);
        this.setTemporaryCache(nonceCacheKey, nonce, false);
        // Cache authorityKey
        const authorityCacheKey = this.generateAuthorityKey(state);
        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
        if (account) {
            const ccsCredential = {
                credential: account.homeAccountId,
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CcsCredentialType"].HOME_ACCOUNT_ID
            };
            this.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        } else if (loginHint) {
            const ccsCredential = {
                credential: loginHint,
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CcsCredentialType"].UPN
            };
            this.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        }
    }
    /**
     * Reset all temporary cache items
     * @param state
     */ resetRequestCache(state) {
        this.logger.trace("BrowserCacheManager.resetRequestCache called");
        // check state and remove associated cache items
        if (state) {
            this.temporaryCacheStorage.getKeys().forEach((key)=>{
                if (key.indexOf(state) !== -1) {
                    this.removeTemporaryItem(key);
                }
            });
            // delete generic interactive request parameters
            this.removeTemporaryItem(this.generateStateKey(state));
            this.removeTemporaryItem(this.generateNonceKey(state));
            this.removeTemporaryItem(this.generateAuthorityKey(state));
        }
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_PARAMS));
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].ORIGIN_URI));
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].URL_HASH));
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CORRELATION_ID));
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CCS_CREDENTIAL));
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].NATIVE_REQUEST));
        this.setInteractionInProgress(false);
    }
    /**
     * Removes temporary cache for the provided state
     * @param stateString
     */ cleanRequestByState(stateString) {
        this.logger.trace("BrowserCacheManager.cleanRequestByState called");
        // Interaction is completed - remove interaction status.
        if (stateString) {
            const stateKey = this.generateStateKey(stateString);
            const cachedState = this.temporaryCacheStorage.getItem(stateKey);
            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);
            this.resetRequestCache(cachedState || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING);
        }
        this.clearMsalCookies();
    }
    /**
     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state
     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.
     * @param interactionType
     */ cleanRequestByInteractionType(interactionType) {
        this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called");
        // Loop through all keys to find state key
        this.temporaryCacheStorage.getKeys().forEach((key)=>{
            // If this key is not the state key, move on
            if (key.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_STATE) === -1) {
                return;
            }
            // Retrieve state value, return if not a valid value
            const stateValue = this.temporaryCacheStorage.getItem(key);
            if (!stateValue) {
                return;
            }
            // Extract state and ensure it matches given InteractionType, then clean request cache
            const parsedState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["extractBrowserRequestState"])(this.cryptoImpl, stateValue);
            if (parsedState && parsedState.interactionType === interactionType) {
                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);
                this.resetRequestCache(stateValue);
            }
        });
        this.clearMsalCookies();
        this.setInteractionInProgress(false);
    }
    cacheCodeRequest(authCodeRequest) {
        this.logger.trace("BrowserCacheManager.cacheCodeRequest called");
        const encodedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Encode"])(JSON.stringify(authCodeRequest));
        this.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_PARAMS, encodedValue, true);
    }
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */ getCachedRequest(state) {
        this.logger.trace("BrowserCacheManager.getCachedRequest called");
        // Get token request from cache and parse as TokenExchangeParameters.
        const encodedTokenRequest = this.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_PARAMS, true);
        if (!encodedTokenRequest) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noTokenRequestCacheError"]);
        }
        let parsedRequest;
        try {
            parsedRequest = JSON.parse((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"])(encodedTokenRequest));
        } catch (e) {
            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);
            this.logger.error(`Parsing cached token request threw with error: ${e}`);
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseTokenRequestCacheError"]);
        }
        this.removeTemporaryItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].REQUEST_PARAMS));
        // Get cached authority and use if no authority is cached with request.
        if (!parsedRequest.authority) {
            const authorityCacheKey = this.generateAuthorityKey(state);
            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);
            if (!cachedAuthority) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noCachedAuthorityError"]);
            }
            parsedRequest.authority = cachedAuthority;
        }
        return parsedRequest;
    }
    /**
     * Gets cached native request for redirect flows
     */ getCachedNativeRequest() {
        this.logger.trace("BrowserCacheManager.getCachedNativeRequest called");
        const cachedRequest = this.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].NATIVE_REQUEST, true);
        if (!cachedRequest) {
            this.logger.trace("BrowserCacheManager.getCachedNativeRequest: No cached native request found");
            return null;
        }
        const parsedRequest = this.validateAndParseJson(cachedRequest);
        if (!parsedRequest) {
            this.logger.error("BrowserCacheManager.getCachedNativeRequest: Unable to parse native request");
            return null;
        }
        return parsedRequest;
    }
    isInteractionInProgress(matchClientId) {
        const clientId = this.getInteractionInProgress();
        if (matchClientId) {
            return clientId === this.clientId;
        } else {
            return !!clientId;
        }
    }
    getInteractionInProgress() {
        const key = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].INTERACTION_STATUS_KEY}`;
        return this.getTemporaryCache(key, false);
    }
    setInteractionInProgress(inProgress) {
        // Ensure we don't overwrite interaction in progress for a different clientId
        const key = `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].CACHE_PREFIX}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].INTERACTION_STATUS_KEY}`;
        if (inProgress) {
            if (this.getInteractionInProgress()) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interactionInProgress"]);
            } else {
                // No interaction is in progress
                this.setTemporaryCache(key, this.clientId, false);
            }
        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {
            this.removeTemporaryItem(key);
        }
    }
    /**
     * Returns username retrieved from ADAL or MSAL v1 idToken
     * @deprecated
     */ getLegacyLoginHint() {
        // Only check for adal/msal token if no SSO params are being used
        const adalIdTokenString = this.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ADAL_ID_TOKEN);
        if (adalIdTokenString) {
            this.browserStorage.removeItem(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ADAL_ID_TOKEN);
            this.logger.verbose("Cached ADAL id token retrieved.");
        }
        // Check for cached MSAL v1 id token
        const msalIdTokenString = this.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ID_TOKEN, true);
        if (msalIdTokenString) {
            this.browserStorage.removeItem(this.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ID_TOKEN));
            this.logger.verbose("Cached MSAL.js v1 id token retrieved");
        }
        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;
        if (cachedIdTokenString) {
            const idTokenClaims = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__["AuthToken"].extractTokenClaims(cachedIdTokenString, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"]);
            if (idTokenClaims.preferred_username) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint");
                return idTokenClaims.preferred_username;
            } else if (idTokenClaims.upn) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint");
                return idTokenClaims.upn;
            } else {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.");
            }
        }
        return null;
    }
    /**
     * Updates a credential's cache key if the current cache key is outdated
     */ updateCredentialCacheKey(currentCacheKey, credential) {
        const updatedCacheKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].generateCredentialKey(credential);
        if (currentCacheKey !== updatedCacheKey) {
            const cacheItem = this.getItem(currentCacheKey);
            if (cacheItem) {
                this.browserStorage.removeItem(currentCacheKey);
                this.setItem(updatedCacheKey, cacheItem);
                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);
                return updatedCacheKey;
            } else {
                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);
            }
        }
        return currentCacheKey;
    }
    /**
     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache
     * @param result
     * @param request
     */ async hydrateCache(result, request) {
        const idTokenEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);
        let claimsHash;
        if (request.claims) {
            claimsHash = await this.cryptoImpl.hashString(request.claims);
        }
        /**
         * meta data for cache stores time in seconds from epoch
         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)
         * We need to map these for the cache when building tokens from AuthenticationResult
         *
         * The next MSAL VFuture should map these both to same value if possible
         */ const accessTokenEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(" "), result.expiresOn ? result.expiresOn.getTime() / 1000 : 0, result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"], undefined, result.tokenType, undefined, request.sshKid, request.claims, claimsHash);
        const cacheRecord = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheRecord"](undefined, idTokenEntity, accessTokenEntity);
        return this.saveCacheRecord(cacheRecord);
    }
    /**
     * saves a cache record
     * @param cacheRecord {CacheRecord}
     * @param storeInCache {?StoreInCache}
     * @param correlationId {?string} correlation id
     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {
        try {
            await super.saveCacheRecord(cacheRecord, storeInCache, correlationId);
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$CacheError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["CacheError"] && this.performanceClient && correlationId) {
                try {
                    const tokenKeys = this.getTokenKeys();
                    this.performanceClient.addFields({
                        cacheRtCount: tokenKeys.refreshToken.length,
                        cacheIdCount: tokenKeys.idToken.length,
                        cacheAtCount: tokenKeys.accessToken.length
                    }, correlationId);
                } catch (e) {}
            }
            throw e;
        }
    }
}
const DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger)=>{
    const cacheOptions = {
        cacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage,
        temporaryCacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage,
        storeAuthStateInCookie: false,
        secureCookies: false,
        cacheMigrationEnabled: false,
        claimsBasedCachingEnabled: false
    };
    return new BrowserCacheManager(clientId, cacheOptions, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_CRYPTO_IMPLEMENTATION"], logger);
};
;
 //# sourceMappingURL=BrowserCacheManager.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "getAccount": ()=>getAccount,
    "getAccountByHomeId": ()=>getAccountByHomeId,
    "getAccountByLocalId": ()=>getAccountByLocalId,
    "getAccountByUsername": ()=>getAccountByUsername,
    "getActiveAccount": ()=>getActiveAccount,
    "getAllAccounts": ()=>getAllAccounts,
    "setActiveAccount": ()=>setActiveAccount
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
 * @param accountFilter - (Optional) filter to narrow down the accounts returned
 * @returns Array of AccountInfo objects in cache
 */ function getAllAccounts(logger, browserStorage, isInBrowser, accountFilter) {
    logger.verbose("getAllAccounts called");
    return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];
}
/**
 * Returns the first account found in the cache that matches the account filter passed in.
 * @param accountFilter
 * @returns The first account found in the cache matching the provided filter or null if no account could be found.
 */ function getAccount(accountFilter, logger, browserStorage) {
    logger.trace("getAccount called");
    if (Object.keys(accountFilter).length === 0) {
        logger.warning("getAccount: No accountFilter provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy(accountFilter);
    if (account) {
        logger.verbose("getAccount: Account matching provided filter found, returning");
        return account;
    } else {
        logger.verbose("getAccount: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching username.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found.
 * This API is provided for convenience but getAccountById should be used for best reliability
 * @param username
 * @returns The account object stored in MSAL
 */ function getAccountByUsername(username, logger, browserStorage) {
    logger.trace("getAccountByUsername called");
    if (!username) {
        logger.warning("getAccountByUsername: No username provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        username
    });
    if (account) {
        logger.verbose("getAccountByUsername: Account matching username found, returning");
        logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);
        return account;
    } else {
        logger.verbose("getAccountByUsername: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching homeAccountId.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found
 * @param homeAccountId
 * @returns The account object stored in MSAL
 */ function getAccountByHomeId(homeAccountId, logger, browserStorage) {
    logger.trace("getAccountByHomeId called");
    if (!homeAccountId) {
        logger.warning("getAccountByHomeId: No homeAccountId provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        homeAccountId
    });
    if (account) {
        logger.verbose("getAccountByHomeId: Account matching homeAccountId found, returning");
        logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);
        return account;
    } else {
        logger.verbose("getAccountByHomeId: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching localAccountId.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found
 * @param localAccountId
 * @returns The account object stored in MSAL
 */ function getAccountByLocalId(localAccountId, logger, browserStorage) {
    logger.trace("getAccountByLocalId called");
    if (!localAccountId) {
        logger.warning("getAccountByLocalId: No localAccountId provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        localAccountId
    });
    if (account) {
        logger.verbose("getAccountByLocalId: Account matching localAccountId found, returning");
        logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);
        return account;
    } else {
        logger.verbose("getAccountByLocalId: No matching account found, returning null");
        return null;
    }
}
/**
 * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
 * @param account
 */ function setActiveAccount(account, browserStorage) {
    browserStorage.setActiveAccount(account);
}
/**
 * Gets the currently active account
 */ function getActiveAccount(browserStorage) {
    return browserStorage.getActiveAccount();
}
;
 //# sourceMappingURL=AccountManager.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "blockAPICallsBeforeInitialize": ()=>blockAPICallsBeforeInitialize,
    "blockAcquireTokenInPopups": ()=>blockAcquireTokenInPopups,
    "blockNonBrowserEnvironment": ()=>blockNonBrowserEnvironment,
    "blockRedirectInIframe": ()=>blockRedirectInIframe,
    "blockReloadInHiddenIframes": ()=>blockReloadInHiddenIframes,
    "clearHash": ()=>clearHash,
    "createGuid": ()=>createGuid,
    "getCurrentUri": ()=>getCurrentUri,
    "getHomepage": ()=>getHomepage,
    "isInIframe": ()=>isInIframe,
    "isInPopup": ()=>isInPopup,
    "preconnect": ()=>preconnect,
    "preflightCheck": ()=>preflightCheck,
    "redirectPreflightCheck": ()=>redirectPreflightCheck,
    "replaceHash": ()=>replaceHash
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Clears hash from window url.
 */ function clearHash(contentWindow) {
    // Office.js sets history.replaceState to null
    contentWindow.location.hash = "";
    if (typeof contentWindow.history.replaceState === "function") {
        // Full removes "#" from url
        contentWindow.history.replaceState(null, "", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);
    }
}
/**
 * Replaces current hash with hash from provided url
 */ function replaceHash(url) {
    const urlParts = url.split("#");
    urlParts.shift(); // Remove part before the hash
    window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
}
/**
 * Returns boolean of whether the current window is in an iframe or not.
 */ function isInIframe() {
    return window.parent !== window;
}
/**
 * Returns boolean of whether or not the current window is a popup opened by msal
 */ function isInPopup() {
    return typeof window !== "undefined" && !!window.opener && window.opener !== window && typeof window.name === "string" && window.name.indexOf(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_NAME_PREFIX}.`) === 0;
}
// #endregion
/**
 * Returns current window URL as redirect uri
 */ function getCurrentUri() {
    return window.location.href.split("?")[0].split("#")[0];
}
/**
 * Gets the homepage url for the current window location.
 */ function getHomepage() {
    const currentUrl = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"](window.location.href);
    const urlComponents = currentUrl.getUrlComponents();
    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;
}
/**
 * Throws error if we have completed an auth and are
 * attempting another auth request inside an iframe.
 */ function blockReloadInHiddenIframes() {
    const isResponseHash = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].hashContainsKnownProperties(window.location.hash);
    // return an error if called from the hidden iframe created by the msal js silent calls
    if (isResponseHash && isInIframe()) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockIframeReload"]);
    }
}
/**
 * Block redirect operations in iframes unless explicitly allowed
 * @param interactionType Interaction type for the request
 * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
 */ function blockRedirectInIframe(allowRedirectInIframe) {
    if (isInIframe() && !allowRedirectInIframe) {
        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["redirectInIframe"]);
    }
}
/**
 * Block redirectUri loaded in popup from calling AcquireToken APIs
 */ function blockAcquireTokenInPopups() {
    // Popups opened by msal popup APIs are given a name that starts with "msal."
    if (isInPopup()) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockNestedPopups"]);
    }
}
/**
 * Throws error if token requests are made in non-browser environment
 * @param isBrowserEnvironment Flag indicating if environment is a browser.
 */ function blockNonBrowserEnvironment() {
    if (typeof window === "undefined") {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nonBrowserEnvironment"]);
    }
}
/**
 * Throws error if initialize hasn't been called
 * @param initialized
 */ function blockAPICallsBeforeInitialize(initialized) {
    if (!initialized) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uninitializedPublicClientApplication"]);
    }
}
/**
 * Helper to validate app environment before making an auth request
 * @param initialized
 */ function preflightCheck(initialized) {
    // Block request if not in browser environment
    blockNonBrowserEnvironment();
    // Block auth requests inside a hidden iframe
    blockReloadInHiddenIframes();
    // Block redirectUri opened in a popup from calling MSAL APIs
    blockAcquireTokenInPopups();
    // Block token acquisition before initialize has been called
    blockAPICallsBeforeInitialize(initialized);
}
/**
 * Helper to validate app enviornment before making redirect request
 * @param initialized
 * @param config
 */ function redirectPreflightCheck(initialized, config) {
    preflightCheck(initialized);
    blockRedirectInIframe(config.system.allowRedirectInIframe);
    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
    if (config.cache.cacheLocation === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage && !config.cache.storeAuthStateInCookie) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserConfigurationAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserConfigurationAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inMemRedirectUnavailable"]);
    }
}
/**
 * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request
 * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com
 * @returns
 */ function preconnect(authority) {
    const link = document.createElement("link");
    link.rel = "preconnect";
    link.href = new URL(authority).origin;
    link.crossOrigin = "anonymous";
    document.head.appendChild(link);
    // The browser will close connection if not used within a few seconds, remove element from the header after 10s
    window.setTimeout(()=>{
        try {
            document.head.removeChild(link);
        } catch  {}
    }, 10000); // 10s Timeout
}
/**
 * Wrapper function that creates a UUID v7 from the current timestamp.
 * @returns {string}
 */ function createGuid() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])();
}
;
 //# sourceMappingURL=BrowserUtils.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/event/EventHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "EventHandler": ()=>EventHandler
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$CacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/CacheManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class EventHandler {
    constructor(logger, browserCrypto){
        this.eventCallbacks = new Map();
        this.logger = logger;
        this.browserCrypto = browserCrypto;
        this.listeningToStorageEvents = false;
        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ addEventCallback(callback) {
        if (typeof window !== "undefined") {
            const callbackId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])();
            this.eventCallbacks.set(callbackId, callback);
            this.logger.verbose(`Event callback registered with id: ${callbackId}`);
            return callbackId;
        }
        return null;
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventCallbacks.delete(callbackId);
        this.logger.verbose(`Event callback ${callbackId} removed.`);
    }
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ enableAccountStorageEvents() {
        if (typeof window === "undefined") {
            return;
        }
        if (!this.listeningToStorageEvents) {
            this.logger.verbose("Adding account storage listener.");
            this.listeningToStorageEvents = true;
            window.addEventListener("storage", this.handleAccountCacheChange);
        } else {
            this.logger.verbose("Account storage listener already registered.");
        }
    }
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ disableAccountStorageEvents() {
        if (typeof window === "undefined") {
            return;
        }
        if (this.listeningToStorageEvents) {
            this.logger.verbose("Removing account storage listener.");
            window.removeEventListener("storage", this.handleAccountCacheChange);
            this.listeningToStorageEvents = false;
        } else {
            this.logger.verbose("No account storage listener registered.");
        }
    }
    /**
     * Emits events by calling callback with event message
     * @param eventType
     * @param interactionType
     * @param payload
     * @param error
     */ emitEvent(eventType, interactionType, payload, error) {
        if (typeof window !== "undefined") {
            const message = {
                eventType: eventType,
                interactionType: interactionType || null,
                payload: payload || null,
                error: error || null,
                timestamp: Date.now()
            };
            this.logger.info(`Emitting event: ${eventType}`);
            this.eventCallbacks.forEach((callback, callbackId)=>{
                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);
                callback.apply(null, [
                    message
                ]);
            });
        }
    }
    /**
     * Emit account added/removed events when cached accounts are changed in a different tab or frame
     */ handleAccountCacheChange(e) {
        try {
            // Handle active account filter change
            if (e.key?.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PersistentCacheKeys"].ACTIVE_ACCOUNT_FILTERS)) {
                // This event has no payload, it only signals cross-tab app instances that the results of calling getActiveAccount() will have changed
                this.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACTIVE_ACCOUNT_CHANGED);
            }
            // Handle account object change
            const cacheValue = e.newValue || e.oldValue;
            if (!cacheValue) {
                return;
            }
            const parsedValue = JSON.parse(cacheValue);
            if (typeof parsedValue !== "object" || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].isAccountEntity(parsedValue)) {
                return;
            }
            const accountEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$CacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheManager"].toObject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"](), parsedValue);
            const accountInfo = accountEntity.getAccountInfo();
            if (!e.oldValue && e.newValue) {
                this.logger.info("Account was added to cache in a different window");
                this.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACCOUNT_ADDED, undefined, accountInfo);
            } else if (!e.newValue && e.oldValue) {
                this.logger.info("Account was removed from cache in a different window");
                this.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACCOUNT_REMOVED, undefined, accountInfo);
            }
        } catch (e) {
            return;
        }
    }
}
;
 //# sourceMappingURL=EventHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "BaseInteractionClient": ()=>BaseInteractionClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$server$2f$ServerTelemetryManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/Authority.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityFactory$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthorityFactory$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs [app-ssr] (ecmascript) <export * as AuthorityFactory>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientConfigurationErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/packageMetadata.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class BaseInteractionClient {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId){
        this.config = config;
        this.browserStorage = storageImpl;
        this.browserCrypto = browserCrypto;
        this.networkClient = this.config.system.networkClient;
        this.eventHandler = eventHandler;
        this.navigationClient = navigationClient;
        this.nativeMessageHandler = nativeMessageHandler;
        this.correlationId = correlationId || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])();
        this.logger = logger.clone(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].MSAL_SKU, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"], this.correlationId);
        this.performanceClient = performanceClient;
    }
    async clearCacheOnLogout(account) {
        if (account) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {
                this.logger.verbose("Setting active account to null");
                this.browserStorage.setActiveAccount(null);
            }
            // Clear given account.
            try {
                await this.browserStorage.removeAccount(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].generateAccountCacheKey(account));
                this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.");
            } catch (error) {
                this.logger.error("Account provided in logout request was not found. Local cache unchanged.");
            }
        } else {
            try {
                this.logger.verbose("No account provided in logout request, clearing all cache items.", this.correlationId);
                // Clear all accounts and tokens
                await this.browserStorage.clear();
                // Clear any stray keys from IndexedDB
                await this.browserCrypto.clearKeystore();
            } catch (e) {
                this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.");
            }
        }
    }
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * @param requestRedirectUri
     * @returns Redirect URL
     *
     */ getRedirectUri(requestRedirectUri) {
        this.logger.verbose("getRedirectUri called");
        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])();
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(redirectUri, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
    }
    /**
     *
     * @param apiId
     * @param correlationId
     * @param forceRefresh
     */ initializeServerTelemetryManager(apiId, forceRefresh) {
        this.logger.verbose("initializeServerTelemetryManager called");
        const telemetryPayload = {
            clientId: this.config.auth.clientId,
            correlationId: this.correlationId,
            apiId: apiId,
            forceRefresh: forceRefresh || false,
            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],
            wrapperVer: this.browserStorage.getWrapperMetadata()[1]
        };
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$server$2f$ServerTelemetryManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerTelemetryManager"](telemetryPayload, this.browserStorage);
    }
    /**
     * Used to get a discovered version of the default authority.
     * @param requestAuthority
     * @param requestAzureCloudOptions
     * @param account
     */ async getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions, account) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetDiscoveredAuthority, this.correlationId);
        const authorityOptions = {
            protocolMode: this.config.auth.protocolMode,
            OIDCOptions: this.config.auth.OIDCOptions,
            knownAuthorities: this.config.auth.knownAuthorities,
            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
            authorityMetadata: this.config.auth.authorityMetadata,
            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache
        };
        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority
        const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;
        // fall back to the authority from config
        const builtAuthority = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Authority"].generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);
        const discoveredAuthority = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityFactory$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthorityFactory$3e$__["AuthorityFactory"].createDiscoveredInstance, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);
        if (account && !discoveredAuthority.isAlias(account.environment)) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientConfigurationError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__["ClientConfigurationErrorCodes"].authorityMismatch);
        }
        return discoveredAuthority;
    }
}
;
 //# sourceMappingURL=BaseInteractionClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "generatePkceCodes": ()=>generatePkceCodes
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Constant byte array length
const RANDOM_BYTE_ARR_LENGTH = 32;
/**
 * This file defines APIs to generate PKCE codes and code verifiers.
 */ /**
 * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
 */ async function generatePkceCodes(performanceClient, logger, correlationId) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GeneratePkceCodes, correlationId);
    const codeVerifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(generateCodeVerifier, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);
    const codeChallenge = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(generateCodeChallengeFromVerifier, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);
    return {
        verifier: codeVerifier,
        challenge: codeChallenge
    };
}
/**
 * Generates a random 32 byte buffer and returns the base64
 * encoded string to be used as a PKCE Code Verifier
 */ function generateCodeVerifier(performanceClient, logger, correlationId) {
    try {
        // Generate random values as utf-8
        const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRandomValues"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GetRandomValues, logger, performanceClient, correlationId)(buffer);
        // encode verifier as base64
        const pkceCodeVerifierB64 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncodeArr"])(buffer);
        return pkceCodeVerifierB64;
    } catch (e) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pkceNotCreated"]);
    }
}
/**
 * Creates a base64 encoded PKCE Code Challenge string from the
 * hash created from the PKCE Code Verifier supplied
 */ async function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GenerateCodeChallengeFromVerifier, correlationId);
    try {
        // hashed verifier
        const pkceHashedCodeVerifier = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256Digest"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);
        // encode hash as base64
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Encode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["urlEncodeArr"])(new Uint8Array(pkceHashedCodeVerifier));
    } catch (e) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pkceNotCreated"]);
    }
}
;
 //# sourceMappingURL=PkceGenerator.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "initializeBaseRequest": ()=>initializeBaseRequest,
    "initializeSilentRequest": ()=>initializeSilentRequest
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientConfigurationErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/StringUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Initializer function for all request APIs
 * @param request
 */ async function initializeBaseRequest(request, config, performanceClient, logger) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeBaseRequest, request.correlationId);
    const authority = request.authority || config.auth.authority;
    const scopes = [
        ...request && request.scopes || []
    ];
    const validatedRequest = {
        ...request,
        correlationId: request.correlationId,
        authority,
        scopes
    };
    // Set authenticationScheme to BEARER if not explicitly set in the request
    if (!validatedRequest.authenticationScheme) {
        validatedRequest.authenticationScheme = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER;
        logger.verbose('Authentication Scheme wasn\'t explicitly set in request, defaulting to "Bearer" request');
    } else {
        if (validatedRequest.authenticationScheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].SSH) {
            if (!request.sshJwk) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientConfigurationError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__["ClientConfigurationErrorCodes"].missingSshJwk);
            }
            if (!request.sshKid) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientConfigurationError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientConfigurationErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientConfigurationErrorCodes$3e$__["ClientConfigurationErrorCodes"].missingSshKid);
            }
        }
        logger.verbose(`Authentication Scheme set to "${validatedRequest.authenticationScheme}" as configured in Auth request`);
    }
    // Set requested claims hash if claims-based caching is enabled and claims were requested
    if (config.cache.claimsBasedCachingEnabled && request.claims && // Checks for empty stringified object "{}" which doesn't qualify as requested claims
    !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StringUtils"].isEmptyObj(request.claims)) {
        validatedRequest.requestedClaimsHash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashString"])(request.claims);
    }
    return validatedRequest;
}
async function initializeSilentRequest(request, account, config, performanceClient, logger) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeSilentRequest, request.correlationId);
    const baseRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(initializeBaseRequest, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);
    return {
        ...request,
        ...baseRequest,
        account: account,
        forceRefresh: request.forceRefresh || false
    };
}
;
 //# sourceMappingURL=RequestHelpers.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "StandardInteractionClient": ()=>StandardInteractionClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$AuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$BaseInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/packageMetadata.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$PkceGenerator$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Defines the class structure and helper functions used by the "standard", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))
 */ class StandardInteractionClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$BaseInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseInteractionClient"] {
    /**
     * Generates an auth code request tied to the url request.
     * @param request
     */ async initializeAuthorizationCodeRequest(request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationCodeRequest, this.correlationId);
        const generatedPkceParams = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$PkceGenerator$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generatePkceCodes"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GeneratePkceCodes, this.logger, this.performanceClient, this.correlationId)(this.performanceClient, this.logger, this.correlationId);
        const authCodeRequest = {
            ...request,
            redirectUri: request.redirectUri,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            codeVerifier: generatedPkceParams.verifier
        };
        request.codeChallenge = generatedPkceParams.challenge;
        request.codeChallengeMethod = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].S256_CODE_CHALLENGE_METHOD;
        return authCodeRequest;
    }
    /**
     * Initializer for the logout request.
     * @param logoutRequest
     */ initializeLogoutRequest(logoutRequest) {
        this.logger.verbose("initializeLogoutRequest called", logoutRequest?.correlationId);
        const validLogoutRequest = {
            correlationId: this.correlationId || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
            ...logoutRequest
        };
        /**
         * Set logout_hint to be login_hint from ID Token Claims if present
         * and logoutHint attribute wasn't manually set in logout request
         */ if (logoutRequest) {
            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims
            if (!logoutRequest.logoutHint) {
                if (logoutRequest.account) {
                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);
                    if (logoutHint) {
                        this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided");
                        validLogoutRequest.logoutHint = logoutHint;
                    }
                } else {
                    this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");
                }
            } else {
                this.logger.verbose("logoutHint has already been set in logoutRequest");
            }
        } else {
            this.logger.verbose("logoutHint will not be set since no logout request was configured");
        }
        /*
         * Only set redirect uri if logout request isn't provided or the set uri isn't null.
         * Otherwise, use passed uri, config, or current page.
         */ if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
            } else if (this.config.auth.postLogoutRedirectUri === null) {
                this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect", validLogoutRequest.correlationId);
            } else if (this.config.auth.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to configured uri", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
            } else {
                this.logger.verbose("Setting postLogoutRedirectUri to current page", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
            }
        } else {
            this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri", validLogoutRequest.correlationId);
        }
        return validLogoutRequest;
    }
    /**
     * Parses login_hint ID Token Claim out of AccountInfo object to be used as
     * logout_hint in end session request.
     * @param account
     */ getLogoutHintFromIdTokenClaims(account) {
        const idTokenClaims = account.idTokenClaims;
        if (idTokenClaims) {
            if (idTokenClaims.login_hint) {
                return idTokenClaims.login_hint;
            } else {
                this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request");
            }
        } else {
            this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");
        }
        return null;
    }
    /**
     * Creates an Authorization Code Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */ async createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions, account) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.correlationId);
        // Create auth module.
        const clientConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.getClientConfiguration.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, requestAzureCloudOptions, account);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$AuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthorizationCodeClient"](clientConfig, this.performanceClient);
    }
    /**
     * Creates a Client Configuration object with the given request authority, or the default authority.
     * @param serverTelemetryManager
     * @param requestAuthority
     * @param requestCorrelationId
     */ async getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions, account) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetClientConfiguration, this.correlationId);
        const discoveredAuthority = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.getDiscoveredAuthority.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)(requestAuthority, requestAzureCloudOptions, account);
        const logger = this.config.system.loggerOptions;
        return {
            authOptions: {
                clientId: this.config.auth.clientId,
                authority: discoveredAuthority,
                clientCapabilities: this.config.auth.clientCapabilities
            },
            systemOptions: {
                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,
                preventCorsPreflight: true
            },
            loggerOptions: {
                loggerCallback: logger.loggerCallback,
                piiLoggingEnabled: logger.piiLoggingEnabled,
                logLevel: logger.logLevel,
                correlationId: this.correlationId
            },
            cacheOptions: {
                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled
            },
            cryptoInterface: this.browserCrypto,
            networkInterface: this.networkClient,
            storageInterface: this.browserStorage,
            serverTelemetryManager: serverTelemetryManager,
            libraryInfo: {
                sku: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].MSAL_SKU,
                version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$packageMetadata$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"],
                cpu: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
                os: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING
            },
            telemetry: this.config.telemetry
        };
    }
    /**
     * Helper to initialize required request parameters for interactive APIs and ssoSilent()
     * @param request
     * @param interactionType
     */ async initializeAuthorizationRequest(request, interactionType) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);
        const redirectUri = this.getRedirectUri(request.redirectUri);
        const browserState = {
            interactionType: interactionType
        };
        const state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].setRequestState(this.browserCrypto, request && request.state || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING, browserState);
        const baseRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["initializeBaseRequest"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)({
            ...request,
            correlationId: this.correlationId
        }, this.config, this.performanceClient, this.logger);
        const validatedRequest = {
            ...baseRequest,
            redirectUri: redirectUri,
            state: state,
            nonce: request.nonce || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
            responseMode: this.config.auth.OIDCOptions.serverResponseType
        };
        const account = request.account || this.browserStorage.getActiveAccount();
        if (account) {
            this.logger.verbose("Setting validated request account", this.correlationId);
            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);
            validatedRequest.account = account;
        }
        // Check for ADAL/MSAL v1 SSO
        if (!validatedRequest.loginHint && !account) {
            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();
            if (legacyLoginHint) {
                validatedRequest.loginHint = legacyLoginHint;
            }
        }
        return validatedRequest;
    }
}
;
 //# sourceMappingURL=StandardInteractionClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "contentError": ()=>contentError,
    "userSwitch": ()=>userSwitch
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const contentError = "ContentError";
const userSwitch = "user_switch";
;
 //# sourceMappingURL=NativeAuthErrorCodes.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "ACCOUNT_UNAVAILABLE": ()=>ACCOUNT_UNAVAILABLE,
    "DISABLED": ()=>DISABLED,
    "NO_NETWORK": ()=>NO_NETWORK,
    "PERSISTENT_ERROR": ()=>PERSISTENT_ERROR,
    "USER_CANCEL": ()=>USER_CANCEL,
    "USER_INTERACTION_REQUIRED": ()=>USER_INTERACTION_REQUIRED
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Status Codes that can be thrown by WAM
const USER_INTERACTION_REQUIRED = "USER_INTERACTION_REQUIRED";
const USER_CANCEL = "USER_CANCEL";
const NO_NETWORK = "NO_NETWORK";
const PERSISTENT_ERROR = "PERSISTENT_ERROR";
const DISABLED = "DISABLED";
const ACCOUNT_UNAVAILABLE = "ACCOUNT_UNAVAILABLE";
;
 //# sourceMappingURL=NativeStatusCodes.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NativeAuthError": ()=>NativeAuthError,
    "NativeAuthErrorMessages": ()=>NativeAuthErrorMessages,
    "createNativeAuthError": ()=>createNativeAuthError,
    "isFatalNativeAuthError": ()=>isFatalNativeAuthError
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as InteractionRequiredAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const INVALID_METHOD_ERROR = -2147186943;
const NativeAuthErrorMessages = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userSwitch"]]: "User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again."
};
class NativeAuthError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"] {
    constructor(errorCode, description, ext){
        super(errorCode, description);
        Object.setPrototypeOf(this, NativeAuthError.prototype);
        this.name = "NativeAuthError";
        this.ext = ext;
    }
}
/**
 * These errors should result in a fallback to the 'standard' browser based auth flow.
 */ function isFatalNativeAuthError(error) {
    if (error.ext && error.ext.status && (error.ext.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PERSISTENT_ERROR"] || error.ext.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DISABLED"])) {
        return true;
    }
    if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) {
        return true;
    }
    switch(error.errorCode){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contentError"]:
            return true;
        default:
            return false;
    }
}
/**
 * Create the appropriate error object based on the WAM status code.
 * @param code
 * @param description
 * @param ext
 * @returns
 */ function createNativeAuthError(code, description, ext) {
    if (ext && ext.status) {
        switch(ext.status){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ACCOUNT_UNAVAILABLE"]:
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createInteractionRequiredAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__["InteractionRequiredAuthErrorCodes"].nativeAccountUnavailable);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["USER_INTERACTION_REQUIRED"]:
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["InteractionRequiredAuthError"](code, description);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["USER_CANCEL"]:
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeStatusCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NO_NETWORK"]:
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noNetworkConnectivity"]);
        }
    }
    return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);
}
;
 //# sourceMappingURL=NativeAuthError.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "SilentCacheClient": ()=>SilentCacheClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$SilentFlowClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentCacheClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    /**
     * Returns unexpired tokens from the cache, if available
     * @param silentRequest
     */ async acquireToken(silentRequest) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentCacheClientAcquireToken, silentRequest.correlationId);
        // Telemetry manager only used to increment cacheHits here
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenSilent_silentFlow);
        const clientConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.getClientConfiguration.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);
        const silentAuthClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$SilentFlowClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentFlowClient"](clientConfig, this.performanceClient);
        this.logger.verbose("Silent auth client created");
        try {
            const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(silentAuthClient.acquireCachedToken.bind(silentAuthClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);
            const authResponse = response[0];
            this.performanceClient.addFields({
                fromCache: true
            }, silentRequest.correlationId);
            return authResponse;
        } catch (error) {
            if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BrowserAuthError"] && error.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cryptoKeyNotFound"]) {
                this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.");
            }
            throw error;
        }
    }
    /**
     * API to silenty clear the browser cache.
     * @param logoutRequest
     */ logout(logoutRequest) {
        this.logger.verbose("logoutRedirect called");
        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
        return this.clearCacheOnLogout(validLogoutRequest?.account);
    }
}
;
 //# sourceMappingURL=SilentCacheClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NativeInteractionClient": ()=>NativeInteractionClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs [app-ssr] (ecmascript) <export * as TimeUtils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/request/ScopeSet.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AuthToken.mjs [app-ssr] (ecmascript) <export * as AuthToken>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$PopTokenGenerator$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AccountInfo$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AccountInfo.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs [app-ssr] (ecmascript) <export * as CacheHelpers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as AuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$constants$2f$AADServerParamKeys$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AADServerParamKeys$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs [app-ssr] (ecmascript) <export * as AADServerParamKeys>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$BaseInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentCacheClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BrokerServerParamKeys = {
    BROKER_CLIENT_ID: "brk_client_id",
    BROKER_REDIRECT_URI: "brk_redirect_uri"
};
class NativeInteractionClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$BaseInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseInteractionClient"] {
    constructor(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId){
        super(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);
        this.apiId = apiId;
        this.accountId = accountId;
        this.nativeMessageHandler = provider;
        this.nativeStorageManager = nativeStorageImpl;
        this.silentCacheClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentCacheClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentCacheClient"](config, this.nativeStorageManager, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);
    }
    /**
     * Acquire token from native platform via browser extension
     * @param request
     */ async acquireToken(request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].NativeInteractionClientAcquireToken, request.correlationId);
        this.logger.trace("NativeInteractionClient - acquireToken called.");
        // start the perf measurement
        const nativeATMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].NativeInteractionClientAcquireToken, request.correlationId);
        const reqTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].nowSeconds();
        // initialize native request
        const nativeRequest = await this.initializeNativeRequest(request);
        // check if the tokens can be retrieved from internal cache
        try {
            const result = await this.acquireTokensFromCache(this.accountId, nativeRequest);
            nativeATMeasurement.end({
                success: true,
                isNativeBroker: false,
                fromCache: true
            });
            return result;
        } catch (e) {
            // continue with a native call for any and all errors
            this.logger.info("MSAL internal Cache does not contain tokens, proceed to make a native call");
        }
        const { ...nativeTokenRequest } = nativeRequest;
        // fall back to native calls
        const messageBody = {
            method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].GetToken,
            request: nativeTokenRequest
        };
        const response = await this.nativeMessageHandler.sendMessage(messageBody);
        const validatedResponse = this.validateNativeResponse(response);
        return this.handleNativeResponse(validatedResponse, nativeRequest, reqTimestamp).then((result)=>{
            nativeATMeasurement.end({
                success: true,
                isNativeBroker: true,
                requestId: result.requestId
            });
            return result;
        }).catch((error)=>{
            nativeATMeasurement.end({
                success: false,
                errorCode: error.errorCode,
                subErrorCode: error.subError,
                isNativeBroker: true
            });
            throw error;
        });
    }
    /**
     * Creates silent flow request
     * @param request
     * @param cachedAccount
     * @returns CommonSilentFlowRequest
     */ createSilentCacheRequest(request, cachedAccount) {
        return {
            authority: request.authority,
            correlationId: this.correlationId,
            scopes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(request.scope).asArray(),
            account: cachedAccount,
            forceRefresh: false
        };
    }
    /**
     * Fetches the tokens from the cache if un-expired
     * @param nativeAccountId
     * @param request
     * @returns authenticationResult
     */ async acquireTokensFromCache(nativeAccountId, request) {
        if (!nativeAccountId) {
            this.logger.warning("NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided");
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].noAccountFound);
        }
        // fetch the account from browser cache
        const account = this.browserStorage.getBaseAccountInfo({
            nativeAccountId
        });
        if (!account) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].noAccountFound);
        }
        // leverage silent flow for cached tokens retrieval
        try {
            const silentRequest = this.createSilentCacheRequest(request, account);
            const result = await this.silentCacheClient.acquireToken(silentRequest);
            const fullAccount = {
                ...account,
                idTokenClaims: result?.idTokenClaims,
                idToken: result?.idToken
            };
            return {
                ...result,
                account: fullAccount
            };
        } catch (e) {
            throw e;
        }
    }
    /**
     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response
     * @param {RedirectRequest} request
     * @param {InProgressPerformanceEvent} rootMeasurement
     */ async acquireTokenRedirect(request, rootMeasurement) {
        this.logger.trace("NativeInteractionClient - acquireTokenRedirect called.");
        const nativeRequest = await this.initializeNativeRequest(request);
        const { ...nativeTokenRequest } = nativeRequest;
        const messageBody = {
            method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].GetToken,
            request: nativeTokenRequest
        };
        try {
            const response = await this.nativeMessageHandler.sendMessage(messageBody);
            this.validateNativeResponse(response);
        } catch (e) {
            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                throw e;
            }
        }
        this.browserStorage.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].NATIVE_REQUEST, JSON.stringify(nativeRequest), true);
        const navigationOptions = {
            apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenRedirect,
            timeout: this.config.system.redirectNavigationTimeout,
            noHistory: false
        };
        const redirectUri = this.config.auth.navigateToLoginRequestUrl ? window.location.href : this.getRedirectUri(request.redirectUri);
        rootMeasurement.end({
            success: true
        });
        await this.navigationClient.navigateExternal(redirectUri, navigationOptions); // Need to treat this as external to ensure handleRedirectPromise is run again
    }
    /**
     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response
     * @param performanceClient {IPerformanceClient?}
     * @param correlationId {string?} correlation identifier
     */ async handleRedirectPromise(performanceClient, correlationId) {
        this.logger.trace("NativeInteractionClient - handleRedirectPromise called.");
        if (!this.browserStorage.isInteractionInProgress(true)) {
            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
            return null;
        }
        // remove prompt from the request to prevent WAM from prompting twice
        const cachedRequest = this.browserStorage.getCachedNativeRequest();
        if (!cachedRequest) {
            this.logger.verbose("NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.");
            if (performanceClient && correlationId) {
                performanceClient?.addFields({
                    errorCode: "no_cached_request"
                }, correlationId);
            }
            return null;
        }
        const { prompt, ...request } = cachedRequest;
        if (prompt) {
            this.logger.verbose("NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.");
        }
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].NATIVE_REQUEST));
        const messageBody = {
            method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].GetToken,
            request: request
        };
        const reqTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].nowSeconds();
        try {
            this.logger.verbose("NativeInteractionClient - handleRedirectPromise sending message to native broker.");
            const response = await this.nativeMessageHandler.sendMessage(messageBody);
            this.validateNativeResponse(response);
            const result = this.handleNativeResponse(response, request, reqTimestamp);
            this.browserStorage.setInteractionInProgress(false);
            return await result;
        } catch (e) {
            this.browserStorage.setInteractionInProgress(false);
            throw e;
        }
    }
    /**
     * Logout from native platform via browser extension
     * @param request
     */ logout() {
        this.logger.trace("NativeInteractionClient - logout called.");
        return Promise.reject("Logout not implemented yet");
    }
    /**
     * Transform response from native platform into AuthenticationResult object which will be returned to the end user
     * @param response
     * @param request
     * @param reqTimestamp
     */ async handleNativeResponse(response, request, reqTimestamp) {
        this.logger.trace("NativeInteractionClient - handleNativeResponse called.");
        // generate identifiers
        const idTokenClaims = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__["AuthToken"].extractTokenClaims(response.id_token, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"]);
        const homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenClaims);
        const cachedhomeAccountId = this.browserStorage.getAccountInfoFilteredBy({
            nativeAccountId: request.accountId
        })?.homeAccountId;
        if (homeAccountIdentifier !== cachedhomeAccountId && response.account.id !== request.accountId) {
            // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNativeAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userSwitch"]);
        }
        // Get the preferred_cache domain for the given authority
        const authority = await this.getDiscoveredAuthority(request.authority);
        const baseAccount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildAccountToCache"])(this.browserStorage, authority, homeAccountIdentifier, idTokenClaims, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"], response.client_info, undefined, idTokenClaims.tid, undefined, response.account.id, this.logger);
        // generate authenticationResult
        const result = await this.generateAuthenticationResult(response, request, idTokenClaims, baseAccount, authority.canonicalAuthority, reqTimestamp);
        // cache accounts and tokens in the appropriate storage
        this.cacheAccount(baseAccount);
        this.cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, response.access_token, result.tenantId, reqTimestamp);
        return result;
    }
    /**
     * creates an homeAccountIdentifier for the account
     * @param response
     * @param idTokenObj
     * @returns
     */ createHomeAccountIdentifier(response, idTokenClaims) {
        // Save account in browser storage
        const homeAccountIdentifier = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].generateHomeAccountId(response.client_info || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$AuthorityType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthorityType"].Default, this.logger, this.browserCrypto, idTokenClaims);
        return homeAccountIdentifier;
    }
    /**
     * Helper to generate scopes
     * @param response
     * @param request
     * @returns
     */ generateScopes(response, request) {
        return response.scope ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(response.scope) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(request.scope);
    }
    /**
     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser
     * @param request
     * @param response
     */ async generatePopAccessToken(response, request) {
        if (request.tokenType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP && request.signPopToken) {
            /**
             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT
             * is still received, SHR is calculated locally
             */ // Check if native layer returned an SHR token
            if (response.shr) {
                this.logger.trace("handleNativeServerResponse: SHR is enabled in native layer");
                return response.shr;
            }
            // Generate SHR in msal js if WAM does not compute it when POP is enabled
            const popTokenGenerator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$PopTokenGenerator$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PopTokenGenerator"](this.browserCrypto);
            const shrParameters = {
                resourceRequestMethod: request.resourceRequestMethod,
                resourceRequestUri: request.resourceRequestUri,
                shrClaims: request.shrClaims,
                shrNonce: request.shrNonce
            };
            /**
             * KeyID must be present in the native request from when the PoP key was generated in order for
             * PopTokenGenerator to query the full key for signing
             */ if (!request.keyId) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].keyIdMissing);
            }
            return popTokenGenerator.signPopToken(response.access_token, request.keyId, shrParameters);
        } else {
            return response.access_token;
        }
    }
    /**
     * Generates authentication result
     * @param response
     * @param request
     * @param idTokenObj
     * @param accountEntity
     * @param authority
     * @param reqTimestamp
     * @returns
     */ async generateAuthenticationResult(response, request, idTokenClaims, accountEntity, authority, reqTimestamp) {
        // Add Native Broker fields to Telemetry
        const mats = this.addTelemetryFromNativeResponse(response);
        // If scopes not returned in server response, use request scopes
        const responseScopes = response.scope ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(response.scope) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(request.scope);
        const accountProperties = response.account.properties || {};
        const uid = accountProperties["UID"] || idTokenClaims.oid || idTokenClaims.sub || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        const tid = accountProperties["TenantId"] || idTokenClaims.tid || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        const accountInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AccountInfo$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["updateAccountTenantProfileData"])(accountEntity.getAccountInfo(), undefined, idTokenClaims, response.id_token);
        /**
         * In pairwise broker flows, this check prevents the broker's native account id
         * from being returned over the embedded app's account id.
         */ if (accountInfo.nativeAccountId !== response.account.id) {
            accountInfo.nativeAccountId = response.account.id;
        }
        // generate PoP token as needed
        const responseAccessToken = await this.generatePopAccessToken(response, request);
        const tokenType = request.tokenType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER;
        const result = {
            authority: authority,
            uniqueId: uid,
            tenantId: tid,
            scopes: responseScopes.asArray(),
            account: accountInfo,
            idToken: response.id_token,
            idTokenClaims: idTokenClaims,
            accessToken: responseAccessToken,
            fromCache: mats ? this.isResponseFromCache(mats) : false,
            expiresOn: new Date(Number(reqTimestamp + response.expires_in) * 1000),
            tokenType: tokenType,
            correlationId: this.correlationId,
            state: response.state,
            fromNativeBroker: true
        };
        return result;
    }
    /**
     * cache the account entity in browser storage
     * @param accountEntity
     */ cacheAccount(accountEntity) {
        // Store the account info and hence `nativeAccountId` in browser cache
        this.browserStorage.setAccount(accountEntity);
        // Remove any existing cached tokens for this account in browser storage
        this.browserStorage.removeAccountContext(accountEntity).catch((e)=>{
            this.logger.error(`Error occurred while removing account context from browser storage. ${e}`);
        });
    }
    /**
     * Stores the access_token and id_token in inmemory storage
     * @param response
     * @param request
     * @param homeAccountIdentifier
     * @param idTokenObj
     * @param responseAccessToken
     * @param tenantId
     * @param reqTimestamp
     */ cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, responseAccessToken, tenantId, reqTimestamp) {
        const cachedIdToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createIdTokenEntity(homeAccountIdentifier, request.authority, response.id_token || "", request.clientId, idTokenClaims.tid || "");
        // cache accessToken in inmemory storage
        const expiresIn = request.tokenType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].SHR_NONCE_VALIDITY : (typeof response.expires_in === "string" ? parseInt(response.expires_in, 10) : response.expires_in) || 0;
        const tokenExpirationSeconds = reqTimestamp + expiresIn;
        const responseScopes = this.generateScopes(response, request);
        const cachedAccessToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createAccessTokenEntity(homeAccountIdentifier, request.authority, responseAccessToken, request.clientId, idTokenClaims.tid || tenantId, responseScopes.printScopes(), tokenExpirationSeconds, 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"], undefined, request.tokenType, undefined, request.keyId);
        const nativeCacheRecord = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheRecord"](undefined, cachedIdToken, cachedAccessToken);
        void this.nativeStorageManager.saveCacheRecord(nativeCacheRecord, request.storeInCache);
    }
    addTelemetryFromNativeResponse(response) {
        const mats = this.getMATSFromResponse(response);
        if (!mats) {
            return null;
        }
        this.performanceClient.addFields({
            extensionId: this.nativeMessageHandler.getExtensionId(),
            extensionVersion: this.nativeMessageHandler.getExtensionVersion(),
            matsBrokerVersion: mats.broker_version,
            matsAccountJoinOnStart: mats.account_join_on_start,
            matsAccountJoinOnEnd: mats.account_join_on_end,
            matsDeviceJoin: mats.device_join,
            matsPromptBehavior: mats.prompt_behavior,
            matsApiErrorCode: mats.api_error_code,
            matsUiVisible: mats.ui_visible,
            matsSilentCode: mats.silent_code,
            matsSilentBiSubCode: mats.silent_bi_sub_code,
            matsSilentMessage: mats.silent_message,
            matsSilentStatus: mats.silent_status,
            matsHttpStatus: mats.http_status,
            matsHttpEventCount: mats.http_event_count
        }, this.correlationId);
        return mats;
    }
    /**
     * Validates native platform response before processing
     * @param response
     */ validateNativeResponse(response) {
        if (response.hasOwnProperty("access_token") && response.hasOwnProperty("id_token") && response.hasOwnProperty("client_info") && response.hasOwnProperty("account") && response.hasOwnProperty("scope") && response.hasOwnProperty("expires_in")) {
            return response;
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthErrorCodes$3e$__["AuthErrorCodes"].unexpectedError, "Response missing expected properties.");
        }
    }
    /**
     * Gets MATS telemetry from native response
     * @param response
     * @returns
     */ getMATSFromResponse(response) {
        if (response.properties.MATS) {
            try {
                return JSON.parse(response.properties.MATS);
            } catch (e) {
                this.logger.error("NativeInteractionClient - Error parsing MATS telemetry, returning null instead");
            }
        }
        return null;
    }
    /**
     * Returns whether or not response came from native cache
     * @param response
     * @returns
     */ isResponseFromCache(mats) {
        if (typeof mats.is_cached === "undefined") {
            this.logger.verbose("NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.");
            return false;
        }
        return !!mats.is_cached;
    }
    /**
     * Translates developer provided request object into NativeRequest object
     * @param request
     */ async initializeNativeRequest(request) {
        this.logger.trace("NativeInteractionClient - initializeNativeRequest called");
        const authority = request.authority || this.config.auth.authority;
        if (request.account) {
            // validate authority
            await this.getDiscoveredAuthority(authority, request.azureCloudOptions, request.account);
        }
        const canonicalAuthority = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"](authority);
        canonicalAuthority.validateAsUri();
        // scopes are expected to be received by the native broker as "scope" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.
        const { scopes, ...remainingProperties } = request;
        const scopeSet = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"](scopes || []);
        scopeSet.appendScopes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OIDC_DEFAULT_SCOPES"]);
        const getPrompt = ()=>{
            // If request is silent, prompt is always none
            switch(this.apiId){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].ssoSilent:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenSilent_silentFlow:
                    this.logger.trace("initializeNativeRequest: silent request sets prompt to none");
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE;
            }
            // Prompt not provided, request may proceed and native broker decides if it needs to prompt
            if (!request.prompt) {
                this.logger.trace("initializeNativeRequest: prompt was not provided");
                return undefined;
            }
            // If request is interactive, check if prompt provided is allowed to go directly to native broker
            switch(request.prompt){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].CONSENT:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].LOGIN:
                    this.logger.trace("initializeNativeRequest: prompt is compatible with native flow");
                    return request.prompt;
                default:
                    this.logger.trace(`initializeNativeRequest: prompt = ${request.prompt} is not compatible with native flow`);
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativePromptNotSupported"]);
            }
        };
        const validatedRequest = {
            ...remainingProperties,
            accountId: this.accountId,
            clientId: this.config.auth.clientId,
            authority: canonicalAuthority.urlString,
            scope: scopeSet.printScopes(),
            redirectUri: this.getRedirectUri(request.redirectUri),
            prompt: getPrompt(),
            correlationId: this.correlationId,
            tokenType: request.authenticationScheme,
            windowTitleSubstring: document.title,
            extraParameters: {
                ...request.extraQueryParameters,
                ...request.tokenQueryParameters
            },
            extendedExpiryToken: false,
            keyId: request.popKid
        };
        // Check for PoP token requests: signPopToken should only be set to true if popKid is not set
        if (validatedRequest.signPopToken && !!request.popKid) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invalidPopTokenRequest"]);
        }
        this.handleExtraBrokerParams(validatedRequest);
        validatedRequest.extraParameters = validatedRequest.extraParameters || {};
        validatedRequest.extraParameters.telemetry = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeConstants"].MATS_TELEMETRY;
        if (request.authenticationScheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP) {
            // add POP request type
            const shrParameters = {
                resourceRequestUri: request.resourceRequestUri,
                resourceRequestMethod: request.resourceRequestMethod,
                shrClaims: request.shrClaims,
                shrNonce: request.shrNonce
            };
            const popTokenGenerator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$PopTokenGenerator$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PopTokenGenerator"](this.browserCrypto);
            // generate reqCnf if not provided in the request
            let reqCnfData;
            if (!validatedRequest.keyId) {
                const generatedReqCnfData = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(popTokenGenerator.generateCnf.bind(popTokenGenerator), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(shrParameters, this.logger);
                reqCnfData = generatedReqCnfData.reqCnfString;
                validatedRequest.keyId = generatedReqCnfData.kid;
                validatedRequest.signPopToken = true;
            } else {
                reqCnfData = this.browserCrypto.base64UrlEncode(JSON.stringify({
                    kid: validatedRequest.keyId
                }));
                validatedRequest.signPopToken = false;
            }
            // SPAs require whole string to be passed to broker
            validatedRequest.reqCnf = reqCnfData;
        }
        return validatedRequest;
    }
    /**
     * Handles extra broker request parameters
     * @param request {NativeTokenRequest}
     * @private
     */ handleExtraBrokerParams(request) {
        if (!request.extraParameters) {
            return;
        }
        if (request.extraParameters.hasOwnProperty(BrokerServerParamKeys.BROKER_CLIENT_ID) && request.extraParameters.hasOwnProperty(BrokerServerParamKeys.BROKER_REDIRECT_URI) && request.extraParameters.hasOwnProperty(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$constants$2f$AADServerParamKeys$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AADServerParamKeys$3e$__["AADServerParamKeys"].CLIENT_ID)) {
            const child_client_id = request.extraParameters[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$constants$2f$AADServerParamKeys$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AADServerParamKeys$3e$__["AADServerParamKeys"].CLIENT_ID];
            const child_redirect_uri = request.redirectUri;
            const brk_redirect_uri = request.extraParameters[BrokerServerParamKeys.BROKER_REDIRECT_URI];
            request.extraParameters = {
                child_client_id,
                child_redirect_uri
            };
            request.redirectUri = brk_redirect_uri;
        }
    }
}
;
 //# sourceMappingURL=NativeInteractionClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NativeMessageHandler": ()=>NativeMessageHandler
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as AuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NativeMessageHandler {
    constructor(logger, handshakeTimeoutMs, performanceClient, extensionId){
        this.logger = logger;
        this.handshakeTimeoutMs = handshakeTimeoutMs;
        this.extensionId = extensionId;
        this.resolvers = new Map(); // Used for non-handshake messages
        this.handshakeResolvers = new Map(); // Used for handshake messages
        this.messageChannel = new MessageChannel();
        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound
        this.performanceClient = performanceClient;
        this.handshakeEvent = performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].NativeMessageHandlerHandshake);
    }
    /**
     * Sends a given message to the extension and resolves with the extension response
     * @param body
     */ async sendMessage(body) {
        this.logger.trace("NativeMessageHandler - sendMessage called.");
        const req = {
            channel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeConstants"].CHANNEL_ID,
            extensionId: this.extensionId,
            responseId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
            body: body
        };
        this.logger.trace("NativeMessageHandler - Sending request to browser extension");
        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);
        this.messageChannel.port1.postMessage(req);
        return new Promise((resolve, reject)=>{
            this.resolvers.set(req.responseId, {
                resolve,
                reject
            });
        });
    }
    /**
     * Returns an instance of the MessageHandler that has successfully established a connection with an extension
     * @param {Logger} logger
     * @param {number} handshakeTimeoutMs
     * @param {IPerformanceClient} performanceClient
     * @param {ICrypto} crypto
     */ static async createProvider(logger, handshakeTimeoutMs, performanceClient) {
        logger.trace("NativeMessageHandler - createProvider called.");
        try {
            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeConstants"].PREFERRED_EXTENSION_ID);
            await preferredProvider.sendHandshakeRequest();
            return preferredProvider;
        } catch (e) {
            // If preferred extension fails for whatever reason, fallback to using any installed extension
            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);
            await backupProvider.sendHandshakeRequest();
            return backupProvider;
        }
    }
    /**
     * Send handshake request helper.
     */ async sendHandshakeRequest() {
        this.logger.trace("NativeMessageHandler - sendHandshakeRequest called.");
        // Register this event listener before sending handshake
        window.addEventListener("message", this.windowListener, false); // false is important, because content script message processing should work first
        const req = {
            channel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeConstants"].CHANNEL_ID,
            extensionId: this.extensionId,
            responseId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])(),
            body: {
                method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].HandshakeRequest
            }
        };
        this.handshakeEvent.add({
            extensionId: this.extensionId,
            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs
        });
        this.messageChannel.port1.onmessage = (event)=>{
            this.onChannelMessage(event);
        };
        window.postMessage(req, window.origin, [
            this.messageChannel.port2
        ]);
        return new Promise((resolve, reject)=>{
            this.handshakeResolvers.set(req.responseId, {
                resolve,
                reject
            });
            this.timeoutId = window.setTimeout(()=>{
                /*
                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.
                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port
                 */ window.removeEventListener("message", this.windowListener, false);
                this.messageChannel.port1.close();
                this.messageChannel.port2.close();
                this.handshakeEvent.end({
                    extensionHandshakeTimedOut: true,
                    success: false
                });
                reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeHandshakeTimeout"]));
                this.handshakeResolvers.delete(req.responseId);
            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here
        });
    }
    /**
     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.
     * @param event
     */ onWindowMessage(event) {
        this.logger.trace("NativeMessageHandler - onWindowMessage called");
        // We only accept messages from ourselves
        if (event.source !== window) {
            return;
        }
        const request = event.data;
        if (!request.channel || request.channel !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeConstants"].CHANNEL_ID) {
            return;
        }
        if (request.extensionId && request.extensionId !== this.extensionId) {
            return;
        }
        if (request.body.method === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].HandshakeRequest) {
            const handshakeResolver = this.handshakeResolvers.get(request.responseId);
            /*
             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for
             * the proper response.
             */ if (!handshakeResolver) {
                this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`);
                return;
            }
            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed
            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : "No extension installed");
            clearTimeout(this.timeoutId);
            this.messageChannel.port1.close();
            this.messageChannel.port2.close();
            window.removeEventListener("message", this.windowListener, false);
            this.handshakeEvent.end({
                success: false,
                extensionInstalled: false
            });
            handshakeResolver.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeExtensionNotInstalled"]));
        }
    }
    /**
     * Invoked when a message is received from the extension on the MessageChannel port
     * @param event
     */ onChannelMessage(event) {
        this.logger.trace("NativeMessageHandler - onChannelMessage called.");
        const request = event.data;
        const resolver = this.resolvers.get(request.responseId);
        const handshakeResolver = this.handshakeResolvers.get(request.responseId);
        try {
            const method = request.body.method;
            if (method === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].Response) {
                if (!resolver) {
                    return;
                }
                const response = request.body.response;
                this.logger.trace("NativeMessageHandler - Received response from browser extension");
                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);
                if (response.status !== "Success") {
                    resolver.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNativeAuthError"])(response.code, response.description, response.ext));
                } else if (response.result) {
                    if (response.result["code"] && response.result["description"]) {
                        resolver.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNativeAuthError"])(response.result["code"], response.result["description"], response.result["ext"]));
                    } else {
                        resolver.resolve(response.result);
                    }
                } else {
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthErrorCodes$3e$__["AuthErrorCodes"].unexpectedError, "Event does not contain result.");
                }
                this.resolvers.delete(request.responseId);
            } else if (method === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeExtensionMethod"].HandshakeResponse) {
                if (!handshakeResolver) {
                    this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`);
                    return;
                }
                clearTimeout(this.timeoutId); // Clear setTimeout
                window.removeEventListener("message", this.windowListener, false); // Remove 'No extension' listener
                this.extensionId = request.extensionId;
                this.extensionVersion = request.body.version;
                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);
                this.handshakeEvent.end({
                    extensionInstalled: true,
                    success: true
                });
                handshakeResolver.resolve();
                this.handshakeResolvers.delete(request.responseId);
            }
        // Do nothing if method is not Response or HandshakeResponse
        } catch (err) {
            this.logger.error("Error parsing response from WAM Extension");
            this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);
            this.logger.errorPii(`Unable to parse ${event}`);
            if (resolver) {
                resolver.reject(err);
            } else if (handshakeResolver) {
                handshakeResolver.reject(err);
            }
        }
    }
    /**
     * Returns the Id for the browser extension this handler is communicating with
     * @returns
     */ getExtensionId() {
        return this.extensionId;
    }
    /**
     * Returns the version for the browser extension this handler is communicating with
     * @returns
     */ getExtensionVersion() {
        return this.extensionVersion;
    }
    /**
     * Returns boolean indicating whether or not the request should attempt to use native broker
     * @param logger
     * @param config
     * @param nativeExtensionProvider
     * @param authenticationScheme
     */ static isNativeAvailable(config, logger, nativeExtensionProvider, authenticationScheme) {
        logger.trace("isNativeAvailable called");
        if (!config.system.allowNativeBroker) {
            logger.trace("isNativeAvailable: allowNativeBroker is not enabled, returning false");
            // Developer disabled WAM
            return false;
        }
        if (!nativeExtensionProvider) {
            logger.trace("isNativeAvailable: WAM extension provider is not initialized, returning false");
            // Extension is not available
            return false;
        }
        if (authenticationScheme) {
            switch(authenticationScheme){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].POP:
                    logger.trace("isNativeAvailable: authenticationScheme is supported, returning true");
                    return true;
                default:
                    logger.trace("isNativeAvailable: authenticationScheme is not supported, returning false");
                    return false;
            }
        }
        return true;
    }
}
;
 //# sourceMappingURL=NativeMessageHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "InteractionHandler": ()=>InteractionHandler
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ServerError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/CcsCredential.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Abstract class which defines operations for a browser interaction handling class.
 */ class InteractionHandler {
    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
        this.logger = logger;
        this.performanceClient = performanceClient;
    }
    /**
     * Function to handle response parameters from hash.
     * @param locationHash
     */ async handleCodeResponse(response, request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleCodeResponse, request.correlationId);
        let authCodeResponse;
        try {
            authCodeResponse = this.authModule.handleFragmentResponse(response, request.state);
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerError"] && e.subError === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]) {
                // Translate server error caused by user closing native prompt to corresponding first class MSAL error
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]);
            } else {
                throw e;
            }
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.handleCodeResponseFromServer.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)(authCodeResponse, request);
    }
    /**
     * Process auth code response from AAD
     * @param authCodeResponse
     * @param state
     * @param authority
     * @param networkModule
     * @returns
     */ async handleCodeResponseFromServer(authCodeResponse, request, validateNonce = true) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleCodeResponseFromServer, request.correlationId);
        this.logger.trace("InteractionHandler.handleCodeResponseFromServer called");
        // Assign code to request
        this.authCodeRequest.code = authCodeResponse.code;
        // Check for new cloud instance
        if (authCodeResponse.cloud_instance_host_name) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.authModule.updateAuthority.bind(this.authModule), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].UpdateTokenEndpointAuthority, this.logger, this.performanceClient, request.correlationId)(authCodeResponse.cloud_instance_host_name, request.correlationId);
        }
        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)
        if (validateNonce) {
            // TODO: Assigning "response nonce" to "request nonce" is confusing. Refactor the function doing validation to accept request nonce directly
            authCodeResponse.nonce = request.nonce || undefined;
        }
        authCodeResponse.state = request.state;
        // Add CCS parameters if available
        if (authCodeResponse.client_info) {
            this.authCodeRequest.clientInfo = authCodeResponse.client_info;
        } else {
            const ccsCred = this.createCcsCredentials(request);
            if (ccsCred) {
                this.authCodeRequest.ccsCredential = ccsCred;
            }
        }
        // Acquire token with retrieved code.
        const tokenResponse = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.authModule.acquireToken.bind(this.authModule), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AuthClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(this.authCodeRequest, authCodeResponse);
        return tokenResponse;
    }
    /**
     * Build ccs creds if available
     */ createCcsCredentials(request) {
        if (request.account) {
            return {
                credential: request.account.homeAccountId,
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CcsCredentialType"].HOME_ACCOUNT_ID
            };
        } else if (request.loginHint) {
            return {
                credential: request.loginHint,
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$CcsCredential$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CcsCredentialType"].UPN
            };
        }
        return null;
    }
}
;
 //# sourceMappingURL=InteractionHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "deserializeResponse": ()=>deserializeResponse,
    "validateInteractionType": ()=>validateInteractionType
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs [app-ssr] (ecmascript) <export * as UrlUtils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function deserializeResponse(responseString, responseLocation, logger) {
    // Deserialize hash fragment response parameters.
    const serverParams = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__["UrlUtils"].getDeserializedResponse(responseString);
    if (!serverParams) {
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__["UrlUtils"].stripLeadingHashOrQuery(responseString)) {
            // Hash or Query string is empty
            logger.error(`The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`);
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashEmptyError"]);
        } else {
            logger.error(`A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`);
            logger.errorPii(`The ${responseLocation} detected is: ${responseString}`);
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashDoesNotContainKnownProperties"]);
        }
    }
    return serverParams;
}
/**
 * Returns the interaction type that the response object belongs to
 */ function validateInteractionType(response, browserCrypto, interactionType) {
    if (!response.state) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noStateInHash"]);
    }
    const platformStateObj = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["extractBrowserRequestState"])(browserCrypto, response.state);
    if (!platformStateObj) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToParseState"]);
    }
    if (platformStateObj.interactionType !== interactionType) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateInteractionTypeMismatch"]);
    }
}
;
 //# sourceMappingURL=ResponseHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "PopupClient": ()=>PopupClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$ThrottlingUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class PopupClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);
        // Properly sets this reference for the unload event.
        this.unloadWindow = this.unloadWindow.bind(this);
        this.nativeStorage = nativeStorageImpl;
    }
    /**
     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
     * @param request
     */ acquireToken(request) {
        try {
            const popupName = this.generatePopupName(request.scopes || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OIDC_DEFAULT_SCOPES"], request.authority || this.config.auth.authority);
            const popupWindowAttributes = request.popupWindowAttributes || {};
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true, acquiring token");
                // Passes on popup position and dimensions if in request
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);
            } else {
                // asyncPopups flag is set to false. Opens popup before acquiring token.
                this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                const popup = this.openSizedPopup("about:blank", popupName, popupWindowAttributes);
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);
            }
        } catch (e) {
            return Promise.reject(e);
        }
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logout(logoutRequest) {
        try {
            this.logger.verbose("logoutPopup called");
            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
            const popupName = this.generateLogoutPopupName(validLogoutRequest);
            const authority = logoutRequest && logoutRequest.authority;
            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true");
                // Passes on popup position and dimensions if in request
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);
            } else {
                // asyncPopups flag is set to false. Opens popup before logging out.
                this.logger.verbose("asyncPopup set to false, opening popup");
                const popup = this.openSizedPopup("about:blank", popupName, popupWindowAttributes);
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);
            }
        } catch (e) {
            // Since this function is synchronous we need to reject
            return Promise.reject(e);
        }
    }
    /**
     * Helper which obtains an access_token for your API via opening a popup window in the user's browser
     * @param validRequest
     * @param popupName
     * @param popup
     * @param popupWindowAttributes
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup) {
        this.logger.verbose("acquireTokenPopupAsync called");
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenPopup);
        const validRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["preconnect"])(validRequest.authority);
        try {
            // Create auth code request and generate PKCE params
            const authCodeRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationCodeRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);
            // Initialize the client
            const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions, validRequest.account);
            const isNativeBroker = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);
            // Start measurement for server calls with native brokering enabled
            let fetchNativeAccountIdMeasurement;
            if (isNativeBroker) {
                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].FetchAccountIdWithNativeBroker, request.correlationId);
            }
            // Create acquire token url.
            const navigateUrl = await authClient.getAuthCodeUrl({
                ...validRequest,
                nativeBroker: isNativeBroker
            });
            // Create popup interaction handler.
            const interactionHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionHandler"](authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
            // Show the UI once the url has been created. Get the window handle for the popup.
            const popupParameters = {
                popup,
                popupName,
                popupWindowAttributes
            };
            const popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].POPUP_OPENED, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, {
                popupWindow
            }, null);
            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
            const responseString = await this.monitorPopupForHash(popupWindow);
            const serverParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deserializeResponse"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);
            // Remove throttle if it exists
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$ThrottlingUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ThrottlingUtils"].removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);
            if (serverParams.accountId) {
                this.logger.verbose("Account id found in hash, calling WAM for token");
                // end measurement for server call with native brokering enabled
                if (fetchNativeAccountIdMeasurement) {
                    fetchNativeAccountIdMeasurement.end({
                        success: true,
                        isNativeBroker: true
                    });
                }
                if (!this.nativeMessageHandler) {
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]);
                }
                const nativeInteractionClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);
                const { userRequestState } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.browserCrypto, validRequest.state);
                return await nativeInteractionClient.acquireToken({
                    ...validRequest,
                    state: userRequestState,
                    prompt: undefined
                });
            }
            // Handle response from hash string.
            const result = await interactionHandler.handleCodeResponse(serverParams, validRequest);
            return result;
        } catch (e) {
            if (popup) {
                // Close the synchronous popup if an error is thrown before the window unload event is registered
                popup.close();
            }
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     *
     * @param validRequest
     * @param popupName
     * @param requestAuthority
     * @param popup
     * @param mainWindowRedirectUri
     * @param popupWindowAttributes
     */ async logoutPopupAsync(validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {
        this.logger.verbose("logoutPopupAsync called");
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, validRequest);
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].logoutPopup);
        try {
            // Clear cache on logout
            await this.clearCacheOnLogout(validRequest.account);
            // Initialize the client
            const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, requestAuthority, undefined, validRequest.account || undefined);
            try {
                authClient.authority.endSessionEndpoint;
            } catch  {
                if (validRequest.account?.homeAccountId && validRequest.postLogoutRedirectUri && authClient.authority.protocolMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolMode"].OIDC) {
                    void this.browserStorage.removeAccount(validRequest.account?.homeAccountId);
                    this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, validRequest);
                    if (mainWindowRedirectUri) {
                        const navigationOptions = {
                            apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].logoutPopup,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: false
                        };
                        const absoluteUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(mainWindowRedirectUri, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
                        await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                    }
                    if (popup) {
                        popup.close();
                    }
                    return;
                }
            }
            // Create logout string and navigate user window to logout.
            const logoutUri = authClient.getLogoutUri(validRequest);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, validRequest);
            // Open the popup window to requestUrl.
            const popupWindow = this.openPopup(logoutUri, {
                popupName,
                popupWindowAttributes,
                popup
            });
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].POPUP_OPENED, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, {
                popupWindow
            }, null);
            await this.monitorPopupForHash(popupWindow).catch(()=>{
            // Swallow any errors related to monitoring the window. Server logout is best effort
            });
            if (mainWindowRedirectUri) {
                const navigationOptions = {
                    apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].logoutPopup,
                    timeout: this.config.system.redirectNavigationTimeout,
                    noHistory: false
                };
                const absoluteUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(mainWindowRedirectUri, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
                this.logger.verbose("Redirecting main window to url specified in the request");
                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);
                await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
            } else {
                this.logger.verbose("No main window navigation requested");
            }
        } catch (e) {
            if (popup) {
                // Close the synchronous popup if an error is thrown before the window unload event is registered
                popup.close();
            }
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            this.browserStorage.setInteractionInProgress(false);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, null, e);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup);
            throw e;
        }
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup);
    }
    /**
     * Opens a popup window with given request Url.
     * @param requestUrl
     */ initiateAuthRequest(requestUrl, params) {
        // Check that request url is not empty.
        if (requestUrl) {
            this.logger.infoPii(`Navigate to: ${requestUrl}`);
            // Open the popup window to requestUrl.
            return this.openPopup(requestUrl, params);
        } else {
            // Throw error if request URL is empty.
            this.logger.error("Navigate url is empty");
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"]);
        }
    }
    /**
     * Monitors a window until it loads a url with the same origin.
     * @param popupWindow - window that is being monitored
     * @param timeout - timeout for processing hash once popup is redirected back to application
     */ monitorPopupForHash(popupWindow) {
        return new Promise((resolve, reject)=>{
            this.logger.verbose("PopupHandler.monitorPopupForHash - polling started");
            const intervalId = setInterval(()=>{
                // Window is closed
                if (popupWindow.closed) {
                    this.logger.error("PopupHandler.monitorPopupForHash - window closed");
                    clearInterval(intervalId);
                    reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]));
                    return;
                }
                let href = "";
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */ href = popupWindow.location.href;
                } catch (e) {}
                // Don't process blank pages or cross domain
                if (!href || href === "about:blank") {
                    return;
                }
                clearInterval(intervalId);
                let responseString = "";
                const responseType = this.config.auth.OIDCOptions.serverResponseType;
                if (popupWindow) {
                    if (responseType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerResponseType"].QUERY) {
                        responseString = popupWindow.location.search;
                    } else {
                        responseString = popupWindow.location.hash;
                    }
                }
                this.logger.verbose("PopupHandler.monitorPopupForHash - popup window is on same origin as caller");
                resolve(responseString);
            }, this.config.system.pollIntervalMilliseconds);
        }).finally(()=>{
            this.cleanPopup(popupWindow);
        });
    }
    /**
     * @hidden
     *
     * Configures popup window for login.
     *
     * @param urlNavigate
     * @param title
     * @param popUpWidth
     * @param popUpHeight
     * @param popupWindowAttributes
     * @ignore
     * @hidden
     */ openPopup(urlNavigate, popupParams) {
        try {
            let popupWindow;
            // Popup window passed in, setting url to navigate to
            if (popupParams.popup) {
                popupWindow = popupParams.popup;
                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);
                popupWindow.location.assign(urlNavigate);
            } else if (typeof popupParams.popup === "undefined") {
                // Popup will be undefined if it was not passed in
                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);
                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);
            }
            // Popup will be null if popups are blocked
            if (!popupWindow) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyWindowError"]);
            }
            if (popupWindow.focus) {
                popupWindow.focus();
            }
            this.currentWindow = popupWindow;
            window.addEventListener("beforeunload", this.unloadWindow);
            return popupWindow;
        } catch (e) {
            this.logger.error("error opening popup " + e.message);
            this.browserStorage.setInteractionInProgress(false);
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["popupWindowError"]);
        }
    }
    /**
     * Helper function to set popup window dimensions and position
     * @param urlNavigate
     * @param popupName
     * @param popupWindowAttributes
     * @returns
     */ openSizedPopup(urlNavigate, popupName, popupWindowAttributes) {
        /**
         * adding winLeft and winTop to account for dual monitor
         * using screenLeft and screenTop for IE8 and earlier
         */ const winLeft = window.screenLeft ? window.screenLeft : window.screenX;
        const winTop = window.screenTop ? window.screenTop : window.screenY;
        /**
         * window.innerWidth displays browser window"s height and width excluding toolbars
         * using document.documentElement.clientWidth for IE8 and earlier
         */ const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        let width = popupWindowAttributes.popupSize?.width;
        let height = popupWindowAttributes.popupSize?.height;
        let top = popupWindowAttributes.popupPosition?.top;
        let left = popupWindowAttributes.popupPosition?.left;
        if (!width || width < 0 || width > winWidth) {
            this.logger.verbose("Default popup window width used. Window width not configured or invalid.");
            width = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_WIDTH;
        }
        if (!height || height < 0 || height > winHeight) {
            this.logger.verbose("Default popup window height used. Window height not configured or invalid.");
            height = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_HEIGHT;
        }
        if (!top || top < 0 || top > winHeight) {
            this.logger.verbose("Default popup window top position used. Window top not configured or invalid.");
            top = Math.max(0, winHeight / 2 - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_HEIGHT / 2 + winTop);
        }
        if (!left || left < 0 || left > winWidth) {
            this.logger.verbose("Default popup window left position used. Window left not configured or invalid.");
            left = Math.max(0, winWidth / 2 - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_WIDTH / 2 + winLeft);
        }
        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);
    }
    /**
     * Event callback to unload main window.
     */ unloadWindow(e) {
        this.browserStorage.cleanRequestByInteractionType(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup);
        if (this.currentWindow) {
            this.currentWindow.close();
        }
        // Guarantees browser unload will happen, so no other errors will be thrown.
        e.preventDefault();
    }
    /**
     * Closes popup, removes any state vars created during popup calls.
     * @param popupWindow
     */ cleanPopup(popupWindow) {
        if (popupWindow) {
            // Close window.
            popupWindow.close();
        }
        // Remove window unload function
        window.removeEventListener("beforeunload", this.unloadWindow);
        // Interaction is completed - remove interaction status.
        this.browserStorage.setInteractionInProgress(false);
    }
    /**
     * Generates the name for the popup based on the client id and request
     * @param clientId
     * @param request
     */ generatePopupName(scopes, authority) {
        return `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join("-")}.${authority}.${this.correlationId}`;
    }
    /**
     * Generates the name for the popup based on the client id and request for logouts
     * @param clientId
     * @param request
     */ generateLogoutPopupName(request) {
        const homeAccountId = request.account && request.account.homeAccountId;
        return `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;
    }
}
;
 //# sourceMappingURL=PopupClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "RedirectHandler": ()=>RedirectHandler
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ServerError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class RedirectHandler {
    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
        this.logger = logger;
        this.performanceClient = performanceClient;
    }
    /**
     * Redirects window to given URL.
     * @param urlNavigate
     */ async initiateAuthRequest(requestUrl, params) {
        this.logger.verbose("RedirectHandler.initiateAuthRequest called");
        // Navigate if valid URL
        if (requestUrl) {
            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
            if (params.redirectStartPage) {
                this.logger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page");
                this.browserStorage.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].ORIGIN_URI, params.redirectStartPage, true);
            }
            // Set interaction status in the library.
            this.browserStorage.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CORRELATION_ID, this.authCodeRequest.correlationId, true);
            this.browserStorage.cacheCodeRequest(this.authCodeRequest);
            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);
            const navigationOptions = {
                apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenRedirect,
                timeout: params.redirectTimeout,
                noHistory: false
            };
            // If onRedirectNavigate is implemented, invoke it and provide requestUrl
            if (typeof params.onRedirectNavigate === "function") {
                this.logger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                const navigate = params.onRedirectNavigate(requestUrl);
                // Returning false from onRedirectNavigate will stop navigation
                if (navigate !== false) {
                    this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);
                    return;
                } else {
                    this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                    return;
                }
            } else {
                // Navigate window to request URL
                this.logger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);
                return;
            }
        } else {
            // Throw error if request URL is empty.
            this.logger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"]);
        }
    }
    /**
     * Handle authorization code response in the window.
     * @param hash
     */ async handleCodeResponse(response, state) {
        this.logger.verbose("RedirectHandler.handleCodeResponse called");
        // Interaction is completed - remove interaction status.
        this.browserStorage.setInteractionInProgress(false);
        // Handle code response.
        const stateKey = this.browserStorage.generateStateKey(state);
        const requestState = this.browserStorage.getTemporaryCache(stateKey);
        if (!requestState) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].stateNotFound, "Cached State");
        }
        let authCodeResponse;
        try {
            authCodeResponse = this.authModule.handleFragmentResponse(response, requestState);
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerError"] && e.subError === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]) {
                // Translate server error caused by user closing native prompt to corresponding first class MSAL error
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userCancelled"]);
            } else {
                throw e;
            }
        }
        // Get cached items
        const nonceKey = this.browserStorage.generateNonceKey(requestState);
        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
        // Assign code to request
        this.authCodeRequest.code = authCodeResponse.code;
        // Check for new cloud instance
        if (authCodeResponse.cloud_instance_host_name) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.authModule.updateAuthority.bind(this.authModule), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].UpdateTokenEndpointAuthority, this.logger, this.performanceClient, this.authCodeRequest.correlationId)(authCodeResponse.cloud_instance_host_name, this.authCodeRequest.correlationId);
        }
        authCodeResponse.nonce = cachedNonce || undefined;
        authCodeResponse.state = requestState;
        // Add CCS parameters if available
        if (authCodeResponse.client_info) {
            this.authCodeRequest.clientInfo = authCodeResponse.client_info;
        } else {
            const cachedCcsCred = this.checkCcsCredentials();
            if (cachedCcsCred) {
                this.authCodeRequest.ccsCredential = cachedCcsCred;
            }
        }
        // Acquire token with retrieved code.
        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);
        this.browserStorage.cleanRequestByState(state);
        return tokenResponse;
    }
    /**
     * Looks up ccs creds in the cache
     */ checkCcsCredentials() {
        // Look up ccs credential in temp cache
        const cachedCcsCred = this.browserStorage.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CCS_CREDENTIAL, true);
        if (cachedCcsCred) {
            try {
                return JSON.parse(cachedCcsCred);
            } catch (e) {
                this.authModule.logger.error("Cache credential could not be parsed");
                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);
            }
        }
        return null;
    }
}
;
 //# sourceMappingURL=RedirectHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "RedirectClient": ()=>RedirectClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/url/UrlString.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs [app-ssr] (ecmascript) <export * as UrlUtils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$ThrottlingUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$RedirectHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class RedirectClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);
        this.nativeStorage = nativeStorageImpl;
    }
    /**
     * Redirects the page to the /authorize endpoint of the IDP
     * @param request
     */ async acquireToken(request) {
        const validRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenRedirect);
        const handleBackButton = (event)=>{
            // Clear temporary cache if the back button is clicked during the redirect flow.
            if (event.persisted) {
                this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache.");
                this.browserStorage.cleanRequestByState(validRequest.state);
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].RESTORE_FROM_BFCACHE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            }
        };
        try {
            // Create auth code request and generate PKCE params
            const authCodeRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationCodeRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);
            // Initialize the client
            const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions, validRequest.account);
            // Create redirect interaction handler.
            const interactionHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$RedirectHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RedirectHandler"](authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
            // Create acquire token url.
            const navigateUrl = await authClient.getAuthCodeUrl({
                ...validRequest,
                nativeBroker: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)
            });
            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);
            // Clear temporary cache if the back button is clicked during the redirect flow.
            window.addEventListener("pageshow", handleBackButton);
            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
            return await interactionHandler.initiateAuthRequest(navigateUrl, {
                navigationClient: this.navigationClient,
                redirectTimeout: this.config.system.redirectNavigationTimeout,
                redirectStartPage: redirectStartPage,
                onRedirectNavigate: request.onRedirectNavigate
            });
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            window.removeEventListener("pageshow", handleBackButton);
            this.browserStorage.cleanRequestByState(validRequest.state);
            throw e;
        }
    }
    /**
     * Checks if navigateToLoginRequestUrl is set, and:
     * - if true, performs logic to cache and navigate
     * - if false, handles hash string and parses response
     * @param hash {string} url hash
     * @param parentMeasurement {InProgressPerformanceEvent} parent measurement
     */ async handleRedirectPromise(hash = "", parentMeasurement) {
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].handleRedirectPromise);
        try {
            if (!this.browserStorage.isInteractionInProgress(true)) {
                this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                return null;
            }
            const [serverParams, responseString] = this.getRedirectResponse(hash || "");
            if (!serverParams) {
                // Not a recognized server response hash or hash not associated with a redirect request
                this.logger.info("handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.");
                this.browserStorage.cleanRequestByInteractionType(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
                parentMeasurement.event.errorCode = "no_server_response";
                return null;
            }
            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated
            const loginRequestUrl = this.browserStorage.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].ORIGIN_URI, true) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
            const loginRequestUrlNormalized = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].removeHashFromUrl(loginRequestUrl);
            const currentUrlNormalized = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].removeHashFromUrl(window.location.href);
            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {
                // We are on the page we need to navigate to - handle hash
                this.logger.verbose("Current page is loginRequestUrl, handling response");
                if (loginRequestUrl.indexOf("#") > -1) {
                    // Replace current hash with non-msal hash, if present
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["replaceHash"])(loginRequestUrl);
                }
                const handleHashResult = await this.handleResponse(serverParams, serverTelemetryManager);
                return handleHashResult;
            } else if (!this.config.auth.navigateToLoginRequestUrl) {
                this.logger.verbose("NavigateToLoginRequestUrl set to false, handling response");
                return await this.handleResponse(serverParams, serverTelemetryManager);
            } else if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isInIframe"])() || this.config.system.allowRedirectInIframe) {
                /*
                 * Returned from authority using redirect - need to perform navigation before processing response
                 * Cache the hash to be retrieved after the next redirect
                 */ this.browserStorage.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].URL_HASH, responseString, true);
                const navigationOptions = {
                    apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].handleRedirectPromise,
                    timeout: this.config.system.redirectNavigationTimeout,
                    noHistory: true
                };
                /**
                 * Default behavior is to redirect to the start page and not process the hash now.
                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.
                 */ let processHashOnRedirect = true;
                if (!loginRequestUrl || loginRequestUrl === "null") {
                    // Redirect to home page if login request url is null (real null or the string null)
                    const homepage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getHomepage"])();
                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                    this.browserStorage.setTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].ORIGIN_URI, homepage, true);
                    this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);
                } else {
                    // Navigate to page that initiated the redirect request
                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);
                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);
                }
                // If navigateInternal implementation returns false, handle the hash now
                if (!processHashOnRedirect) {
                    return await this.handleResponse(serverParams, serverTelemetryManager);
                }
            }
            return null;
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            this.browserStorage.cleanRequestByInteractionType(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            throw e;
        }
    }
    /**
     * Gets the response hash for a redirect request
     * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
     * @param hash
     */ getRedirectResponse(userProvidedResponse) {
        this.logger.verbose("getRedirectResponseHash called");
        // Get current location hash from window or cache.
        let responseString = userProvidedResponse;
        if (!responseString) {
            if (this.config.auth.OIDCOptions.serverResponseType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerResponseType"].QUERY) {
                responseString = window.location.search;
            } else {
                responseString = window.location.hash;
            }
        }
        let response = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__["UrlUtils"].getDeserializedResponse(responseString);
        if (response) {
            try {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["validateInteractionType"])(response, this.browserCrypto, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            } catch (e) {
                if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                    this.logger.error(`Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`);
                }
                return [
                    null,
                    ""
                ];
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["clearHash"])(window);
            this.logger.verbose("Hash contains known properties, returning response hash");
            return [
                response,
                responseString
            ];
        }
        const cachedHash = this.browserStorage.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].URL_HASH, true);
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].URL_HASH));
        if (cachedHash) {
            response = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$UrlUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__UrlUtils$3e$__["UrlUtils"].getDeserializedResponse(cachedHash);
            if (response) {
                this.logger.verbose("Hash does not contain known properties, returning cached hash");
                return [
                    response,
                    cachedHash
                ];
            }
        }
        return [
            null,
            ""
        ];
    }
    /**
     * Checks if hash exists and handles in window.
     * @param hash
     * @param state
     */ async handleResponse(serverParams, serverTelemetryManager) {
        const state = serverParams.state;
        if (!state) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noStateInHash"]);
        }
        const cachedRequest = this.browserStorage.getCachedRequest(state);
        this.logger.verbose("handleResponse called, retrieved cached request");
        if (serverParams.accountId) {
            this.logger.verbose("Account id found in hash, calling WAM for token");
            if (!this.nativeMessageHandler) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]);
            }
            const nativeInteractionClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);
            const { userRequestState } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.browserCrypto, state);
            return nativeInteractionClient.acquireToken({
                ...cachedRequest,
                state: userRequestState,
                prompt: undefined
            }).finally(()=>{
                this.browserStorage.cleanRequestByState(state);
            });
        }
        // Hash contains known properties - handle and return in callback
        const currentAuthority = this.browserStorage.getCachedAuthority(state);
        if (!currentAuthority) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noCachedAuthorityError"]);
        }
        const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, currentAuthority);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$network$2f$ThrottlingUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ThrottlingUtils"].removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);
        const interactionHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$RedirectHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RedirectHandler"](authClient, this.browserStorage, cachedRequest, this.logger, this.performanceClient);
        return interactionHandler.handleCodeResponse(serverParams, state);
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ async logout(logoutRequest) {
        this.logger.verbose("logoutRedirect called");
        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].logout);
        try {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, logoutRequest);
            // Clear cache on logout
            await this.clearCacheOnLogout(validLogoutRequest.account);
            const navigationOptions = {
                apiId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].logout,
                timeout: this.config.system.redirectNavigationTimeout,
                noHistory: false
            };
            const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, logoutRequest && logoutRequest.authority, undefined, logoutRequest && logoutRequest.account || undefined);
            if (authClient.authority.protocolMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$ProtocolMode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolMode"].OIDC) {
                try {
                    authClient.authority.endSessionEndpoint;
                } catch  {
                    if (validLogoutRequest.account?.homeAccountId) {
                        void this.browserStorage.removeAccount(validLogoutRequest.account?.homeAccountId);
                        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, validLogoutRequest);
                        return;
                    }
                }
            }
            // Create logout string and navigate user window to logout.
            const logoutUri = authClient.getLogoutUri(validLogoutRequest);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, validLogoutRequest);
            // Check if onRedirectNavigate is implemented, and invoke it if so
            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === "function") {
                const navigate = logoutRequest.onRedirectNavigate(logoutUri);
                if (navigate !== false) {
                    this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                    // Ensure interaction is in progress
                    if (!this.browserStorage.getInteractionInProgress()) {
                        this.browserStorage.setInteractionInProgress(true);
                    }
                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);
                    return;
                } else {
                    // Ensure interaction is not in progress
                    this.browserStorage.setInteractionInProgress(false);
                    this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                }
            } else {
                // Ensure interaction is in progress
                if (!this.browserStorage.getInteractionInProgress()) {
                    this.browserStorage.setInteractionInProgress(true);
                }
                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);
                return;
            }
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, null, e);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            throw e;
        }
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGOUT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
    }
    /**
     * Use to get the redirectStartPage either from request or use current window
     * @param requestStartPage
     */ getRedirectStartPage(requestStartPage) {
        const redirectStartPage = requestStartPage || window.location.href;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$url$2f$UrlString$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UrlString"].getAbsoluteUrl(redirectStartPage, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getCurrentUri"])());
    }
}
;
 //# sourceMappingURL=RedirectClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "initiateAuthRequest": ()=>initiateAuthRequest,
    "monitorIframeForHash": ()=>monitorIframeForHash
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$config$2f$Configuration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/config/Configuration.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Creates a hidden iframe to given URL using user-requested scopes as an id.
 * @param urlNavigate
 * @param userRequestScopes
 */ async function initiateAuthRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerInitiateAuthRequest, correlationId);
    if (!requestUrl) {
        // Throw error if request URL is empty.
        logger.info("Navigate url is empty");
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["emptyNavigateUri"]);
    }
    if (navigateFrameWait) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(loadFrame, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(loadFrameSync, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);
}
/**
 * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
 * @param iframe
 * @param timeout
 */ async function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerMonitorIframeForHash, correlationId);
    return new Promise((resolve, reject)=>{
        if (timeout < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$config$2f$Configuration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_IFRAME_TIMEOUT_MS"]) {
            logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$config$2f$Configuration$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_IFRAME_TIMEOUT_MS"]}ms). This may result in timeouts.`);
        }
        /*
         * Polling for iframes can be purely timing based,
         * since we don't need to account for interaction.
         */ const timeoutId = window.setTimeout(()=>{
            window.clearInterval(intervalId);
            reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorWindowTimeout"]));
        }, timeout);
        const intervalId = window.setInterval(()=>{
            let href = "";
            const contentWindow = iframe.contentWindow;
            try {
                /*
                 * Will throw if cross origin,
                 * which should be caught and ignored
                 * since we need the interval to keep running while on STS UI.
                 */ href = contentWindow ? contentWindow.location.href : "";
            } catch (e) {}
            if (!href || href === "about:blank") {
                return;
            }
            let responseString = "";
            if (contentWindow) {
                if (responseType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerResponseType"].QUERY) {
                    responseString = contentWindow.location.search;
                } else {
                    responseString = contentWindow.location.hash;
                }
            }
            window.clearTimeout(timeoutId);
            window.clearInterval(intervalId);
            resolve(responseString);
        }, pollIntervalMilliseconds);
    }).finally(()=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(removeHiddenIframe, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);
    });
}
/**
 * @hidden
 * Loads iframe with authorization endpoint URL
 * @ignore
 * @deprecated
 */ function loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {
    performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerLoadFrame, correlationId);
    /*
     * This trick overcomes iframe navigation in IE
     * IE does not load the page consistently in iframe
     */ return new Promise((resolve, reject)=>{
        const frameHandle = createHiddenIframe();
        window.setTimeout(()=>{
            if (!frameHandle) {
                reject("Unable to load iframe");
                return;
            }
            frameHandle.src = urlNavigate;
            resolve(frameHandle);
        }, navigateFrameWait);
    });
}
/**
 * @hidden
 * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
 * @param urlNavigate
 * @param frameName
 * @param logger
 */ function loadFrameSync(urlNavigate) {
    const frameHandle = createHiddenIframe();
    frameHandle.src = urlNavigate;
    return frameHandle;
}
/**
 * @hidden
 * Creates a new hidden iframe or gets an existing one for silent token renewal.
 * @ignore
 */ function createHiddenIframe() {
    const authFrame = document.createElement("iframe");
    authFrame.className = "msalSilentIframe";
    authFrame.style.visibility = "hidden";
    authFrame.style.position = "absolute";
    authFrame.style.width = authFrame.style.height = "0";
    authFrame.style.border = "0";
    authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
    document.body.appendChild(authFrame);
    return authFrame;
}
/**
 * @hidden
 * Removes a hidden iframe from the page.
 * @ignore
 */ function removeHiddenIframe(iframe) {
    if (document.body === iframe.parentNode) {
        document.body.removeChild(iframe);
    }
}
;
 //# sourceMappingURL=SilentHandler.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "SilentIframeClient": ()=>SilentIframeClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$SilentHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentIframeClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);
        this.apiId = apiId;
        this.nativeStorage = nativeStorageImpl;
    }
    /**
     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session
     * @param request
     */ async acquireToken(request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentIframeClientAcquireToken, request.correlationId);
        // Check that we have some SSO data
        if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {
            this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
        }
        // Check the prompt value
        const inputRequest = {
            ...request
        };
        if (inputRequest.prompt) {
            if (inputRequest.prompt !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE && inputRequest.prompt !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NO_SESSION) {
                this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE}`);
                inputRequest.prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE;
            }
        } else {
            inputRequest.prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE;
        }
        // Create silent request
        const silentRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["preconnect"])(silentRequest.authority);
        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
        try {
            // Initialize the client
            const authClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.createAuthCodeClient.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.silentTokenHelper.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"]));
    }
    /**
     * Helper which acquires an authorization code silently using a hidden iframe from given url
     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
     * @param navigateUrl
     * @param userRequestScopes
     */ async silentTokenHelper(authClient, silentRequest) {
        const correlationId = silentRequest.correlationId;
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentIframeClientTokenHelper, correlationId);
        // Create auth code request and generate PKCE params
        const authCodeRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationCodeRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, correlationId)(silentRequest);
        // Create authorize request url
        const navigateUrl = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(authClient.getAuthCodeUrl.bind(authClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)({
            ...silentRequest,
            nativeBroker: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)
        });
        // Create silent handler
        const interactionHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionHandler"](authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
        // Get the frame handle for the silent request
        const msalFrame = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$SilentHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["initiateAuthRequest"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);
        const responseType = this.config.auth.OIDCOptions.serverResponseType;
        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
        const responseString = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$SilentHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["monitorIframeForHash"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);
        const serverParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invoke"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deserializeResponse"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, responseType, this.logger);
        if (serverParams.accountId) {
            this.logger.verbose("Account id found in hash, calling WAM for token");
            if (!this.nativeMessageHandler) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]);
            }
            const nativeInteractionClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, correlationId);
            const { userRequestState } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$ProtocolUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProtocolUtils"].parseRequestState(this.browserCrypto, silentRequest.state);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].NativeInteractionClientAcquireToken, this.logger, this.performanceClient, correlationId)({
                ...silentRequest,
                state: userRequestState,
                prompt: silentRequest.prompt || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE
            });
        }
        // Handle response from hash string
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(interactionHandler.handleCodeResponse.bind(interactionHandler), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleCodeResponse, this.logger, this.performanceClient, correlationId)(serverParams, silentRequest);
    }
}
;
 //# sourceMappingURL=SilentIframeClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "SilentRefreshClient": ()=>SilentRefreshClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$RefreshTokenClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentRefreshClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    /**
     * Exchanges the refresh token for new tokens
     * @param request
     */ async acquireToken(request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentRefreshClientAcquireToken, request.correlationId);
        const baseRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["initializeBaseRequest"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, this.config, this.performanceClient, this.logger);
        const silentRequest = {
            ...request,
            ...baseRequest
        };
        if (request.redirectUri) {
            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided
            silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);
        }
        const serverTelemetryManager = this.initializeServerTelemetryManager(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenSilent_silentFlow);
        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);
        // Send request to renew token. Auth module will throw errors if token cannot be renewed.
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch((e)=>{
            e.setCorrelationId(this.correlationId);
            serverTelemetryManager.cacheFailedRequest(e);
            throw e;
        });
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"]));
    }
    /**
     * Creates a Refresh Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */ async createRefreshTokenClient(serverTelemetryManager, authorityUrl, azureCloudOptions, account) {
        // Create auth module.
        const clientConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.getClientConfiguration.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions, account);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$RefreshTokenClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RefreshTokenClient"](clientConfig, this.performanceClient);
    }
}
;
 //# sourceMappingURL=SilentRefreshClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "TokenCache": ()=>TokenCache
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AuthToken.mjs [app-ssr] (ecmascript) <export * as AuthToken>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/Authority.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs [app-ssr] (ecmascript) <export * as CacheHelpers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/request/ScopeSet.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Token cache manager
 */ class TokenCache {
    constructor(configuration, storage, logger, cryptoObj){
        this.isBrowserEnvironment = typeof window !== "undefined";
        this.config = configuration;
        this.storage = storage;
        this.logger = logger;
        this.cryptoObj = cryptoObj;
    }
    // Move getAllAccounts here and cache utility APIs
    /**
     * API to load tokens to msal-browser cache.
     * @param request
     * @param response
     * @param options
     * @returns `AuthenticationResult` for the response that was loaded.
     */ loadExternalTokens(request, response, options) {
        this.logger.info("TokenCache - loadExternalTokens called");
        if (!response.id_token) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
        const idTokenClaims = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__["AuthToken"].extractTokenClaims(response.id_token, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"]);
        let cacheRecord;
        let authority;
        let cacheRecordAccount;
        if (request.account) {
            cacheRecordAccount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].createFromAccountInfo(request.account);
            cacheRecord = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheRecord"](cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));
        } else if (request.authority) {
            const authorityUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Authority"].generateAuthority(request.authority, request.azureCloudOptions);
            const authorityOptions = {
                protocolMode: this.config.auth.protocolMode,
                knownAuthorities: this.config.auth.knownAuthorities,
                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                authorityMetadata: this.config.auth.authorityMetadata,
                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache
            };
            authority = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Authority"](authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger, request.correlationId || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])());
            // "clientInfo" from options takes precedence over "clientInfo" in response
            if (options.clientInfo) {
                this.logger.trace("TokenCache - homeAccountId from options");
                cacheRecordAccount = this.loadAccount(idTokenClaims, authority, options.clientInfo);
                cacheRecord = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheRecord"](cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));
            } else if (response.client_info) {
                this.logger.trace("TokenCache - homeAccountId from response");
                cacheRecordAccount = this.loadAccount(idTokenClaims, authority, response.client_info);
                cacheRecord = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$CacheRecord$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheRecord"](cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));
            } else {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
            }
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
        return this.generateAuthenticationResult(request, idTokenClaims, cacheRecord, cacheRecordAccount, authority);
    }
    /**
     * Helper function to load account to msal-browser cache
     * @param idToken
     * @param environment
     * @param clientInfo
     * @param authorityType
     * @param requestHomeAccountId
     * @returns `AccountEntity`
     */ loadAccount(idTokenClaims, authority, clientInfo, requestHomeAccountId) {
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading account");
            let homeAccountId;
            if (requestHomeAccountId) {
                homeAccountId = requestHomeAccountId;
            } else if (authority.authorityType !== undefined && clientInfo) {
                homeAccountId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);
            }
            if (!homeAccountId) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
            }
            const claimsTenantId = idTokenClaims.tid;
            const cachedAccount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$response$2f$ResponseHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildAccountToCache"])(this.storage, authority, homeAccountId, idTokenClaims, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"], clientInfo, authority.hostnameAndPort, claimsTenantId, undefined, undefined, this.logger);
            this.storage.setAccount(cachedAccount);
            return cachedAccount;
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
    }
    /**
     * Helper function to load id tokens to msal-browser cache
     * @param idToken
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns `IdTokenEntity`
     */ loadIdToken(idToken, homeAccountId, environment, tenantId) {
        const idTokenEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading id token");
            this.storage.setIdTokenCredential(idTokenEntity);
            return idTokenEntity;
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
    }
    /**
     * Helper function to load access tokens to msal-browser cache
     * @param request
     * @param response
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns `AccessTokenEntity`
     */ loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {
        if (!response.access_token) {
            this.logger.verbose("TokenCache - No access token provided for caching");
            return null;
        }
        if (!response.expires_in) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
        if (!options.extendedExpiresOn) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
        const scopes = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"](request.scopes).printScopes();
        const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;
        const extendedExpiresOn = options.extendedExpiresOn;
        const accessTokenEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$encode$2f$Base64Decode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64Decode"]);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading access token");
            this.storage.setAccessTokenCredential(accessTokenEntity);
            return accessTokenEntity;
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
    }
    /**
     * Helper function to load refresh tokens to msal-browser cache
     * @param request
     * @param response
     * @param homeAccountId
     * @param environment
     * @returns `RefreshTokenEntity`
     */ loadRefreshToken(request, response, homeAccountId, environment) {
        if (!response.refresh_token) {
            this.logger.verbose("TokenCache - No refresh token provided for caching");
            return null;
        }
        const refreshTokenEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$utils$2f$CacheHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__CacheHelpers$3e$__["CacheHelpers"].createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading refresh token");
            this.storage.setRefreshTokenCredential(refreshTokenEntity);
            return refreshTokenEntity;
        } else {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToLoadToken"]);
        }
    }
    /**
     * Helper function to generate an `AuthenticationResult` for the result.
     * @param request
     * @param idTokenObj
     * @param cacheRecord
     * @param authority
     * @returns `AuthenticationResult`
     */ generateAuthenticationResult(request, idTokenClaims, cacheRecord, accountEntity, authority) {
        let accessToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        let responseScopes = [];
        let expiresOn = null;
        let extExpiresOn;
        if (cacheRecord?.accessToken) {
            accessToken = cacheRecord.accessToken.secret;
            responseScopes = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$ScopeSet$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ScopeSet"].fromString(cacheRecord.accessToken.target).asArray();
            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
        }
        const uid = idTokenClaims.oid || idTokenClaims.sub || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        const tid = idTokenClaims.tid || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
        return {
            authority: authority ? authority.canonicalAuthority : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            uniqueId: uid,
            tenantId: tid,
            scopes: responseScopes,
            account: accountEntity.getAccountInfo(),
            idToken: cacheRecord.idToken?.secret || "",
            idTokenClaims: idTokenClaims || {},
            accessToken: accessToken,
            fromCache: true,
            expiresOn: expiresOn,
            correlationId: request.correlationId || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            requestId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            extExpiresOn: extExpiresOn,
            familyId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            tokenType: cacheRecord?.accessToken?.tokenType || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            state: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            cloudGraphHostName: accountEntity.cloudGraphHostName || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            msGraphHost: accountEntity.msGraphHost || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            code: undefined,
            fromNativeBroker: false
        };
    }
}
;
 //# sourceMappingURL=TokenCache.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "HybridSpaAuthorizationCodeClient": ()=>HybridSpaAuthorizationCodeClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$AuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class HybridSpaAuthorizationCodeClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$client$2f$AuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthorizationCodeClient"] {
    constructor(config){
        super(config);
        this.includeRedirectUri = false;
    }
}
;
 //# sourceMappingURL=HybridSpaAuthorizationCodeClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "SilentAuthCodeClient": ()=>SilentAuthCodeClient
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$HybridSpaAuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentAuthCodeClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$StandardInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardInteractionClient"] {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);
        this.apiId = apiId;
    }
    /**
     * Acquires a token silently by redeeming an authorization code against the /token endpoint
     * @param request
     */ async acquireToken(request) {
        // Auth code payload is required
        if (!request.code) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeRequired"]);
        }
        // Create silent request
        const silentRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.initializeAuthorizationRequest.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent);
        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
        try {
            // Create auth code request (PKCE not needed)
            const authCodeRequest = {
                ...silentRequest,
                code: request.code
            };
            // Initialize the client
            const clientConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.getClientConfiguration.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);
            const authClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$HybridSpaAuthorizationCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HybridSpaAuthorizationCodeClient"](clientConfig);
            this.logger.verbose("Auth code client created");
            // Create silent handler
            const interactionHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_handler$2f$InteractionHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionHandler"](authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
            // Handle auth code parameters from request
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({
                code: request.code,
                msgraph_host: request.msGraphHost,
                cloud_graph_host_name: request.cloudGraphHostName,
                cloud_instance_host_name: request.cloudInstanceHostName
            }, silentRequest, false);
        } catch (e) {
            if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["silentLogoutUnsupported"]));
    }
}
;
 //# sourceMappingURL=SilentAuthCodeClient.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "StandardController": ()=>StandardController
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$CryptoOps$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/Authority.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as InteractionRequiredAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$PopupClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$RedirectClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentIframeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentRefreshClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$TokenCache$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentCacheClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentAuthCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function getAccountType(account) {
    const idTokenClaims = account?.idTokenClaims;
    if (idTokenClaims?.tfp || idTokenClaims?.acr) {
        return "B2C";
    }
    if (!idTokenClaims?.tid) {
        return undefined;
    } else if (idTokenClaims?.tid === "9188040d-6c67-4c5b-b112-36a304b66dad") {
        return "MSA";
    }
    return "AAD";
}
function preflightCheck(initialized, performanceEvent) {
    try {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["preflightCheck"])(initialized);
    } catch (e) {
        performanceEvent.end({
            success: false
        }, e);
        throw e;
    }
}
class StandardController {
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     */ constructor(operatingContext){
        this.operatingContext = operatingContext;
        this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();
        // Set the configuration.
        this.config = operatingContext.getConfig();
        this.initialized = false;
        // Initialize logger
        this.logger = this.operatingContext.getLogger();
        // Initialize the network module class.
        this.networkClient = this.config.system.networkClient;
        // Initialize the navigation client class.
        this.navigationClient = this.config.system.navigationClient;
        // Initialize redirectResponse Map
        this.redirectResponse = new Map();
        // Initial hybrid spa map
        this.hybridAuthCodeResponses = new Map();
        // Initialize performance client
        this.performanceClient = this.config.telemetry.client;
        // Initialize the crypto class.
        this.browserCrypto = this.isBrowserEnvironment ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$CryptoOps$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CryptoOps"](this.logger, this.performanceClient) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_CRYPTO_IMPLEMENTATION"];
        this.eventHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventHandler"](this.logger, this.browserCrypto);
        // Initialize the browser storage class.
        this.browserStorage = this.isBrowserEnvironment ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheManager"](this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildStaticAuthorityOptions"])(this.config.auth), this.performanceClient) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BROWSER_CACHE_MANAGER"])(this.config.auth.clientId, this.logger);
        // initialize in memory storage for native flows
        const nativeCacheOptions = {
            cacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage,
            temporaryCacheLocation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheLocation"].MemoryStorage,
            storeAuthStateInCookie: false,
            secureCookies: false,
            cacheMigrationEnabled: false,
            claimsBasedCachingEnabled: false
        };
        this.nativeInternalStorage = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheManager"](this.config.auth.clientId, nativeCacheOptions, this.browserCrypto, this.logger, undefined, this.performanceClient);
        // Initialize the token cache
        this.tokenCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$TokenCache$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TokenCache"](this.config, this.browserStorage, this.logger, this.browserCrypto);
        this.activeSilentTokenRequests = new Map();
        // Register listener functions
        this.trackPageVisibility = this.trackPageVisibility.bind(this);
        // Register listener functions
        this.trackPageVisibilityWithMeasurement = this.trackPageVisibilityWithMeasurement.bind(this);
    }
    static async createController(operatingContext) {
        const controller = new StandardController(operatingContext);
        await controller.initialize();
        return controller;
    }
    trackPageVisibility(correlationId) {
        if (!correlationId) {
            return;
        }
        this.logger.info("Perf: Visibility change detected");
        this.performanceClient.incrementFields({
            visibilityChangeCount: 1
        }, correlationId);
    }
    /**
     * Initializer function to perform async startup tasks such as connecting to WAM extension
     */ async initialize() {
        this.logger.trace("initialize called");
        if (this.initialized) {
            this.logger.info("initialize has already been called, exiting early.");
            return;
        }
        const allowNativeBroker = this.config.system.allowNativeBroker;
        const initMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeClientApplication);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].INITIALIZE_START);
        if (allowNativeBroker) {
            try {
                this.nativeExtensionProvider = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].createProvider(this.logger, this.config.system.nativeBrokerHandshakeTimeout, this.performanceClient);
            } catch (e) {
                this.logger.verbose(e);
            }
        }
        if (!this.config.cache.claimsBasedCachingEnabled) {
            this.logger.verbose("Claims-based caching is disabled. Clearing the previous cache with claims");
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.browserStorage.clearTokensAndKeysWithClaims.bind(this.browserStorage), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].ClearTokensAndKeysWithClaims, this.logger, this.performanceClient)(this.performanceClient);
        }
        this.initialized = true;
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].INITIALIZE_END);
        initMeasurement.end({
            allowNativeBroker,
            success: true
        });
    }
    // #region Redirect Flow
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */ async handleRedirectPromise(hash) {
        this.logger.verbose("handleRedirectPromise called");
        // Block token acquisition before initialize has been called
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["blockAPICallsBeforeInitialize"])(this.initialized);
        if (this.isBrowserEnvironment) {
            /**
             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,
             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called
             * several times concurrently.
             */ const redirectResponseKey = hash || "";
            let response = this.redirectResponse.get(redirectResponseKey);
            if (typeof response === "undefined") {
                response = this.handleRedirectPromiseInternal(hash);
                this.redirectResponse.set(redirectResponseKey, response);
                this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
            } else {
                this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
            }
            return response;
        }
        this.logger.verbose("handleRedirectPromise returns null, not browser environment");
        return null;
    }
    /**
     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests
     * @param hash
     * @returns
     */ async handleRedirectPromiseInternal(hash) {
        const loggedInAccounts = this.getAllAccounts();
        const request = this.browserStorage.getCachedNativeRequest();
        const useNative = request && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider) && this.nativeExtensionProvider && !hash;
        const correlationId = useNative ? request?.correlationId : this.browserStorage.getTemporaryCache(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TemporaryCacheKeys"].CORRELATION_ID, true) || "";
        const rootMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenRedirect, correlationId);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].HANDLE_REDIRECT_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
        let redirectResponse;
        if (useNative && this.nativeExtensionProvider) {
            this.logger.trace("handleRedirectPromise - acquiring token from native platform");
            const nativeClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].handleRedirectPromise, this.performanceClient, this.nativeExtensionProvider, request.accountId, this.nativeInternalStorage, request.correlationId);
            redirectResponse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(nativeClient.handleRedirectPromise.bind(nativeClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleNativeRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(this.performanceClient, rootMeasurement.event.correlationId);
        } else {
            this.logger.trace("handleRedirectPromise - acquiring token from web flow");
            const redirectClient = this.createRedirectClient(correlationId);
            redirectResponse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(redirectClient.handleRedirectPromise.bind(redirectClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].HandleRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(hash, rootMeasurement);
        }
        return redirectResponse.then((result)=>{
            if (result) {
                // Emit login event if number of accounts change
                const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
                if (isLoggingIn) {
                    this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, result);
                    this.logger.verbose("handleRedirectResponse returned result, login success");
                } else {
                    this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, result);
                    this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                }
                rootMeasurement.end({
                    success: true,
                    accountType: getAccountType(result.account)
                });
            } else {
                /*
                 * Instrument an event only if an error code is set. Otherwise, discard it when the redirect response
                 * is empty and the error code is missing.
                 */ if (rootMeasurement.event.errorCode) {
                    rootMeasurement.end({
                        success: false
                    });
                } else {
                    rootMeasurement.discard();
                }
            }
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].HANDLE_REDIRECT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            return result;
        }).catch((e)=>{
            const eventError = e;
            // Emit login event if there is an account
            if (loggedInAccounts.length > 0) {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, null, eventError);
            } else {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, null, eventError);
            }
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].HANDLE_REDIRECT_END, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect);
            rootMeasurement.end({
                success: false
            }, eventError);
            throw e;
        });
    }
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ async acquireTokenRedirect(request) {
        // Preflight request
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("acquireTokenRedirect called", correlationId);
        const atrMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenPreRedirect, correlationId);
        atrMeasurement.add({
            accountType: getAccountType(request.account),
            scenarioId: request.scenarioId
        });
        const onRedirectNavigateCb = request.onRedirectNavigate;
        request.onRedirectNavigate = (url)=>{
            const navigate = typeof onRedirectNavigateCb === "function" ? onRedirectNavigateCb(url) : undefined;
            if (navigate !== false) {
                atrMeasurement.end({
                    success: true
                });
            } else {
                atrMeasurement.discard();
            }
            return navigate;
        };
        // If logged in, emit acquire token events
        const isLoggedIn = this.getAllAccounts().length > 0;
        try {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["redirectPreflightCheck"])(this.initialized, this.config);
            this.browserStorage.setInteractionInProgress(true);
            if (isLoggedIn) {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, request);
            } else {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, request);
            }
            let result;
            if (this.nativeExtensionProvider && this.canUseNative(request)) {
                const nativeClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenRedirect, this.performanceClient, this.nativeExtensionProvider, this.getNativeAccountId(request), this.nativeInternalStorage, correlationId);
                result = nativeClient.acquireTokenRedirect(request, atrMeasurement).catch((e)=>{
                    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                        const redirectClient = this.createRedirectClient(correlationId);
                        return redirectClient.acquireToken(request);
                    } else if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["InteractionRequiredAuthError"]) {
                        this.logger.verbose("acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow");
                        const redirectClient = this.createRedirectClient(correlationId);
                        return redirectClient.acquireToken(request);
                    }
                    this.browserStorage.setInteractionInProgress(false);
                    throw e;
                });
            } else {
                const redirectClient = this.createRedirectClient(correlationId);
                result = redirectClient.acquireToken(request);
            }
            return await result;
        } catch (e) {
            atrMeasurement.end({
                success: false
            }, e);
            if (isLoggedIn) {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, null, e);
            } else {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Redirect, null, e);
            }
            throw e;
        }
    }
    // #endregion
    // #region Popup Flow
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ acquireTokenPopup(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const atPopupMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenPopup, correlationId);
        atPopupMeasurement.add({
            scenarioId: request.scenarioId,
            accountType: getAccountType(request.account)
        });
        try {
            this.logger.verbose("acquireTokenPopup called", correlationId);
            preflightCheck(this.initialized, atPopupMeasurement);
            this.browserStorage.setInteractionInProgress(true);
        } catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
        // If logged in, emit acquire token events
        const loggedInAccounts = this.getAllAccounts();
        if (loggedInAccounts.length > 0) {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, request);
        } else {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, request);
        }
        let result;
        if (this.canUseNative(request)) {
            result = this.acquireTokenNative({
                ...request,
                correlationId
            }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenPopup).then((response)=>{
                this.browserStorage.setInteractionInProgress(false);
                atPopupMeasurement.end({
                    success: true,
                    isNativeBroker: true,
                    requestId: response.requestId,
                    accountType: getAccountType(response.account)
                });
                return response;
            }).catch((e)=>{
                if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                    const popupClient = this.createPopupClient(correlationId);
                    return popupClient.acquireToken(request);
                } else if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["InteractionRequiredAuthError"]) {
                    this.logger.verbose("acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow");
                    const popupClient = this.createPopupClient(correlationId);
                    return popupClient.acquireToken(request);
                }
                this.browserStorage.setInteractionInProgress(false);
                throw e;
            });
        } else {
            const popupClient = this.createPopupClient(correlationId);
            result = popupClient.acquireToken(request);
        }
        return result.then((result)=>{
            /*
             *  If logged in, emit acquire token events
             */ const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
            if (isLoggingIn) {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, result);
            } else {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, result);
            }
            atPopupMeasurement.end({
                success: true,
                requestId: result.requestId,
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length,
                accountType: getAccountType(result.account)
            });
            return result;
        }).catch((e)=>{
            if (loggedInAccounts.length > 0) {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, null, e);
            } else {
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].LOGIN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, null, e);
            }
            atPopupMeasurement.end({
                success: false
            }, e);
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        });
    }
    trackPageVisibilityWithMeasurement() {
        const measurement = this.ssoSilentMeasurement || this.acquireTokenByCodeAsyncMeasurement;
        if (!measurement) {
            return;
        }
        this.logger.info("Perf: Visibility change detected in ", measurement.event.name);
        measurement.increment({
            visibilityChangeCount: 1
        });
    }
    // #endregion
    // #region Silent Flow
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async ssoSilent(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const validRequest = {
            ...request,
            // will be PromptValue.NONE or PromptValue.NO_SESSION
            prompt: request.prompt,
            correlationId: correlationId
        };
        this.ssoSilentMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SsoSilent, correlationId);
        this.ssoSilentMeasurement?.add({
            scenarioId: request.scenarioId,
            accountType: getAccountType(request.account)
        });
        preflightCheck(this.initialized, this.ssoSilentMeasurement);
        this.ssoSilentMeasurement?.increment({
            visibilityChangeCount: 0
        });
        document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        this.logger.verbose("ssoSilent called", correlationId);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, validRequest);
        let result;
        if (this.canUseNative(validRequest)) {
            result = this.acquireTokenNative(validRequest, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].ssoSilent).catch((e)=>{
                // If native token acquisition fails for availability reasons fallback to standard flow
                if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                    const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);
                    return silentIframeClient.acquireToken(validRequest);
                }
                throw e;
            });
        } else {
            const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);
            result = silentIframeClient.acquireToken(validRequest);
        }
        return result.then((response)=>{
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, response);
            this.ssoSilentMeasurement?.end({
                success: true,
                isNativeBroker: response.fromNativeBroker,
                requestId: response.requestId,
                accessTokenSize: response.accessToken.length,
                idTokenSize: response.idToken.length,
                accountType: getAccountType(response.account)
            });
            return response;
        }).catch((e)=>{
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].SSO_SILENT_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null, e);
            this.ssoSilentMeasurement?.end({
                success: false
            }, e);
            throw e;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        });
    }
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenByCode(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.trace("acquireTokenByCode called", correlationId);
        const atbcMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenByCode, correlationId);
        preflightCheck(this.initialized, atbcMeasurement);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_BY_CODE_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, request);
        atbcMeasurement.add({
            scenarioId: request.scenarioId
        });
        try {
            if (request.code && request.nativeAccountId) {
                // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spaCodeAndNativeAccountIdPresent"]);
            } else if (request.code) {
                const hybridAuthCode = request.code;
                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);
                if (!response) {
                    this.logger.verbose("Initiating new acquireTokenByCode request", correlationId);
                    response = this.acquireTokenByCodeAsync({
                        ...request,
                        correlationId
                    }).then((result)=>{
                        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_BY_CODE_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, result);
                        this.hybridAuthCodeResponses.delete(hybridAuthCode);
                        atbcMeasurement.end({
                            success: true,
                            isNativeBroker: result.fromNativeBroker,
                            requestId: result.requestId,
                            accessTokenSize: result.accessToken.length,
                            idTokenSize: result.idToken.length,
                            accountType: getAccountType(result.account)
                        });
                        return result;
                    }).catch((error)=>{
                        this.hybridAuthCodeResponses.delete(hybridAuthCode);
                        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_BY_CODE_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null, error);
                        atbcMeasurement.end({
                            success: false
                        }, error);
                        throw error;
                    });
                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);
                } else {
                    this.logger.verbose("Existing acquireTokenByCode request found", correlationId);
                    atbcMeasurement.discard();
                }
                return await response;
            } else if (request.nativeAccountId) {
                if (this.canUseNative(request, request.nativeAccountId)) {
                    const result = await this.acquireTokenNative({
                        ...request,
                        correlationId
                    }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenByCode, request.nativeAccountId).catch((e)=>{
                        // If native token acquisition fails for availability reasons fallback to standard flow
                        if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                        }
                        throw e;
                    });
                    atbcMeasurement.end({
                        accountType: getAccountType(result.account),
                        success: true
                    });
                    return result;
                } else {
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unableToAcquireTokenFromNativePlatform"]);
                }
            } else {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["authCodeOrNativeAccountIdRequired"]);
            }
        } catch (e) {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_BY_CODE_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null, e);
            atbcMeasurement.end({
                success: false
            }, e);
            throw e;
        }
    }
    /**
     * Creates a SilentAuthCodeClient to redeem an authorization code.
     * @param request
     * @returns Result of the operation to redeem the authorization code
     */ async acquireTokenByCodeAsync(request) {
        this.logger.trace("acquireTokenByCodeAsync called", request.correlationId);
        this.acquireTokenByCodeAsyncMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenByCodeAsync, request.correlationId);
        this.acquireTokenByCodeAsyncMeasurement?.increment({
            visibilityChangeCount: 0
        });
        document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        const silentAuthCodeClient = this.createSilentAuthCodeClient(request.correlationId);
        const silentTokenResult = await silentAuthCodeClient.acquireToken(request).then((response)=>{
            this.acquireTokenByCodeAsyncMeasurement?.end({
                success: true,
                fromCache: response.fromCache,
                isNativeBroker: response.fromNativeBroker,
                requestId: response.requestId
            });
            return response;
        }).catch((tokenRenewalError)=>{
            this.acquireTokenByCodeAsyncMeasurement?.end({
                success: false
            }, tokenRenewalError);
            throw tokenRenewalError;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        });
        return silentTokenResult;
    }
    /**
     * Attempt to acquire an access token from the cache
     * @param silentCacheClient SilentCacheClient
     * @param commonRequest CommonSilentFlowRequest
     * @param silentRequest SilentRequest
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenFromCache(commonRequest, cacheLookupPolicy) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenFromCache, commonRequest.correlationId);
        switch(cacheLookupPolicy){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].Default:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].AccessToken:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].AccessTokenAndRefreshToken:
                const silentCacheClient = this.createSilentCacheClient(commonRequest.correlationId);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(silentCacheClient.acquireToken.bind(silentCacheClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentCacheClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);
            default:
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].tokenRefreshRequired);
        }
    }
    /**
     * Attempt to acquire an access token via a refresh token
     * @param commonRequest CommonSilentFlowRequest
     * @param cacheLookupPolicy CacheLookupPolicy
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenByRefreshToken(commonRequest, cacheLookupPolicy) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenByRefreshToken, commonRequest.correlationId);
        switch(cacheLookupPolicy){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].Default:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].AccessTokenAndRefreshToken:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].RefreshToken:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].RefreshTokenAndNetwork:
                const silentRefreshClient = this.createSilentRefreshClient(commonRequest.correlationId);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(silentRefreshClient.acquireToken.bind(silentRefreshClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentRefreshClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);
            default:
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].tokenRefreshRequired);
        }
    }
    /**
     * Attempt to acquire an access token via an iframe
     * @param request CommonSilentFlowRequest
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenBySilentIframe(request) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenBySilentIframe, request.correlationId);
        const silentIframeClient = this.createSilentIframeClient(request.correlationId);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(silentIframeClient.acquireToken.bind(silentIframeClient), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SilentIframeClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(request);
    }
    // #endregion
    // #region Logout
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */ async logout(logoutRequest) {
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.", correlationId);
        return this.logoutRedirect({
            correlationId,
            ...logoutRequest
        });
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ async logoutRedirect(logoutRequest) {
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["redirectPreflightCheck"])(this.initialized, this.config);
        this.browserStorage.setInteractionInProgress(true);
        const redirectClient = this.createRedirectClient(correlationId);
        return redirectClient.logout(logoutRequest);
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logoutPopup(logoutRequest) {
        try {
            const correlationId = this.getRequestCorrelationId(logoutRequest);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["preflightCheck"])(this.initialized);
            this.browserStorage.setInteractionInProgress(true);
            const popupClient = this.createPopupClient(correlationId);
            return popupClient.logout(logoutRequest);
        } catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
    }
    /**
     * Creates a cache interaction client to clear broswer cache.
     * @param logoutRequest
     */ async clearCache(logoutRequest) {
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        const cacheClient = this.createSilentCacheClient(correlationId);
        return cacheClient.logout(logoutRequest);
    }
    // #endregion
    // #region Account APIs
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllAccounts"])(this.logger, this.browserStorage, this.isBrowserEnvironment, accountFilter);
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccount"])(accountFilter, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param username
     * @returns The account object stored in MSAL
     */ getAccountByUsername(username) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByUsername"])(username, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */ getAccountByHomeId(homeAccountId) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByHomeId"])(homeAccountId, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */ getAccountByLocalId(localAccountId) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByLocalId"])(localAccountId, this.logger, this.browserStorage);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setActiveAccount"])(account, this.browserStorage);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getActiveAccount"])(this.browserStorage);
    }
    // #endregion
    /**
     * Hydrates the cache with the tokens from an AuthenticationResult
     * @param result
     * @param request
     * @returns
     */ async hydrateCache(result, request) {
        this.logger.verbose("hydrateCache called");
        // Account gets saved to browser storage regardless of native or not
        const accountEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);
        this.browserStorage.setAccount(accountEntity);
        if (result.fromNativeBroker) {
            this.logger.verbose("Response was from native broker, storing in-memory");
            // Tokens from native broker are stored in-memory
            return this.nativeInternalStorage.hydrateCache(result, request);
        } else {
            return this.browserStorage.hydrateCache(result, request);
        }
    }
    // #region Helpers
    /**
     * Acquire a token from native device (e.g. WAM)
     * @param request
     */ async acquireTokenNative(request, apiId, accountId) {
        this.logger.trace("acquireTokenNative called");
        if (!this.nativeExtensionProvider) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeConnectionNotEstablished"]);
        }
        const nativeClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$NativeInteractionClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeInteractionClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, apiId, this.performanceClient, this.nativeExtensionProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
        return nativeClient.acquireToken(request);
    }
    /**
     * Returns boolean indicating if this request can use the native broker
     * @param request
     */ canUseNative(request, accountId) {
        this.logger.trace("canUseNative called");
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme)) {
            this.logger.trace("canUseNative: isNativeAvailable returned false, returning false");
            return false;
        }
        if (request.prompt) {
            switch(request.prompt){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].NONE:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].CONSENT:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PromptValue"].LOGIN:
                    this.logger.trace("canUseNative: prompt is compatible with native flow");
                    break;
                default:
                    this.logger.trace(`canUseNative: prompt = ${request.prompt} is not compatible with native flow, returning false`);
                    return false;
            }
        }
        if (!accountId && !this.getNativeAccountId(request)) {
            this.logger.trace("canUseNative: nativeAccountId is not available, returning false");
            return false;
        }
        return true;
    }
    /**
     * Get the native accountId from the account
     * @param request
     * @returns
     */ getNativeAccountId(request) {
        const account = request.account || this.getAccount({
            loginHint: request.loginHint,
            sid: request.sid
        }) || this.getActiveAccount();
        return account && account.nativeAccountId || "";
    }
    /**
     * Returns new instance of the Popup Interaction Client
     * @param correlationId
     */ createPopupClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$PopupClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PopupClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Returns new instance of the Redirect Interaction Client
     * @param correlationId
     */ createRedirectClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$RedirectClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RedirectClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Iframe Interaction Client
     * @param correlationId
     */ createSilentIframeClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentIframeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentIframeClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Cache Interaction Client
     */ createSilentCacheClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentCacheClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentCacheClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Refresh Interaction Client
     */ createSilentRefreshClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentRefreshClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentRefreshClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent AuthCode Interaction Client
     */ createSilentAuthCodeClient(correlationId) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$interaction_client$2f$SilentAuthCodeClient$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SilentAuthCodeClient"](this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenByCode, this.performanceClient, this.nativeExtensionProvider, correlationId);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ addEventCallback(callback) {
        return this.eventHandler.addEventCallback(callback);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    }
    /**
     * Registers a callback to receive performance events.
     *
     * @param {PerformanceCallbackFunction} callback
     * @returns {string}
     */ addPerformanceCallback(callback) {
        return this.performanceClient.addPerformanceCallback(callback);
    }
    /**
     * Removes a callback registered with addPerformanceCallback.
     *
     * @param {string} callbackId
     * @returns {boolean}
     */ removePerformanceCallback(callbackId) {
        return this.performanceClient.removePerformanceCallback(callbackId);
    }
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ enableAccountStorageEvents() {
        this.eventHandler.enableAccountStorageEvents();
    }
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ disableAccountStorageEvents() {
        this.eventHandler.disableAccountStorageEvents();
    }
    /**
     * Gets the token cache for the application.
     */ getTokenCache() {
        return this.tokenCache;
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.logger;
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.logger = logger;
    }
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */ initializeWrapperLibrary(sku, version) {
        // Validate the SKU passed in is one we expect
        this.browserStorage.setWrapperMetadata(sku, version);
    }
    /**
     * Sets navigation client
     * @param navigationClient
     */ setNavigationClient(navigationClient) {
        this.navigationClient = navigationClient;
    }
    /**
     * Returns the configuration object
     */ getConfiguration() {
        return this.config;
    }
    /**
     * Returns the performance client
     */ getPerformanceClient() {
        return this.performanceClient;
    }
    /**
     * Returns the browser env indicator
     */ isBrowserEnv() {
        return this.isBrowserEnvironment;
    }
    /**
     * Returns the event handler
     */ getEventHandler() {
        return this.eventHandler;
    }
    /**
     * Generates a correlation id for a request if none is provided.
     *
     * @protected
     * @param {?Partial<BaseAuthRequest>} [request]
     * @returns {string}
     */ getRequestCorrelationId(request) {
        if (request?.correlationId) {
            return request.correlationId;
        }
        if (this.isBrowserEnvironment) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$BrowserCrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNewGuid"])();
        }
        /*
         * Included for fallback for non-browser environments,
         * and to ensure this method always returns a string.
         */ return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING;
    }
    // #endregion
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ async loginRedirect(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("loginRedirect called", correlationId);
        return this.acquireTokenRedirect({
            correlationId,
            ...request || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_REQUEST"]
        });
    }
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ loginPopup(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("loginPopup called", correlationId);
        return this.acquireTokenPopup({
            correlationId,
            ...request || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_REQUEST"]
        });
    }
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
     */ async acquireTokenSilent(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const atsMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenSilent, correlationId);
        atsMeasurement.add({
            cacheLookupPolicy: request.cacheLookupPolicy,
            scenarioId: request.scenarioId
        });
        preflightCheck(this.initialized, atsMeasurement);
        this.logger.verbose("acquireTokenSilent called", correlationId);
        const account = request.account || this.getActiveAccount();
        if (!account) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createBrowserAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$BrowserAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noAccountError"]);
        }
        atsMeasurement.add({
            accountType: getAccountType(account)
        });
        const thumbprint = {
            clientId: this.config.auth.clientId,
            authority: request.authority || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Constants"].EMPTY_STRING,
            scopes: request.scopes,
            homeAccountIdentifier: account.homeAccountId,
            claims: request.claims,
            authenticationScheme: request.authenticationScheme,
            resourceRequestMethod: request.resourceRequestMethod,
            resourceRequestUri: request.resourceRequestUri,
            shrClaims: request.shrClaims,
            sshKid: request.sshKid,
            shrOptions: request.shrOptions
        };
        const silentRequestKey = JSON.stringify(thumbprint);
        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);
        if (typeof cachedResponse === "undefined") {
            this.logger.verbose("acquireTokenSilent called for the first time, storing active request", correlationId);
            const response = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.acquireTokenSilentAsync.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenSilentAsync, this.logger, this.performanceClient, correlationId)({
                ...request,
                correlationId
            }, account).then((result)=>{
                this.activeSilentTokenRequests.delete(silentRequestKey);
                atsMeasurement.end({
                    success: true,
                    fromCache: result.fromCache,
                    isNativeBroker: result.fromNativeBroker,
                    cacheLookupPolicy: request.cacheLookupPolicy,
                    requestId: result.requestId,
                    accessTokenSize: result.accessToken.length,
                    idTokenSize: result.idToken.length
                });
                return result;
            }).catch((error)=>{
                this.activeSilentTokenRequests.delete(silentRequestKey);
                atsMeasurement.end({
                    success: false
                }, error);
                throw error;
            });
            this.activeSilentTokenRequests.set(silentRequestKey, response);
            return {
                ...await response,
                state: request.state
            };
        } else {
            this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call", correlationId);
            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics
            atsMeasurement.discard();
            return {
                ...await cachedResponse,
                state: request.state
            };
        }
    }
    /**
     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
     * @param {@link (SilentRequest:type)}
     * @param {@link (AccountInfo:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
     */ async acquireTokenSilentAsync(request, account) {
        this.performanceClient.addQueueMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenSilentAsync, request.correlationId);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, request);
        if (request.correlationId) {
            this.performanceClient.incrementFields({
                visibilityChangeCount: 0
            }, request.correlationId);
        }
        document.addEventListener("visibilitychange", ()=>this.trackPageVisibility(request.correlationId));
        const silentRequest = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$request$2f$RequestHelpers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["initializeSilentRequest"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].InitializeSilentRequest, this.logger, this.performanceClient, request.correlationId)(request, account, this.config, this.performanceClient, this.logger);
        const cacheLookupPolicy = request.cacheLookupPolicy || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].Default;
        const result = this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy).catch(async (refreshTokenError)=>{
            const shouldTryToResolveSilently = checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy);
            if (shouldTryToResolveSilently) {
                if (!this.activeIframeRequest) {
                    let _resolve;
                    // Always set the active request tracker immediately after checking it to prevent races
                    this.activeIframeRequest = [
                        new Promise((resolve)=>{
                            _resolve = resolve;
                        }),
                        silentRequest.correlationId
                    ];
                    this.logger.verbose("Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.", silentRequest.correlationId);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.acquireTokenBySilentIframe.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest).then((iframeResult)=>{
                        _resolve(true);
                        return iframeResult;
                    }).catch((e)=>{
                        _resolve(false);
                        throw e;
                    }).finally(()=>{
                        this.activeIframeRequest = undefined;
                    });
                } else if (cacheLookupPolicy !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].Skip) {
                    const [activePromise, activeCorrelationId] = this.activeIframeRequest;
                    this.logger.verbose(`Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`, silentRequest.correlationId);
                    const awaitConcurrentIframeMeasure = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AwaitConcurrentIframe, silentRequest.correlationId);
                    awaitConcurrentIframeMeasure.add({
                        awaitIframeCorrelationId: activeCorrelationId
                    });
                    const activePromiseResult = await activePromise;
                    awaitConcurrentIframeMeasure.end({
                        success: activePromiseResult
                    });
                    if (activePromiseResult) {
                        this.logger.verbose(`Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`, silentRequest.correlationId);
                        // Retry cache lookup and/or RT exchange after iframe completes
                        return this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy);
                    } else {
                        this.logger.info(`Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`);
                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.
                        throw refreshTokenError;
                    }
                } else {
                    // Cache policy set to skip and another iframe request is already in progress
                    this.logger.warning("Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.", silentRequest.correlationId);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.acquireTokenBySilentIframe.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);
                }
            } else {
                // Error cannot be silently resolved or iframe renewal is not allowed, interaction required
                throw refreshTokenError;
            }
        });
        return result.then((response)=>{
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, response);
            if (request.correlationId) {
                this.performanceClient.addFields({
                    fromCache: response.fromCache,
                    isNativeBroker: response.fromNativeBroker,
                    requestId: response.requestId
                }, request.correlationId);
            }
            return response;
        }).catch((tokenRenewalError)=>{
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null, tokenRenewalError);
            throw tokenRenewalError;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", ()=>this.trackPageVisibility(request.correlationId));
        });
    }
    /**
     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.
     * @param silentRequest
     * @param cacheLookupPolicy
     * @returns
     */ async acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$broker$2f$nativeBroker$2f$NativeMessageHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeMessageHandler"].isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, silentRequest.authenticationScheme) && silentRequest.account.nativeAccountId) {
            this.logger.verbose("acquireTokenSilent - attempting to acquire token from native platform");
            return this.acquireTokenNative(silentRequest, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiId"].acquireTokenSilent_silentFlow).catch(async (e)=>{
                // If native token acquisition fails for availability reasons fallback to web flow
                if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NativeAuthError"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NativeAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFatalNativeAuthError"])(e)) {
                    this.logger.verbose("acquireTokenSilent - native platform unavailable, falling back to web flow");
                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt
                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].tokenRefreshRequired);
                }
                throw e;
            });
        } else {
            this.logger.verbose("acquireTokenSilent - attempting to acquire token from web flow");
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.acquireTokenFromCache.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenFromCache, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy).catch((cacheError)=>{
                if (cacheLookupPolicy === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CacheLookupPolicy"].AccessToken) {
                    throw cacheError;
                }
                this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_NETWORK_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, silentRequest);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$FunctionWrappers$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["invokeAsync"])(this.acquireTokenByRefreshToken.bind(this), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenByRefreshToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy);
            });
        }
    }
}
/**
 * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction
 * @param refreshTokenError
 * @param silentRequest
 * @param cacheLookupPolicy
 * @returns
 */ function checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy) {
    const noInteractionRequired = !(refreshTokenError instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["InteractionRequiredAuthError"] && // For refresh token errors, bad_token does not always require interaction (silently resolvable)
    refreshTokenError.subError !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__["InteractionRequiredAuthErrorCodes"].badToken);
    // Errors that result when the refresh token needs to be replaced
    const refreshTokenRefreshRequired = refreshTokenError.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserConstants"].INVALID_GRANT_ERROR || refreshTokenError.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].tokenRefreshRequired;
    // Errors that may be resolved before falling back to interaction (through iframe renewal)
    const isSilentlyResolvable = noInteractionRequired && refreshTokenRefreshRequired || refreshTokenError.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__["InteractionRequiredAuthErrorCodes"].noTokensFound || refreshTokenError.errorCode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__InteractionRequiredAuthErrorCodes$3e$__["InteractionRequiredAuthErrorCodes"].refreshTokenExpired;
    // Only these policies allow for an iframe renewal attempt
    const tryIframeRenewal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["iFrameRenewalPolicies"].includes(cacheLookupPolicy);
    return isSilentlyResolvable && tryIframeRenewal;
}
;
 //# sourceMappingURL=StandardController.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "isBridgeError": ()=>isBridgeError
});
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isBridgeError(error) {
    return error.status !== undefined;
}
;
 //# sourceMappingURL=BridgeError.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NestedAppAuthAdapter": ()=>NestedAppAuthAdapter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$RequestParameterBuilder$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/StringUtils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs [app-ssr] (ecmascript) <export * as ClientAuthErrorCodes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AuthToken.mjs [app-ssr] (ecmascript) <export * as AuthToken>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AccountInfo$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/account/AccountInfo.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/ServerError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppAuthAdapter {
    constructor(clientId, clientCapabilities, crypto, logger){
        this.clientId = clientId;
        this.clientCapabilities = clientCapabilities;
        this.crypto = crypto;
        this.logger = logger;
    }
    toNaaTokenRequest(request) {
        let extraParams;
        if (request.extraQueryParameters === undefined) {
            extraParams = new Map();
        } else {
            extraParams = new Map(Object.entries(request.extraQueryParameters));
        }
        const requestBuilder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$request$2f$RequestParameterBuilder$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RequestParameterBuilder"]();
        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);
        const scopes = request.scopes || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OIDC_DEFAULT_SCOPES"];
        const tokenRequest = {
            platformBrokerId: request.account?.homeAccountId,
            clientId: this.clientId,
            authority: request.authority,
            scope: scopes.join(" "),
            correlationId: request.correlationId !== undefined ? request.correlationId : this.crypto.createNewGuid(),
            claims: !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$StringUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StringUtils"].isEmptyObj(claims) ? claims : undefined,
            state: request.state,
            authenticationScheme: request.authenticationScheme || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER,
            extraParameters: extraParams
        };
        return tokenRequest;
    }
    fromNaaTokenResponse(request, response, reqTimestamp) {
        if (!response.token.id_token || !response.token.access_token) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].nullOrEmptyToken);
        }
        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);
        const idTokenClaims = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__["AuthToken"].extractTokenClaims(response.token.id_token, this.crypto.base64Decode);
        const account = this.fromNaaAccountInfo(response.account, response.token.id_token, idTokenClaims);
        const scopes = response.token.scope || request.scope;
        const authenticationResult = {
            authority: response.token.authority || account.environment,
            uniqueId: account.localAccountId,
            tenantId: account.tenantId,
            scopes: scopes.split(" "),
            account,
            idToken: response.token.id_token,
            idTokenClaims,
            accessToken: response.token.access_token,
            fromCache: false,
            expiresOn: expiresOn,
            tokenType: request.authenticationScheme || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER,
            correlationId: request.correlationId,
            extExpiresOn: expiresOn,
            state: request.state
        };
        return authenticationResult;
    }
    /*
     *  export type AccountInfo = {
     *     homeAccountId: string;
     *     environment: string;
     *     tenantId: string;
     *     username: string;
     *     localAccountId: string;
     *     name?: string;
     *     idToken?: string;
     *     idTokenClaims?: TokenClaims & {
     *         [key: string]:
     *             | string
     *             | number
     *             | string[]
     *             | object
     *             | undefined
     *             | unknown;
     *     };
     *     nativeAccountId?: string;
     *     authorityType?: string;
     * };
     */ fromNaaAccountInfo(fromAccount, idToken, idTokenClaims) {
        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;
        const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || "";
        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || "";
        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;
        const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || "";
        const name = fromAccount.name || effectiveIdTokenClaims?.name;
        const tenantProfiles = new Map();
        const tenantProfile = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AccountInfo$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildTenantProfileFromIdTokenClaims"])(homeAccountId, effectiveIdTokenClaims);
        tenantProfiles.set(tenantId, tenantProfile);
        const account = {
            homeAccountId,
            environment: fromAccount.environment,
            tenantId,
            username,
            localAccountId,
            name,
            idToken: idToken,
            idTokenClaims: effectiveIdTokenClaims,
            tenantProfiles
        };
        return account;
    }
    /**
     *
     * @param error BridgeError
     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError
     */ fromBridgeError(error) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isBridgeError"])(error)) {
            switch(error.status){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].UserCancel:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ClientAuthError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].userCanceled);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].NoNetwork:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ClientAuthError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].noNetworkConnectivity);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].AccountUnavailable:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ClientAuthError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].noAccountFound);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].Disabled:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ClientAuthError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].nestedAppAuthBridgeDisabled);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].NestedAppAuthUnavailable:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ClientAuthError"](error.code || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].nestedAppAuthBridgeDisabled, error.description);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].TransientError:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].PersistentError:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ServerError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerError"](error.code, error.description);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$BridgeStatusCode$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BridgeStatusCode"].UserInteractionRequired:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$InteractionRequiredAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["InteractionRequiredAuthError"](error.code, error.description);
                default:
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"](error.code, error.description);
            }
        } else {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"]("unknown_error", "An unknown error occurred");
        }
    }
    /**
     * Returns an AuthenticationResult from the given cache items
     *
     * @param account
     * @param idToken
     * @param accessToken
     * @param reqTimestamp
     * @returns
     */ toAuthenticationResultFromCache(account, idToken, accessToken, request, correlationId) {
        if (!idToken || !accessToken) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createClientAuthError"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$ClientAuthErrorCodes$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ClientAuthErrorCodes$3e$__["ClientAuthErrorCodes"].nullOrEmptyToken);
        }
        const idTokenClaims = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$account$2f$AuthToken$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__AuthToken$3e$__["AuthToken"].extractTokenClaims(idToken.secret, this.crypto.base64Decode);
        const scopes = accessToken.target || request.scopes.join(" ");
        const authenticationResult = {
            authority: accessToken.environment || account.environment,
            uniqueId: account.localAccountId,
            tenantId: account.tenantId,
            scopes: scopes.split(" "),
            account,
            idToken: idToken.secret,
            idTokenClaims: idTokenClaims || {},
            accessToken: accessToken.secret,
            fromCache: true,
            expiresOn: new Date(Number(accessToken.expiresOn) * 1000),
            tokenType: request.authenticationScheme || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthenticationScheme"].BEARER,
            correlationId,
            extExpiresOn: new Date(Number(accessToken.extendedExpiresOn) * 1000),
            state: request.state
        };
        return authenticationResult;
    }
}
;
 //# sourceMappingURL=NestedAppAuthAdapter.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NestedAppAuthError": ()=>NestedAppAuthError,
    "NestedAppAuthErrorMessage": ()=>NestedAppAuthErrorMessage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/error/AuthError.mjs [app-ssr] (ecmascript) <locals>");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.
 */ const NestedAppAuthErrorMessage = {
    unsupportedMethod: {
        code: "unsupported_method",
        desc: "The PKCE code challenge and verifier could not be generated."
    }
};
class NestedAppAuthError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$error$2f$AuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AuthError"] {
    constructor(errorCode, errorMessage){
        super(errorCode, errorMessage);
        Object.setPrototypeOf(this, NestedAppAuthError.prototype);
        this.name = "NestedAppAuthError";
    }
    static createUnsupportedError() {
        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);
    }
}
;
 //# sourceMappingURL=NestedAppAuthError.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "NestedAppAuthController": ()=>NestedAppAuthController
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/authority/Authority.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs [app-ssr] (ecmascript) <export * as TimeUtils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/utils/Constants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$CryptoOps$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$mapping$2f$NestedAppAuthAdapter$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventHandler.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/event/EventType.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppAuthController {
    constructor(operatingContext){
        this.operatingContext = operatingContext;
        const proxy = this.operatingContext.getBridgeProxy();
        if (proxy !== undefined) {
            this.bridgeProxy = proxy;
        } else {
            throw new Error("unexpected: bridgeProxy is undefined");
        }
        // Set the configuration.
        this.config = operatingContext.getConfig();
        // Initialize logger
        this.logger = this.operatingContext.getLogger();
        // Initialize performance client
        this.performanceClient = this.config.telemetry.client;
        // Initialize the crypto class.
        this.browserCrypto = operatingContext.isBrowserEnvironment() ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$crypto$2f$CryptoOps$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CryptoOps"](this.logger, this.performanceClient) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$crypto$2f$ICrypto$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_CRYPTO_IMPLEMENTATION"];
        // Initialize the browser storage class.
        this.browserStorage = this.operatingContext.isBrowserEnvironment() ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BrowserCacheManager"](this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$authority$2f$Authority$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildStaticAuthorityOptions"])(this.config.auth)) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$BrowserCacheManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BROWSER_CACHE_MANAGER"])(this.config.auth.clientId, this.logger);
        this.eventHandler = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventHandler$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventHandler"](this.logger, this.browserCrypto);
        this.nestedAppAuthAdapter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$naa$2f$mapping$2f$NestedAppAuthAdapter$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthAdapter"](this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);
        // Set the active account if available
        const accountContext = this.bridgeProxy.getAccountContext();
        if (accountContext) {
            const cachedAccount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccount"])(accountContext, this.logger, this.browserStorage);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setActiveAccount"])(cachedAccount, this.browserStorage);
        }
    }
    /**
     * Returns the event handler instance
     * @returns EventHandler
     */ getEventHandler() {
        return this.eventHandler;
    }
    /**
     * Factory function to create a new instance of NestedAppAuthController
     * @param operatingContext
     * @returns Promise<IController>
     */ static async createController(operatingContext) {
        const controller = new NestedAppAuthController(operatingContext);
        return Promise.resolve(controller);
    }
    /**
     * Specific implementation of initialize function for NestedAppAuthController
     * @returns
     */ initialize() {
        // do nothing not required by this controller
        return Promise.resolve();
    }
    /**
     * Validate the incoming request and add correlationId if not present
     * @param request
     * @returns
     */ ensureValidRequest(request) {
        if (request?.correlationId) {
            return request;
        }
        return {
            ...request,
            correlationId: this.browserCrypto.createNewGuid()
        };
    }
    /**
     * Internal implementation of acquireTokenInteractive flow
     * @param request
     * @returns
     */ async acquireTokenInteractive(request) {
        const validRequest = this.ensureValidRequest(request);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, validRequest);
        const atPopupMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenPopup, validRequest.correlationId);
        atPopupMeasurement?.add({
            nestedAppAuthRequest: true
        });
        try {
            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);
            const reqTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].nowSeconds();
            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);
            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);
            // cache the tokens in the response
            await this.hydrateCache(result, request);
            this.browserStorage.setActiveAccount(result.account);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, result);
            atPopupMeasurement.add({
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            });
            atPopupMeasurement.end({
                success: true,
                requestId: result.requestId
            });
            return result;
        } catch (e) {
            const error = this.nestedAppAuthAdapter.fromBridgeError(e);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Popup, null, e);
            atPopupMeasurement.end({
                success: false
            }, e);
            throw error;
        }
    }
    /**
     * Internal implementation of acquireTokenSilent flow
     * @param request
     * @returns
     */ async acquireTokenSilentInternal(request) {
        const validRequest = this.ensureValidRequest(request);
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_START, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, validRequest);
        // Look for tokens in the cache first
        const result = await this.acquireTokenFromCache(validRequest);
        if (result) {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, result);
            return result;
        }
        // proceed with acquiring tokens via the host
        const ssoSilentMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].SsoSilent, validRequest.correlationId);
        ssoSilentMeasurement?.increment({
            visibilityChangeCount: 0
        });
        ssoSilentMeasurement?.add({
            nestedAppAuthRequest: true
        });
        try {
            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);
            const reqTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].nowSeconds();
            const response = await this.bridgeProxy.getTokenSilent(naaRequest);
            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);
            // cache the tokens in the response
            await this.hydrateCache(result, request);
            this.browserStorage.setActiveAccount(result.account);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, result);
            ssoSilentMeasurement?.add({
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            });
            ssoSilentMeasurement?.end({
                success: true,
                requestId: result.requestId
            });
            return result;
        } catch (e) {
            const error = this.nestedAppAuthAdapter.fromBridgeError(e);
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null, e);
            ssoSilentMeasurement?.end({
                success: false
            }, e);
            throw error;
        }
    }
    /**
     * acquires tokens from cache
     * @param request
     * @returns
     */ async acquireTokenFromCache(request) {
        const atsMeasurement = this.performanceClient.startMeasurement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$telemetry$2f$performance$2f$PerformanceEvent$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PerformanceEvents"].AcquireTokenSilent, request.correlationId);
        atsMeasurement?.add({
            nestedAppAuthRequest: true
        });
        const result = await this.acquireTokenFromCacheInternal(request);
        if (result) {
            this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_SUCCESS, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, result);
            atsMeasurement?.add({
                accessTokenSize: result?.accessToken.length,
                idTokenSize: result?.idToken.length
            });
            atsMeasurement?.end({
                success: true
            });
            return result;
        }
        this.logger.error("Cached tokens are not found for the account, proceeding with silent token request.");
        this.eventHandler.emitEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$event$2f$EventType$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventType"].ACQUIRE_TOKEN_FAILURE, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InteractionType"].Silent, null);
        atsMeasurement?.end({
            success: false
        });
        return null;
    }
    /**
     *
     * @param request
     * @returns
     */ async acquireTokenFromCacheInternal(request) {
        const accountContext = this.bridgeProxy.getAccountContext();
        let currentAccount = null;
        if (accountContext) {
            const hubAccount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccount"])(accountContext, this.logger, this.browserStorage);
            // always prioritize for hub account context, the reqirement of `request.account` will be removed soon
            currentAccount = hubAccount || request.account;
        }
        // fall back to brokering if no cached account is found
        if (!currentAccount) {
            this.logger.verbose("No active account found, falling back to the host");
            return Promise.resolve(null);
        }
        this.logger.verbose("active account found, attempting to acquire token silently");
        const authRequest = {
            ...request,
            correlationId: request.correlationId || this.browserCrypto.createNewGuid(),
            authority: request.authority || currentAccount.environment,
            scopes: request.scopes?.length ? request.scopes : [
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$Constants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OIDC_DEFAULT_SCOPES"]
            ]
        };
        // fetch access token and check for expiry
        const tokenKeys = this.browserStorage.getTokenKeys();
        const cachedAccessToken = this.browserStorage.getAccessToken(currentAccount, authRequest, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);
        // If there is no access token, log it and return null
        if (!cachedAccessToken) {
            this.logger.verbose("No cached access token found");
            return Promise.resolve(null);
        // If access token has expired, remove the token from cache and return null
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].wasClockTurnedBack(cachedAccessToken.cachedAt) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$utils$2f$TimeUtils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__TimeUtils$3e$__["TimeUtils"].isTokenExpired(cachedAccessToken.expiresOn, this.config.system.tokenRenewalOffsetSeconds)) {
            this.logger.verbose("Cached access token has expired, deleting all related tokens from cache");
            const accountEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].createFromAccountInfo(currentAccount);
            await this.browserStorage.removeAccountContext(accountEntity);
            return Promise.resolve(null);
        }
        const cachedIdToken = this.browserStorage.getIdToken(currentAccount, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);
        if (!cachedIdToken) {
            this.logger.verbose("No cached id token found");
            return Promise.resolve(null);
        }
        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(currentAccount, cachedIdToken, cachedAccessToken, authRequest, authRequest.correlationId);
    }
    /**
     * acquireTokenPopup flow implementation
     * @param request
     * @returns
     */ async acquireTokenPopup(request) {
        return this.acquireTokenInteractive(request);
    }
    /**
     * acquireTokenRedirect flow is not supported in nested app auth
     * @param request
     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    acquireTokenRedirect(request) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    /**
     * acquireTokenSilent flow implementation
     * @param silentRequest
     * @returns
     */ async acquireTokenSilent(silentRequest) {
        return this.acquireTokenSilentInternal(silentRequest);
    }
    /**
     * Hybrid flow is not currently supported in nested app auth
     * @param request
     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    /**
     * acquireTokenNative flow is not currently supported in nested app auth
     * @param request
     * @param apiId
     * @param accountId
     */ acquireTokenNative(request, apiId, accountId // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    /**
     * acquireTokenByRefreshToken flow is not currently supported in nested app auth
     * @param commonRequest
     * @param silentRequest
     */ acquireTokenByRefreshToken(commonRequest, silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ addEventCallback(callback) {
        return this.eventHandler.addEventCallback(callback);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addPerformanceCallback(callback) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removePerformanceCallback(callbackId) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    enableAccountStorageEvents() {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    disableAccountStorageEvents() {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    // #region Account APIs
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllAccounts"])(this.logger, this.browserStorage, this.isBrowserEnv(), accountFilter);
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccount"])(accountFilter, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param username
     * @returns The account object stored in MSAL
     */ getAccountByUsername(username) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByUsername"])(username, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */ getAccountByHomeId(homeAccountId) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByHomeId"])(homeAccountId, this.logger, this.browserStorage);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */ getAccountByLocalId(localAccountId) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccountByLocalId"])(localAccountId, this.logger, this.browserStorage);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        /*
         * StandardController uses this to allow the developer to set the active account
         * in the nested app auth scenario the active account is controlled by the app hosting the nested app
         */ return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setActiveAccount"])(account, this.browserStorage);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$cache$2f$AccountManager$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getActiveAccount"])(this.browserStorage);
    }
    // #endregion
    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        return Promise.resolve(null);
    }
    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        return this.acquireTokenInteractive(request || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$utils$2f$BrowserConstants$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_REQUEST"]);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    loginRedirect(request) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    logout(logoutRequest) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    ssoSilent(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    request) {
        return this.acquireTokenSilentInternal(request);
    }
    getTokenCache() {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.logger;
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.logger = logger;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    initializeWrapperLibrary(sku, version) {
        /*
         * Standard controller uses this to set the sku and version of the wrapper library in the storage
         * we do nothing here
         */ return;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setNavigationClient(navigationClient) {
        this.logger.warning("setNavigationClient is not supported in nested app auth");
    }
    getConfiguration() {
        return this.config;
    }
    isBrowserEnv() {
        return this.operatingContext.isBrowserEnvironment();
    }
    getBrowserCrypto() {
        return this.browserCrypto;
    }
    getPerformanceClient() {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    getRedirectResponse() {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async clearCache(logoutRequest) {
        throw __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$error$2f$NestedAppAuthError$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthError"].createUnsupportedError();
    }
    async hydrateCache(result, request) {
        this.logger.verbose("hydrateCache called");
        const accountEntity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$common$2f$dist$2f$cache$2f$entities$2f$AccountEntity$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AccountEntity"].createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);
        this.browserStorage.setAccount(accountEntity);
        return this.browserStorage.hydrateCache(result, request);
    }
}
;
 //# sourceMappingURL=NestedAppAuthController.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "createController": ()=>createController,
    "createV3Controller": ()=>createV3Controller
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$NestedAppOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$StandardOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$StandardController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$NestedAppAuthController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ async function createV3Controller(config) {
    const standard = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$StandardOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardOperatingContext"](config);
    await standard.initialize();
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$StandardController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardController"].createController(standard);
}
async function createController(config) {
    const standard = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$StandardOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardOperatingContext"](config);
    const nestedApp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$NestedAppOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppOperatingContext"](config);
    const operatingContexts = [
        standard.initialize(),
        nestedApp.initialize()
    ];
    await Promise.all(operatingContexts);
    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$NestedAppAuthController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthController"].createController(nestedApp);
    } else if (standard.isAvailable()) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$StandardController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardController"].createController(standard);
    } else {
        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController
        return null;
    }
}
;
 //# sourceMappingURL=ControllerFactory.mjs.map

})()),
"[project]/node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs [app-ssr] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/*! @azure/msal-browser v3.17.0 2024-06-10 */ __turbopack_esm__({
    "PublicClientApplication": ()=>PublicClientApplication,
    "createNestablePublicClientApplication": ()=>createNestablePublicClientApplication,
    "createStandardPublicClientApplication": ()=>createStandardPublicClientApplication
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$ControllerFactory$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$StandardController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$StandardOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$NestedAppAuthController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$NestedAppOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs [app-ssr] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
;
;
;
;
;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
 * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
 */ class PublicClientApplication {
    // creates StandardController and passes it to the PublicClientApplication
    static async createPublicClientApplication(configuration) {
        const controller = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$ControllerFactory$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createV3Controller"])(configuration);
        const pca = new PublicClientApplication(configuration, controller);
        return pca;
    }
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)
     */ constructor(configuration, controller){
        this.controller = controller || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$StandardController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardController"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$StandardOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StandardOperatingContext"](configuration));
    }
    /**
     * Initializer function to perform async startup tasks such as connecting to WAM extension
     */ async initialize() {
        return this.controller.initialize();
    }
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenPopup(request) {
        return this.controller.acquireTokenPopup(request);
    }
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ acquireTokenRedirect(request) {
        return this.controller.acquireTokenRedirect(request);
    }
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object
     */ acquireTokenSilent(silentRequest) {
        return this.controller.acquireTokenSilent(silentRequest);
    }
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ acquireTokenByCode(request) {
        return this.controller.acquireTokenByCode(request);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ addEventCallback(callback) {
        return this.controller.addEventCallback(callback);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        return this.controller.removeEventCallback(callbackId);
    }
    /**
     * Registers a callback to receive performance events.
     *
     * @param {PerformanceCallbackFunction} callback
     * @returns {string}
     */ addPerformanceCallback(callback) {
        return this.controller.addPerformanceCallback(callback);
    }
    /**
     * Removes a callback registered with addPerformanceCallback.
     *
     * @param {string} callbackId
     * @returns {boolean}
     */ removePerformanceCallback(callbackId) {
        return this.controller.removePerformanceCallback(callbackId);
    }
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ enableAccountStorageEvents() {
        this.controller.enableAccountStorageEvents();
    }
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ disableAccountStorageEvents() {
        this.controller.disableAccountStorageEvents();
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        return this.controller.getAccount(accountFilter);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByHomeId(homeAccountId) {
        return this.controller.getAccountByHomeId(homeAccountId);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByLocalId(localId) {
        return this.controller.getAccountByLocalId(localId);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param userName
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByUsername(userName) {
        return this.controller.getAccountByUsername(userName);
    }
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        return this.controller.getAllAccounts(accountFilter);
    }
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */ handleRedirectPromise(hash) {
        return this.controller.handleRedirectPromise(hash);
    }
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ loginPopup(request) {
        return this.controller.loginPopup(request);
    }
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ loginRedirect(request) {
        return this.controller.loginRedirect(request);
    }
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */ logout(logoutRequest) {
        return this.controller.logout(logoutRequest);
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ logoutRedirect(logoutRequest) {
        return this.controller.logoutRedirect(logoutRequest);
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logoutPopup(logoutRequest) {
        return this.controller.logoutPopup(logoutRequest);
    }
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ssoSilent(request) {
        return this.controller.ssoSilent(request);
    }
    /**
     * Gets the token cache for the application.
     */ getTokenCache() {
        return this.controller.getTokenCache();
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.controller.getLogger();
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.controller.setLogger(logger);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        this.controller.setActiveAccount(account);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        return this.controller.getActiveAccount();
    }
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */ initializeWrapperLibrary(sku, version) {
        return this.controller.initializeWrapperLibrary(sku, version);
    }
    /**
     * Sets navigation client
     * @param navigationClient
     */ setNavigationClient(navigationClient) {
        this.controller.setNavigationClient(navigationClient);
    }
    /**
     * Returns the configuration object
     * @internal
     */ getConfiguration() {
        return this.controller.getConfiguration();
    }
    /**
     * Hydrates cache with the tokens and account in the AuthenticationResult object
     * @param result
     * @param request - The request object that was used to obtain the AuthenticationResult
     * @returns
     */ async hydrateCache(result, request) {
        return this.controller.hydrateCache(result, request);
    }
    /**
     * Clears tokens and account from the browser cache.
     * @param logoutRequest
     */ clearCache(logoutRequest) {
        return this.controller.clearCache(logoutRequest);
    }
}
/**
 * creates NestedAppAuthController and passes it to the PublicClientApplication,
 * falls back to StandardController if NestedAppAuthController is not available
 *
 * @param configuration
 * @returns IPublicClientApplication
 *
 */ async function createNestablePublicClientApplication(configuration) {
    const nestedAppAuth = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$operatingcontext$2f$NestedAppOperatingContext$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppOperatingContext"](configuration);
    await nestedAppAuth.initialize();
    if (nestedAppAuth.isAvailable()) {
        const controller = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$browser$2f$dist$2f$controllers$2f$NestedAppAuthController$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NestedAppAuthController"](nestedAppAuth);
        return new PublicClientApplication(configuration, controller);
    }
    return createStandardPublicClientApplication(configuration);
}
/**
 * creates PublicClientApplication using StandardController
 *
 * @param configuration
 * @returns IPublicClientApplication
 *
 */ async function createStandardPublicClientApplication(configuration) {
    const pca = new PublicClientApplication(configuration);
    await pca.initialize();
    return pca;
}
;
 //# sourceMappingURL=PublicClientApplication.mjs.map

})()),

};

//# sourceMappingURL=node_modules_%40azure_msal-browser_dist_b77f6f._.js.map